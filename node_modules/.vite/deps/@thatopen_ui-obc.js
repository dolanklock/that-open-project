import {
  Bf,
  Sc,
  xa
} from "./chunk-6DUDFJPI.js";
import {
  Ai,
  Bn,
  Ci,
  Or,
  Ri,
  We,
  _n,
  ia,
  oa,
  un,
  ut
} from "./chunk-Q7P4KOYP.js";
import "./chunk-LVJ3QK2Y.js";
import {
  AmbientLight,
  BufferAttribute,
  BufferGeometry,
  Color,
  DirectionalLight,
  Frustum,
  Group,
  Light,
  LineBasicMaterial,
  LineSegments,
  Matrix4,
  Object3D,
  PerspectiveCamera,
  Vector2,
  Vector3
} from "./chunk-D5NTCM2J.js";
import {
  IFCCLASSIFICATIONREFERENCE,
  IFCELEMENTQUANTITY,
  IFCMATERIAL,
  IFCMATERIALLAYER,
  IFCMATERIALLAYERSET,
  IFCMATERIALLAYERSETUSAGE,
  IFCMATERIALLIST,
  IFCPROJECT,
  IFCPROPERTYSET,
  REF
} from "./chunk-K36ZYHOX.js";
import "./chunk-3EJPJMEH.js";

// node_modules/@thatopen/ui-obc/dist/index.js
var pr = Object.defineProperty;
var fr = (i, t, e) => t in i ? pr(i, t, { enumerable: true, configurable: true, writable: true, value: e }) : i[t] = e;
var At = (i, t, e) => (fr(i, typeof t != "symbol" ? t + "" : t, e), e);
var Ut = Math.min;
var rt = Math.max;
var Ke = Math.round;
var gt = (i) => ({
  x: i,
  y: i
});
var mr = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
var br = {
  start: "end",
  end: "start"
};
function xn(i, t, e) {
  return rt(i, Ut(t, e));
}
function Te(i, t) {
  return typeof i == "function" ? i(t) : i;
}
function at(i) {
  return i.split("-")[0];
}
function hi(i) {
  return i.split("-")[1];
}
function _s(i) {
  return i === "x" ? "y" : "x";
}
function xs(i) {
  return i === "y" ? "height" : "width";
}
function Ie(i) {
  return ["top", "bottom"].includes(at(i)) ? "y" : "x";
}
function ws(i) {
  return _s(Ie(i));
}
function gr(i, t, e) {
  e === void 0 && (e = false);
  const s = hi(i), n = ws(i), o = xs(n);
  let r = n === "x" ? s === (e ? "end" : "start") ? "right" : "left" : s === "start" ? "bottom" : "top";
  return t.reference[o] > t.floating[o] && (r = ti(r)), [r, ti(r)];
}
function vr(i) {
  const t = ti(i);
  return [Li(i), t, Li(t)];
}
function Li(i) {
  return i.replace(/start|end/g, (t) => br[t]);
}
function yr(i, t, e) {
  const s = ["left", "right"], n = ["right", "left"], o = ["top", "bottom"], r = ["bottom", "top"];
  switch (i) {
    case "top":
    case "bottom":
      return e ? t ? n : s : t ? s : n;
    case "left":
    case "right":
      return t ? o : r;
    default:
      return [];
  }
}
function _r(i, t, e, s) {
  const n = hi(i);
  let o = yr(at(i), e === "start", s);
  return n && (o = o.map((r) => r + "-" + n), t && (o = o.concat(o.map(Li)))), o;
}
function ti(i) {
  return i.replace(/left|right|bottom|top/g, (t) => mr[t]);
}
function xr(i) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...i
  };
}
function $s(i) {
  return typeof i != "number" ? xr(i) : {
    top: i,
    right: i,
    bottom: i,
    left: i
  };
}
function Vt(i) {
  const {
    x: t,
    y: e,
    width: s,
    height: n
  } = i;
  return {
    width: s,
    height: n,
    top: e,
    left: t,
    right: t + s,
    bottom: e + n,
    x: t,
    y: e
  };
}
function wn(i, t, e) {
  let {
    reference: s,
    floating: n
  } = i;
  const o = Ie(t), r = ws(t), a = xs(r), l = at(t), u = o === "y", h = s.x + s.width / 2 - n.width / 2, d = s.y + s.height / 2 - n.height / 2, c = s[a] / 2 - n[a] / 2;
  let p;
  switch (l) {
    case "top":
      p = {
        x: h,
        y: s.y - n.height
      };
      break;
    case "bottom":
      p = {
        x: h,
        y: s.y + s.height
      };
      break;
    case "right":
      p = {
        x: s.x + s.width,
        y: d
      };
      break;
    case "left":
      p = {
        x: s.x - n.width,
        y: d
      };
      break;
    default:
      p = {
        x: s.x,
        y: s.y
      };
  }
  switch (hi(t)) {
    case "start":
      p[r] -= c * (e && u ? -1 : 1);
      break;
    case "end":
      p[r] += c * (e && u ? -1 : 1);
      break;
  }
  return p;
}
var wr = async (i, t, e) => {
  const {
    placement: s = "bottom",
    strategy: n = "absolute",
    middleware: o = [],
    platform: r
  } = e, a = o.filter(Boolean), l = await (r.isRTL == null ? void 0 : r.isRTL(t));
  let u = await r.getElementRects({
    reference: i,
    floating: t,
    strategy: n
  }), {
    x: h,
    y: d
  } = wn(u, s, l), c = s, p = {}, g = 0;
  for (let w = 0; w < a.length; w++) {
    const {
      name: _,
      fn: x
    } = a[w], {
      x: m,
      y: b,
      data: v,
      reset: $
    } = await x({
      x: h,
      y: d,
      initialPlacement: s,
      placement: c,
      strategy: n,
      middlewareData: p,
      rects: u,
      platform: r,
      elements: {
        reference: i,
        floating: t
      }
    });
    h = m ?? h, d = b ?? d, p = {
      ...p,
      [_]: {
        ...p[_],
        ...v
      }
    }, $ && g <= 50 && (g++, typeof $ == "object" && ($.placement && (c = $.placement), $.rects && (u = $.rects === true ? await r.getElementRects({
      reference: i,
      floating: t,
      strategy: n
    }) : $.rects), {
      x: h,
      y: d
    } = wn(u, c, l)), w = -1);
  }
  return {
    x: h,
    y: d,
    placement: c,
    strategy: n,
    middlewareData: p
  };
};
async function Ki(i, t) {
  var e;
  t === void 0 && (t = {});
  const {
    x: s,
    y: n,
    platform: o,
    rects: r,
    elements: a,
    strategy: l
  } = i, {
    boundary: u = "clippingAncestors",
    rootBoundary: h = "viewport",
    elementContext: d = "floating",
    altBoundary: c = false,
    padding: p = 0
  } = Te(t, i), g = $s(p), w = a[c ? d === "floating" ? "reference" : "floating" : d], _ = Vt(await o.getClippingRect({
    element: (e = await (o.isElement == null ? void 0 : o.isElement(w))) == null || e ? w : w.contextElement || await (o.getDocumentElement == null ? void 0 : o.getDocumentElement(a.floating)),
    boundary: u,
    rootBoundary: h,
    strategy: l
  })), x = d === "floating" ? {
    x: s,
    y: n,
    width: r.floating.width,
    height: r.floating.height
  } : r.reference, m = await (o.getOffsetParent == null ? void 0 : o.getOffsetParent(a.floating)), b = await (o.isElement == null ? void 0 : o.isElement(m)) ? await (o.getScale == null ? void 0 : o.getScale(m)) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  }, v = Vt(o.convertOffsetParentRelativeRectToViewportRelativeRect ? await o.convertOffsetParentRelativeRectToViewportRelativeRect({
    elements: a,
    rect: x,
    offsetParent: m,
    strategy: l
  }) : x);
  return {
    top: (_.top - v.top + g.top) / b.y,
    bottom: (v.bottom - _.bottom + g.bottom) / b.y,
    left: (_.left - v.left + g.left) / b.x,
    right: (v.right - _.right + g.right) / b.x
  };
}
var $r = function(i) {
  return i === void 0 && (i = {}), {
    name: "flip",
    options: i,
    async fn(t) {
      var e, s;
      const {
        placement: n,
        middlewareData: o,
        rects: r,
        initialPlacement: a,
        platform: l,
        elements: u
      } = t, {
        mainAxis: h = true,
        crossAxis: d = true,
        fallbackPlacements: c,
        fallbackStrategy: p = "bestFit",
        fallbackAxisSideDirection: g = "none",
        flipAlignment: w = true,
        ..._
      } = Te(i, t);
      if ((e = o.arrow) != null && e.alignmentOffset)
        return {};
      const x = at(n), m = at(a) === a, b = await (l.isRTL == null ? void 0 : l.isRTL(u.floating)), v = c || (m || !w ? [ti(a)] : vr(a));
      !c && g !== "none" && v.push(..._r(a, w, g, b));
      const $ = [a, ...v], C = await Ki(t, _), E = [];
      let A = ((s = o.flip) == null ? void 0 : s.overflows) || [];
      if (h && E.push(C[x]), d) {
        const G = gr(n, r, b);
        E.push(C[G[0]], C[G[1]]);
      }
      if (A = [...A, {
        placement: n,
        overflows: E
      }], !E.every((G) => G <= 0)) {
        var B, I;
        const G = (((B = o.flip) == null ? void 0 : B.index) || 0) + 1, ht = $[G];
        if (ht)
          return {
            data: {
              index: G,
              overflows: A
            },
            reset: {
              placement: ht
            }
          };
        let q = (I = A.filter((Y) => Y.overflows[0] <= 0).sort((Y, z) => Y.overflows[1] - z.overflows[1])[0]) == null ? void 0 : I.placement;
        if (!q)
          switch (p) {
            case "bestFit": {
              var W;
              const Y = (W = A.map((z) => [z.placement, z.overflows.filter((st) => st > 0).reduce((st, ce) => st + ce, 0)]).sort((z, st) => z[1] - st[1])[0]) == null ? void 0 : W[0];
              Y && (q = Y);
              break;
            }
            case "initialPlacement":
              q = a;
              break;
          }
        if (n !== q)
          return {
            reset: {
              placement: q
            }
          };
      }
      return {};
    }
  };
};
function Cs(i) {
  const t = Ut(...i.map((o) => o.left)), e = Ut(...i.map((o) => o.top)), s = rt(...i.map((o) => o.right)), n = rt(...i.map((o) => o.bottom));
  return {
    x: t,
    y: e,
    width: s - t,
    height: n - e
  };
}
function Cr(i) {
  const t = i.slice().sort((n, o) => n.y - o.y), e = [];
  let s = null;
  for (let n = 0; n < t.length; n++) {
    const o = t[n];
    !s || o.y - s.y > s.height / 2 ? e.push([o]) : e[e.length - 1].push(o), s = o;
  }
  return e.map((n) => Vt(Cs(n)));
}
var Er = function(i) {
  return i === void 0 && (i = {}), {
    name: "inline",
    options: i,
    async fn(t) {
      const {
        placement: e,
        elements: s,
        rects: n,
        platform: o,
        strategy: r
      } = t, {
        padding: a = 2,
        x: l,
        y: u
      } = Te(i, t), h = Array.from(await (o.getClientRects == null ? void 0 : o.getClientRects(s.reference)) || []), d = Cr(h), c = Vt(Cs(h)), p = $s(a);
      function g() {
        if (d.length === 2 && d[0].left > d[1].right && l != null && u != null)
          return d.find((_) => l > _.left - p.left && l < _.right + p.right && u > _.top - p.top && u < _.bottom + p.bottom) || c;
        if (d.length >= 2) {
          if (Ie(e) === "y") {
            const I = d[0], W = d[d.length - 1], G = at(e) === "top", ht = I.top, q = W.bottom, Y = G ? I.left : W.left, z = G ? I.right : W.right, st = z - Y, ce = q - ht;
            return {
              top: ht,
              bottom: q,
              left: Y,
              right: z,
              width: st,
              height: ce,
              x: Y,
              y: ht
            };
          }
          const _ = at(e) === "left", x = rt(...d.map((I) => I.right)), m = Ut(...d.map((I) => I.left)), b = d.filter((I) => _ ? I.left === m : I.right === x), v = b[0].top, $ = b[b.length - 1].bottom, C = m, E = x, A = E - C, B = $ - v;
          return {
            top: v,
            bottom: $,
            left: C,
            right: E,
            width: A,
            height: B,
            x: C,
            y: v
          };
        }
        return c;
      }
      const w = await o.getElementRects({
        reference: {
          getBoundingClientRect: g
        },
        floating: s.floating,
        strategy: r
      });
      return n.reference.x !== w.reference.x || n.reference.y !== w.reference.y || n.reference.width !== w.reference.width || n.reference.height !== w.reference.height ? {
        reset: {
          rects: w
        }
      } : {};
    }
  };
};
async function Ar(i, t) {
  const {
    placement: e,
    platform: s,
    elements: n
  } = i, o = await (s.isRTL == null ? void 0 : s.isRTL(n.floating)), r = at(e), a = hi(e), l = Ie(e) === "y", u = ["left", "top"].includes(r) ? -1 : 1, h = o && l ? -1 : 1, d = Te(t, i);
  let {
    mainAxis: c,
    crossAxis: p,
    alignmentAxis: g
  } = typeof d == "number" ? {
    mainAxis: d,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: 0,
    crossAxis: 0,
    alignmentAxis: null,
    ...d
  };
  return a && typeof g == "number" && (p = a === "end" ? g * -1 : g), l ? {
    x: p * h,
    y: c * u
  } : {
    x: c * u,
    y: p * h
  };
}
var Es = function(i) {
  return {
    name: "offset",
    options: i,
    async fn(t) {
      var e, s;
      const {
        x: n,
        y: o,
        placement: r,
        middlewareData: a
      } = t, l = await Ar(t, i);
      return r === ((e = a.offset) == null ? void 0 : e.placement) && (s = a.arrow) != null && s.alignmentOffset ? {} : {
        x: n + l.x,
        y: o + l.y,
        data: {
          ...l,
          placement: r
        }
      };
    }
  };
};
var Sr = function(i) {
  return i === void 0 && (i = {}), {
    name: "shift",
    options: i,
    async fn(t) {
      const {
        x: e,
        y: s,
        placement: n
      } = t, {
        mainAxis: o = true,
        crossAxis: r = false,
        limiter: a = {
          fn: (_) => {
            let {
              x,
              y: m
            } = _;
            return {
              x,
              y: m
            };
          }
        },
        ...l
      } = Te(i, t), u = {
        x: e,
        y: s
      }, h = await Ki(t, l), d = Ie(at(n)), c = _s(d);
      let p = u[c], g = u[d];
      if (o) {
        const _ = c === "y" ? "top" : "left", x = c === "y" ? "bottom" : "right", m = p + h[_], b = p - h[x];
        p = xn(m, p, b);
      }
      if (r) {
        const _ = d === "y" ? "top" : "left", x = d === "y" ? "bottom" : "right", m = g + h[_], b = g - h[x];
        g = xn(m, g, b);
      }
      const w = a.fn({
        ...t,
        [c]: p,
        [d]: g
      });
      return {
        ...w,
        data: {
          x: w.x - e,
          y: w.y - s
        }
      };
    }
  };
};
function vt(i) {
  return As(i) ? (i.nodeName || "").toLowerCase() : "#document";
}
function U(i) {
  var t;
  return (i == null || (t = i.ownerDocument) == null ? void 0 : t.defaultView) || window;
}
function _t(i) {
  var t;
  return (t = (As(i) ? i.ownerDocument : i.document) || window.document) == null ? void 0 : t.documentElement;
}
function As(i) {
  return i instanceof Node || i instanceof U(i).Node;
}
function lt(i) {
  return i instanceof Element || i instanceof U(i).Element;
}
function it(i) {
  return i instanceof HTMLElement || i instanceof U(i).HTMLElement;
}
function $n(i) {
  return typeof ShadowRoot > "u" ? false : i instanceof ShadowRoot || i instanceof U(i).ShadowRoot;
}
function Pe(i) {
  const {
    overflow: t,
    overflowX: e,
    overflowY: s,
    display: n
  } = J(i);
  return /auto|scroll|overlay|hidden|clip/.test(t + s + e) && !["inline", "contents"].includes(n);
}
function kr(i) {
  return ["table", "td", "th"].includes(vt(i));
}
function tn(i) {
  const t = en(), e = J(i);
  return e.transform !== "none" || e.perspective !== "none" || (e.containerType ? e.containerType !== "normal" : false) || !t && (e.backdropFilter ? e.backdropFilter !== "none" : false) || !t && (e.filter ? e.filter !== "none" : false) || ["transform", "perspective", "filter"].some((s) => (e.willChange || "").includes(s)) || ["paint", "layout", "strict", "content"].some((s) => (e.contain || "").includes(s));
}
function Or2(i) {
  let t = Wt(i);
  for (; it(t) && !di(t); ) {
    if (tn(t))
      return t;
    t = Wt(t);
  }
  return null;
}
function en() {
  return typeof CSS > "u" || !CSS.supports ? false : CSS.supports("-webkit-backdrop-filter", "none");
}
function di(i) {
  return ["html", "body", "#document"].includes(vt(i));
}
function J(i) {
  return U(i).getComputedStyle(i);
}
function pi(i) {
  return lt(i) ? {
    scrollLeft: i.scrollLeft,
    scrollTop: i.scrollTop
  } : {
    scrollLeft: i.pageXOffset,
    scrollTop: i.pageYOffset
  };
}
function Wt(i) {
  if (vt(i) === "html")
    return i;
  const t = (
    // Step into the shadow DOM of the parent of a slotted node.
    i.assignedSlot || // DOM Element detected.
    i.parentNode || // ShadowRoot detected.
    $n(i) && i.host || // Fallback.
    _t(i)
  );
  return $n(t) ? t.host : t;
}
function Ss(i) {
  const t = Wt(i);
  return di(t) ? i.ownerDocument ? i.ownerDocument.body : i.body : it(t) && Pe(t) ? t : Ss(t);
}
function zi(i, t, e) {
  var s;
  t === void 0 && (t = []), e === void 0 && (e = true);
  const n = Ss(i), o = n === ((s = i.ownerDocument) == null ? void 0 : s.body), r = U(n);
  return o ? t.concat(r, r.visualViewport || [], Pe(n) ? n : [], r.frameElement && e ? zi(r.frameElement) : []) : t.concat(n, zi(n, [], e));
}
function ks(i) {
  const t = J(i);
  let e = parseFloat(t.width) || 0, s = parseFloat(t.height) || 0;
  const n = it(i), o = n ? i.offsetWidth : e, r = n ? i.offsetHeight : s, a = Ke(e) !== o || Ke(s) !== r;
  return a && (e = o, s = r), {
    width: e,
    height: s,
    $: a
  };
}
function Os(i) {
  return lt(i) ? i : i.contextElement;
}
function Ft(i) {
  const t = Os(i);
  if (!it(t))
    return gt(1);
  const e = t.getBoundingClientRect(), {
    width: s,
    height: n,
    $: o
  } = ks(t);
  let r = (o ? Ke(e.width) : e.width) / s, a = (o ? Ke(e.height) : e.height) / n;
  return (!r || !Number.isFinite(r)) && (r = 1), (!a || !Number.isFinite(a)) && (a = 1), {
    x: r,
    y: a
  };
}
var Tr = gt(0);
function Ts(i) {
  const t = U(i);
  return !en() || !t.visualViewport ? Tr : {
    x: t.visualViewport.offsetLeft,
    y: t.visualViewport.offsetTop
  };
}
function Ir(i, t, e) {
  return t === void 0 && (t = false), !e || t && e !== U(i) ? false : t;
}
function _e(i, t, e, s) {
  t === void 0 && (t = false), e === void 0 && (e = false);
  const n = i.getBoundingClientRect(), o = Os(i);
  let r = gt(1);
  t && (s ? lt(s) && (r = Ft(s)) : r = Ft(i));
  const a = Ir(o, e, s) ? Ts(o) : gt(0);
  let l = (n.left + a.x) / r.x, u = (n.top + a.y) / r.y, h = n.width / r.x, d = n.height / r.y;
  if (o) {
    const c = U(o), p = s && lt(s) ? U(s) : s;
    let g = c, w = g.frameElement;
    for (; w && s && p !== g; ) {
      const _ = Ft(w), x = w.getBoundingClientRect(), m = J(w), b = x.left + (w.clientLeft + parseFloat(m.paddingLeft)) * _.x, v = x.top + (w.clientTop + parseFloat(m.paddingTop)) * _.y;
      l *= _.x, u *= _.y, h *= _.x, d *= _.y, l += b, u += v, g = U(w), w = g.frameElement;
    }
  }
  return Vt({
    width: h,
    height: d,
    x: l,
    y: u
  });
}
var Pr = [":popover-open", ":modal"];
function Is(i) {
  return Pr.some((t) => {
    try {
      return i.matches(t);
    } catch {
      return false;
    }
  });
}
function Rr(i) {
  let {
    elements: t,
    rect: e,
    offsetParent: s,
    strategy: n
  } = i;
  const o = n === "fixed", r = _t(s), a = t ? Is(t.floating) : false;
  if (s === r || a && o)
    return e;
  let l = {
    scrollLeft: 0,
    scrollTop: 0
  }, u = gt(1);
  const h = gt(0), d = it(s);
  if ((d || !d && !o) && ((vt(s) !== "body" || Pe(r)) && (l = pi(s)), it(s))) {
    const c = _e(s);
    u = Ft(s), h.x = c.x + s.clientLeft, h.y = c.y + s.clientTop;
  }
  return {
    width: e.width * u.x,
    height: e.height * u.y,
    x: e.x * u.x - l.scrollLeft * u.x + h.x,
    y: e.y * u.y - l.scrollTop * u.y + h.y
  };
}
function Nr(i) {
  return Array.from(i.getClientRects());
}
function Ps(i) {
  return _e(_t(i)).left + pi(i).scrollLeft;
}
function Mr(i) {
  const t = _t(i), e = pi(i), s = i.ownerDocument.body, n = rt(t.scrollWidth, t.clientWidth, s.scrollWidth, s.clientWidth), o = rt(t.scrollHeight, t.clientHeight, s.scrollHeight, s.clientHeight);
  let r = -e.scrollLeft + Ps(i);
  const a = -e.scrollTop;
  return J(s).direction === "rtl" && (r += rt(t.clientWidth, s.clientWidth) - n), {
    width: n,
    height: o,
    x: r,
    y: a
  };
}
function Lr(i, t) {
  const e = U(i), s = _t(i), n = e.visualViewport;
  let o = s.clientWidth, r = s.clientHeight, a = 0, l = 0;
  if (n) {
    o = n.width, r = n.height;
    const u = en();
    (!u || u && t === "fixed") && (a = n.offsetLeft, l = n.offsetTop);
  }
  return {
    width: o,
    height: r,
    x: a,
    y: l
  };
}
function zr(i, t) {
  const e = _e(i, true, t === "fixed"), s = e.top + i.clientTop, n = e.left + i.clientLeft, o = it(i) ? Ft(i) : gt(1), r = i.clientWidth * o.x, a = i.clientHeight * o.y, l = n * o.x, u = s * o.y;
  return {
    width: r,
    height: a,
    x: l,
    y: u
  };
}
function Cn(i, t, e) {
  let s;
  if (t === "viewport")
    s = Lr(i, e);
  else if (t === "document")
    s = Mr(_t(i));
  else if (lt(t))
    s = zr(t, e);
  else {
    const n = Ts(i);
    s = {
      ...t,
      x: t.x - n.x,
      y: t.y - n.y
    };
  }
  return Vt(s);
}
function Rs(i, t) {
  const e = Wt(i);
  return e === t || !lt(e) || di(e) ? false : J(e).position === "fixed" || Rs(e, t);
}
function Dr(i, t) {
  const e = t.get(i);
  if (e)
    return e;
  let s = zi(i, [], false).filter((a) => lt(a) && vt(a) !== "body"), n = null;
  const o = J(i).position === "fixed";
  let r = o ? Wt(i) : i;
  for (; lt(r) && !di(r); ) {
    const a = J(r), l = tn(r);
    !l && a.position === "fixed" && (n = null), (o ? !l && !n : !l && a.position === "static" && n && ["absolute", "fixed"].includes(n.position) || Pe(r) && !l && Rs(i, r)) ? s = s.filter((u) => u !== r) : n = a, r = Wt(r);
  }
  return t.set(i, s), s;
}
function jr(i) {
  let {
    element: t,
    boundary: e,
    rootBoundary: s,
    strategy: n
  } = i;
  const o = [...e === "clippingAncestors" ? Dr(t, this._c) : [].concat(e), s], r = o[0], a = o.reduce((l, u) => {
    const h = Cn(t, u, n);
    return l.top = rt(h.top, l.top), l.right = Ut(h.right, l.right), l.bottom = Ut(h.bottom, l.bottom), l.left = rt(h.left, l.left), l;
  }, Cn(t, r, n));
  return {
    width: a.right - a.left,
    height: a.bottom - a.top,
    x: a.left,
    y: a.top
  };
}
function Hr(i) {
  const {
    width: t,
    height: e
  } = ks(i);
  return {
    width: t,
    height: e
  };
}
function Fr(i, t, e) {
  const s = it(t), n = _t(t), o = e === "fixed", r = _e(i, true, o, t);
  let a = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const l = gt(0);
  if (s || !s && !o)
    if ((vt(t) !== "body" || Pe(n)) && (a = pi(t)), s) {
      const d = _e(t, true, o, t);
      l.x = d.x + t.clientLeft, l.y = d.y + t.clientTop;
    } else
      n && (l.x = Ps(n));
  const u = r.left + a.scrollLeft - l.x, h = r.top + a.scrollTop - l.y;
  return {
    x: u,
    y: h,
    width: r.width,
    height: r.height
  };
}
function En(i, t) {
  return !it(i) || J(i).position === "fixed" ? null : t ? t(i) : i.offsetParent;
}
function Ns(i, t) {
  const e = U(i);
  if (!it(i) || Is(i))
    return e;
  let s = En(i, t);
  for (; s && kr(s) && J(s).position === "static"; )
    s = En(s, t);
  return s && (vt(s) === "html" || vt(s) === "body" && J(s).position === "static" && !tn(s)) ? e : s || Or2(i) || e;
}
var Br = async function(i) {
  const t = this.getOffsetParent || Ns, e = this.getDimensions;
  return {
    reference: Fr(i.reference, await t(i.floating), i.strategy),
    floating: {
      x: 0,
      y: 0,
      ...await e(i.floating)
    }
  };
};
function Ur(i) {
  return J(i).direction === "rtl";
}
var Vr = {
  convertOffsetParentRelativeRectToViewportRelativeRect: Rr,
  getDocumentElement: _t,
  getClippingRect: jr,
  getOffsetParent: Ns,
  getElementRects: Br,
  getClientRects: Nr,
  getDimensions: Hr,
  getScale: Ft,
  isElement: lt,
  isRTL: Ur
};
var Ms = Sr;
var Ls = $r;
var zs = Er;
var Ds = (i, t, e) => {
  const s = /* @__PURE__ */ new Map(), n = {
    platform: Vr,
    ...e
  }, o = {
    ...n.platform,
    _c: s
  };
  return wr(i, t, {
    ...n,
    platform: o
  });
};
var Xe = globalThis;
var nn = Xe.ShadowRoot && (Xe.ShadyCSS === void 0 || Xe.ShadyCSS.nativeShadow) && "adoptedStyleSheets" in Document.prototype && "replace" in CSSStyleSheet.prototype;
var sn = Symbol();
var An = /* @__PURE__ */ new WeakMap();
var js = class {
  constructor(i, t, e) {
    if (this._$cssResult$ = true, e !== sn)
      throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");
    this.cssText = i, this.t = t;
  }
  get styleSheet() {
    let i = this.o;
    const t = this.t;
    if (nn && i === void 0) {
      const e = t !== void 0 && t.length === 1;
      e && (i = An.get(t)), i === void 0 && ((this.o = i = new CSSStyleSheet()).replaceSync(this.cssText), e && An.set(t, i));
    }
    return i;
  }
  toString() {
    return this.cssText;
  }
};
var Wr = (i) => new js(typeof i == "string" ? i : i + "", void 0, sn);
var O = (i, ...t) => {
  const e = i.length === 1 ? i[0] : t.reduce((s, n, o) => s + ((r) => {
    if (r._$cssResult$ === true)
      return r.cssText;
    if (typeof r == "number")
      return r;
    throw Error("Value passed to 'css' function must be a 'css' function result: " + r + ". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.");
  })(n) + i[o + 1], i[0]);
  return new js(e, i, sn);
};
var Gr = (i, t) => {
  if (nn)
    i.adoptedStyleSheets = t.map((e) => e instanceof CSSStyleSheet ? e : e.styleSheet);
  else
    for (const e of t) {
      const s = document.createElement("style"), n = Xe.litNonce;
      n !== void 0 && s.setAttribute("nonce", n), s.textContent = e.cssText, i.appendChild(s);
    }
};
var Sn = nn ? (i) => i : (i) => i instanceof CSSStyleSheet ? ((t) => {
  let e = "";
  for (const s of t.cssRules)
    e += s.cssText;
  return Wr(e);
})(i) : i;
var { is: qr, defineProperty: Yr, getOwnPropertyDescriptor: Xr, getOwnPropertyNames: Jr, getOwnPropertySymbols: Qr, getPrototypeOf: Zr } = Object;
var Gt = globalThis;
var kn = Gt.trustedTypes;
var Kr = kn ? kn.emptyScript : "";
var On = Gt.reactiveElementPolyfillSupport;
var fe = (i, t) => i;
var ei = { toAttribute(i, t) {
  switch (t) {
    case Boolean:
      i = i ? Kr : null;
      break;
    case Object:
    case Array:
      i = i == null ? i : JSON.stringify(i);
  }
  return i;
}, fromAttribute(i, t) {
  let e = i;
  switch (t) {
    case Boolean:
      e = i !== null;
      break;
    case Number:
      e = i === null ? null : Number(i);
      break;
    case Object:
    case Array:
      try {
        e = JSON.parse(i);
      } catch {
        e = null;
      }
  }
  return e;
} };
var on = (i, t) => !qr(i, t);
var Tn = { attribute: true, type: String, converter: ei, reflect: false, hasChanged: on };
Symbol.metadata ?? (Symbol.metadata = Symbol("metadata")), Gt.litPropertyMetadata ?? (Gt.litPropertyMetadata = /* @__PURE__ */ new WeakMap());
var jt = class extends HTMLElement {
  static addInitializer(t) {
    this._$Ei(), (this.l ?? (this.l = [])).push(t);
  }
  static get observedAttributes() {
    return this.finalize(), this._$Eh && [...this._$Eh.keys()];
  }
  static createProperty(t, e = Tn) {
    if (e.state && (e.attribute = false), this._$Ei(), this.elementProperties.set(t, e), !e.noAccessor) {
      const s = Symbol(), n = this.getPropertyDescriptor(t, s, e);
      n !== void 0 && Yr(this.prototype, t, n);
    }
  }
  static getPropertyDescriptor(t, e, s) {
    const { get: n, set: o } = Xr(this.prototype, t) ?? { get() {
      return this[e];
    }, set(r) {
      this[e] = r;
    } };
    return { get() {
      return n == null ? void 0 : n.call(this);
    }, set(r) {
      const a = n == null ? void 0 : n.call(this);
      o.call(this, r), this.requestUpdate(t, a, s);
    }, configurable: true, enumerable: true };
  }
  static getPropertyOptions(t) {
    return this.elementProperties.get(t) ?? Tn;
  }
  static _$Ei() {
    if (this.hasOwnProperty(fe("elementProperties")))
      return;
    const t = Zr(this);
    t.finalize(), t.l !== void 0 && (this.l = [...t.l]), this.elementProperties = new Map(t.elementProperties);
  }
  static finalize() {
    if (this.hasOwnProperty(fe("finalized")))
      return;
    if (this.finalized = true, this._$Ei(), this.hasOwnProperty(fe("properties"))) {
      const e = this.properties, s = [...Jr(e), ...Qr(e)];
      for (const n of s)
        this.createProperty(n, e[n]);
    }
    const t = this[Symbol.metadata];
    if (t !== null) {
      const e = litPropertyMetadata.get(t);
      if (e !== void 0)
        for (const [s, n] of e)
          this.elementProperties.set(s, n);
    }
    this._$Eh = /* @__PURE__ */ new Map();
    for (const [e, s] of this.elementProperties) {
      const n = this._$Eu(e, s);
      n !== void 0 && this._$Eh.set(n, e);
    }
    this.elementStyles = this.finalizeStyles(this.styles);
  }
  static finalizeStyles(t) {
    const e = [];
    if (Array.isArray(t)) {
      const s = new Set(t.flat(1 / 0).reverse());
      for (const n of s)
        e.unshift(Sn(n));
    } else
      t !== void 0 && e.push(Sn(t));
    return e;
  }
  static _$Eu(t, e) {
    const s = e.attribute;
    return s === false ? void 0 : typeof s == "string" ? s : typeof t == "string" ? t.toLowerCase() : void 0;
  }
  constructor() {
    super(), this._$Ep = void 0, this.isUpdatePending = false, this.hasUpdated = false, this._$Em = null, this._$Ev();
  }
  _$Ev() {
    var t;
    this._$ES = new Promise((e) => this.enableUpdating = e), this._$AL = /* @__PURE__ */ new Map(), this._$E_(), this.requestUpdate(), (t = this.constructor.l) == null || t.forEach((e) => e(this));
  }
  addController(t) {
    var e;
    (this._$EO ?? (this._$EO = /* @__PURE__ */ new Set())).add(t), this.renderRoot !== void 0 && this.isConnected && ((e = t.hostConnected) == null || e.call(t));
  }
  removeController(t) {
    var e;
    (e = this._$EO) == null || e.delete(t);
  }
  _$E_() {
    const t = /* @__PURE__ */ new Map(), e = this.constructor.elementProperties;
    for (const s of e.keys())
      this.hasOwnProperty(s) && (t.set(s, this[s]), delete this[s]);
    t.size > 0 && (this._$Ep = t);
  }
  createRenderRoot() {
    const t = this.shadowRoot ?? this.attachShadow(this.constructor.shadowRootOptions);
    return Gr(t, this.constructor.elementStyles), t;
  }
  connectedCallback() {
    var t;
    this.renderRoot ?? (this.renderRoot = this.createRenderRoot()), this.enableUpdating(true), (t = this._$EO) == null || t.forEach((e) => {
      var s;
      return (s = e.hostConnected) == null ? void 0 : s.call(e);
    });
  }
  enableUpdating(t) {
  }
  disconnectedCallback() {
    var t;
    (t = this._$EO) == null || t.forEach((e) => {
      var s;
      return (s = e.hostDisconnected) == null ? void 0 : s.call(e);
    });
  }
  attributeChangedCallback(t, e, s) {
    this._$AK(t, s);
  }
  _$EC(t, e) {
    var s;
    const n = this.constructor.elementProperties.get(t), o = this.constructor._$Eu(t, n);
    if (o !== void 0 && n.reflect === true) {
      const r = (((s = n.converter) == null ? void 0 : s.toAttribute) !== void 0 ? n.converter : ei).toAttribute(e, n.type);
      this._$Em = t, r == null ? this.removeAttribute(o) : this.setAttribute(o, r), this._$Em = null;
    }
  }
  _$AK(t, e) {
    var s;
    const n = this.constructor, o = n._$Eh.get(t);
    if (o !== void 0 && this._$Em !== o) {
      const r = n.getPropertyOptions(o), a = typeof r.converter == "function" ? { fromAttribute: r.converter } : ((s = r.converter) == null ? void 0 : s.fromAttribute) !== void 0 ? r.converter : ei;
      this._$Em = o, this[o] = a.fromAttribute(e, r.type), this._$Em = null;
    }
  }
  requestUpdate(t, e, s) {
    if (t !== void 0) {
      if (s ?? (s = this.constructor.getPropertyOptions(t)), !(s.hasChanged ?? on)(this[t], e))
        return;
      this.P(t, e, s);
    }
    this.isUpdatePending === false && (this._$ES = this._$ET());
  }
  P(t, e, s) {
    this._$AL.has(t) || this._$AL.set(t, e), s.reflect === true && this._$Em !== t && (this._$Ej ?? (this._$Ej = /* @__PURE__ */ new Set())).add(t);
  }
  async _$ET() {
    this.isUpdatePending = true;
    try {
      await this._$ES;
    } catch (e) {
      Promise.reject(e);
    }
    const t = this.scheduleUpdate();
    return t != null && await t, !this.isUpdatePending;
  }
  scheduleUpdate() {
    return this.performUpdate();
  }
  performUpdate() {
    var t;
    if (!this.isUpdatePending)
      return;
    if (!this.hasUpdated) {
      if (this.renderRoot ?? (this.renderRoot = this.createRenderRoot()), this._$Ep) {
        for (const [o, r] of this._$Ep)
          this[o] = r;
        this._$Ep = void 0;
      }
      const n = this.constructor.elementProperties;
      if (n.size > 0)
        for (const [o, r] of n)
          r.wrapped !== true || this._$AL.has(o) || this[o] === void 0 || this.P(o, this[o], r);
    }
    let e = false;
    const s = this._$AL;
    try {
      e = this.shouldUpdate(s), e ? (this.willUpdate(s), (t = this._$EO) == null || t.forEach((n) => {
        var o;
        return (o = n.hostUpdate) == null ? void 0 : o.call(n);
      }), this.update(s)) : this._$EU();
    } catch (n) {
      throw e = false, this._$EU(), n;
    }
    e && this._$AE(s);
  }
  willUpdate(t) {
  }
  _$AE(t) {
    var e;
    (e = this._$EO) == null || e.forEach((s) => {
      var n;
      return (n = s.hostUpdated) == null ? void 0 : n.call(s);
    }), this.hasUpdated || (this.hasUpdated = true, this.firstUpdated(t)), this.updated(t);
  }
  _$EU() {
    this._$AL = /* @__PURE__ */ new Map(), this.isUpdatePending = false;
  }
  get updateComplete() {
    return this.getUpdateComplete();
  }
  getUpdateComplete() {
    return this._$ES;
  }
  shouldUpdate(t) {
    return true;
  }
  update(t) {
    this._$Ej && (this._$Ej = this._$Ej.forEach((e) => this._$EC(e, this[e]))), this._$EU();
  }
  updated(t) {
  }
  firstUpdated(t) {
  }
};
jt.elementStyles = [], jt.shadowRootOptions = { mode: "open" }, jt[fe("elementProperties")] = /* @__PURE__ */ new Map(), jt[fe("finalized")] = /* @__PURE__ */ new Map(), On == null || On({ ReactiveElement: jt }), (Gt.reactiveElementVersions ?? (Gt.reactiveElementVersions = [])).push("2.0.4");
var ii = globalThis;
var ni = ii.trustedTypes;
var In = ni ? ni.createPolicy("lit-html", { createHTML: (i) => i }) : void 0;
var Hs = "$lit$";
var pt = `lit$${Math.random().toFixed(9).slice(2)}$`;
var Fs = "?" + pt;
var ta = `<${Fs}>`;
var Rt = document;
var xe = () => Rt.createComment("");
var we = (i) => i === null || typeof i != "object" && typeof i != "function";
var Bs = Array.isArray;
var ea = (i) => Bs(i) || typeof (i == null ? void 0 : i[Symbol.iterator]) == "function";
var Ai2 = `[ 	
\f\r]`;
var he = /<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g;
var Pn = /-->/g;
var Rn = />/g;
var St = RegExp(`>|${Ai2}(?:([^\\s"'>=/]+)(${Ai2}*=${Ai2}*(?:[^ 	
\f\r"'\`<>=]|("|')|))|$)`, "g");
var Nn = /'/g;
var Mn = /"/g;
var Us = /^(?:script|style|textarea|title)$/i;
var ia2 = (i) => (t, ...e) => ({ _$litType$: i, strings: t, values: e });
var y = ia2(1);
var qt = Symbol.for("lit-noChange");
var M = Symbol.for("lit-nothing");
var Ln = /* @__PURE__ */ new WeakMap();
var Tt = Rt.createTreeWalker(Rt, 129);
function Vs(i, t) {
  if (!Array.isArray(i) || !i.hasOwnProperty("raw"))
    throw Error("invalid template strings array");
  return In !== void 0 ? In.createHTML(t) : t;
}
var na = (i, t) => {
  const e = i.length - 1, s = [];
  let n, o = t === 2 ? "<svg>" : "", r = he;
  for (let a = 0; a < e; a++) {
    const l = i[a];
    let u, h, d = -1, c = 0;
    for (; c < l.length && (r.lastIndex = c, h = r.exec(l), h !== null); )
      c = r.lastIndex, r === he ? h[1] === "!--" ? r = Pn : h[1] !== void 0 ? r = Rn : h[2] !== void 0 ? (Us.test(h[2]) && (n = RegExp("</" + h[2], "g")), r = St) : h[3] !== void 0 && (r = St) : r === St ? h[0] === ">" ? (r = n ?? he, d = -1) : h[1] === void 0 ? d = -2 : (d = r.lastIndex - h[2].length, u = h[1], r = h[3] === void 0 ? St : h[3] === '"' ? Mn : Nn) : r === Mn || r === Nn ? r = St : r === Pn || r === Rn ? r = he : (r = St, n = void 0);
    const p = r === St && i[a + 1].startsWith("/>") ? " " : "";
    o += r === he ? l + ta : d >= 0 ? (s.push(u), l.slice(0, d) + Hs + l.slice(d) + pt + p) : l + pt + (d === -2 ? a : p);
  }
  return [Vs(i, o + (i[e] || "<?>") + (t === 2 ? "</svg>" : "")), s];
};
var $e = class _$e {
  constructor({ strings: t, _$litType$: e }, s) {
    let n;
    this.parts = [];
    let o = 0, r = 0;
    const a = t.length - 1, l = this.parts, [u, h] = na(t, e);
    if (this.el = _$e.createElement(u, s), Tt.currentNode = this.el.content, e === 2) {
      const d = this.el.content.firstChild;
      d.replaceWith(...d.childNodes);
    }
    for (; (n = Tt.nextNode()) !== null && l.length < a; ) {
      if (n.nodeType === 1) {
        if (n.hasAttributes())
          for (const d of n.getAttributeNames())
            if (d.endsWith(Hs)) {
              const c = h[r++], p = n.getAttribute(d).split(pt), g = /([.?@])?(.*)/.exec(c);
              l.push({ type: 1, index: o, name: g[2], strings: p, ctor: g[1] === "." ? oa2 : g[1] === "?" ? ra : g[1] === "@" ? aa : fi }), n.removeAttribute(d);
            } else
              d.startsWith(pt) && (l.push({ type: 6, index: o }), n.removeAttribute(d));
        if (Us.test(n.tagName)) {
          const d = n.textContent.split(pt), c = d.length - 1;
          if (c > 0) {
            n.textContent = ni ? ni.emptyScript : "";
            for (let p = 0; p < c; p++)
              n.append(d[p], xe()), Tt.nextNode(), l.push({ type: 2, index: ++o });
            n.append(d[c], xe());
          }
        }
      } else if (n.nodeType === 8)
        if (n.data === Fs)
          l.push({ type: 2, index: o });
        else {
          let d = -1;
          for (; (d = n.data.indexOf(pt, d + 1)) !== -1; )
            l.push({ type: 7, index: o }), d += pt.length - 1;
        }
      o++;
    }
  }
  static createElement(t, e) {
    const s = Rt.createElement("template");
    return s.innerHTML = t, s;
  }
};
function Yt(i, t, e = i, s) {
  var n, o;
  if (t === qt)
    return t;
  let r = s !== void 0 ? (n = e._$Co) == null ? void 0 : n[s] : e._$Cl;
  const a = we(t) ? void 0 : t._$litDirective$;
  return (r == null ? void 0 : r.constructor) !== a && ((o = r == null ? void 0 : r._$AO) == null || o.call(r, false), a === void 0 ? r = void 0 : (r = new a(i), r._$AT(i, e, s)), s !== void 0 ? (e._$Co ?? (e._$Co = []))[s] = r : e._$Cl = r), r !== void 0 && (t = Yt(i, r._$AS(i, t.values), r, s)), t;
}
var sa = class {
  constructor(t, e) {
    this._$AV = [], this._$AN = void 0, this._$AD = t, this._$AM = e;
  }
  get parentNode() {
    return this._$AM.parentNode;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  u(t) {
    const { el: { content: e }, parts: s } = this._$AD, n = ((t == null ? void 0 : t.creationScope) ?? Rt).importNode(e, true);
    Tt.currentNode = n;
    let o = Tt.nextNode(), r = 0, a = 0, l = s[0];
    for (; l !== void 0; ) {
      if (r === l.index) {
        let u;
        l.type === 2 ? u = new Re(o, o.nextSibling, this, t) : l.type === 1 ? u = new l.ctor(o, l.name, l.strings, this, t) : l.type === 6 && (u = new la(o, this, t)), this._$AV.push(u), l = s[++a];
      }
      r !== (l == null ? void 0 : l.index) && (o = Tt.nextNode(), r++);
    }
    return Tt.currentNode = Rt, n;
  }
  p(t) {
    let e = 0;
    for (const s of this._$AV)
      s !== void 0 && (s.strings !== void 0 ? (s._$AI(t, s, e), e += s.strings.length - 2) : s._$AI(t[e])), e++;
  }
};
var Re = class _Re {
  get _$AU() {
    var t;
    return ((t = this._$AM) == null ? void 0 : t._$AU) ?? this._$Cv;
  }
  constructor(t, e, s, n) {
    this.type = 2, this._$AH = M, this._$AN = void 0, this._$AA = t, this._$AB = e, this._$AM = s, this.options = n, this._$Cv = (n == null ? void 0 : n.isConnected) ?? true;
  }
  get parentNode() {
    let t = this._$AA.parentNode;
    const e = this._$AM;
    return e !== void 0 && (t == null ? void 0 : t.nodeType) === 11 && (t = e.parentNode), t;
  }
  get startNode() {
    return this._$AA;
  }
  get endNode() {
    return this._$AB;
  }
  _$AI(t, e = this) {
    t = Yt(this, t, e), we(t) ? t === M || t == null || t === "" ? (this._$AH !== M && this._$AR(), this._$AH = M) : t !== this._$AH && t !== qt && this._(t) : t._$litType$ !== void 0 ? this.$(t) : t.nodeType !== void 0 ? this.T(t) : ea(t) ? this.k(t) : this._(t);
  }
  S(t) {
    return this._$AA.parentNode.insertBefore(t, this._$AB);
  }
  T(t) {
    this._$AH !== t && (this._$AR(), this._$AH = this.S(t));
  }
  _(t) {
    this._$AH !== M && we(this._$AH) ? this._$AA.nextSibling.data = t : this.T(Rt.createTextNode(t)), this._$AH = t;
  }
  $(t) {
    var e;
    const { values: s, _$litType$: n } = t, o = typeof n == "number" ? this._$AC(t) : (n.el === void 0 && (n.el = $e.createElement(Vs(n.h, n.h[0]), this.options)), n);
    if (((e = this._$AH) == null ? void 0 : e._$AD) === o)
      this._$AH.p(s);
    else {
      const r = new sa(o, this), a = r.u(this.options);
      r.p(s), this.T(a), this._$AH = r;
    }
  }
  _$AC(t) {
    let e = Ln.get(t.strings);
    return e === void 0 && Ln.set(t.strings, e = new $e(t)), e;
  }
  k(t) {
    Bs(this._$AH) || (this._$AH = [], this._$AR());
    const e = this._$AH;
    let s, n = 0;
    for (const o of t)
      n === e.length ? e.push(s = new _Re(this.S(xe()), this.S(xe()), this, this.options)) : s = e[n], s._$AI(o), n++;
    n < e.length && (this._$AR(s && s._$AB.nextSibling, n), e.length = n);
  }
  _$AR(t = this._$AA.nextSibling, e) {
    var s;
    for ((s = this._$AP) == null ? void 0 : s.call(this, false, true, e); t && t !== this._$AB; ) {
      const n = t.nextSibling;
      t.remove(), t = n;
    }
  }
  setConnected(t) {
    var e;
    this._$AM === void 0 && (this._$Cv = t, (e = this._$AP) == null || e.call(this, t));
  }
};
var fi = class {
  get tagName() {
    return this.element.tagName;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  constructor(t, e, s, n, o) {
    this.type = 1, this._$AH = M, this._$AN = void 0, this.element = t, this.name = e, this._$AM = n, this.options = o, s.length > 2 || s[0] !== "" || s[1] !== "" ? (this._$AH = Array(s.length - 1).fill(new String()), this.strings = s) : this._$AH = M;
  }
  _$AI(t, e = this, s, n) {
    const o = this.strings;
    let r = false;
    if (o === void 0)
      t = Yt(this, t, e, 0), r = !we(t) || t !== this._$AH && t !== qt, r && (this._$AH = t);
    else {
      const a = t;
      let l, u;
      for (t = o[0], l = 0; l < o.length - 1; l++)
        u = Yt(this, a[s + l], e, l), u === qt && (u = this._$AH[l]), r || (r = !we(u) || u !== this._$AH[l]), u === M ? t = M : t !== M && (t += (u ?? "") + o[l + 1]), this._$AH[l] = u;
    }
    r && !n && this.j(t);
  }
  j(t) {
    t === M ? this.element.removeAttribute(this.name) : this.element.setAttribute(this.name, t ?? "");
  }
};
var oa2 = class extends fi {
  constructor() {
    super(...arguments), this.type = 3;
  }
  j(t) {
    this.element[this.name] = t === M ? void 0 : t;
  }
};
var ra = class extends fi {
  constructor() {
    super(...arguments), this.type = 4;
  }
  j(t) {
    this.element.toggleAttribute(this.name, !!t && t !== M);
  }
};
var aa = class extends fi {
  constructor(t, e, s, n, o) {
    super(t, e, s, n, o), this.type = 5;
  }
  _$AI(t, e = this) {
    if ((t = Yt(this, t, e, 0) ?? M) === qt)
      return;
    const s = this._$AH, n = t === M && s !== M || t.capture !== s.capture || t.once !== s.once || t.passive !== s.passive, o = t !== M && (s === M || n);
    n && this.element.removeEventListener(this.name, this, s), o && this.element.addEventListener(this.name, this, t), this._$AH = t;
  }
  handleEvent(t) {
    var e;
    typeof this._$AH == "function" ? this._$AH.call(((e = this.options) == null ? void 0 : e.host) ?? this.element, t) : this._$AH.handleEvent(t);
  }
};
var la = class {
  constructor(t, e, s) {
    this.element = t, this.type = 6, this._$AN = void 0, this._$AM = e, this.options = s;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  _$AI(t) {
    Yt(this, t);
  }
};
var zn = ii.litHtmlPolyfillSupport;
zn == null || zn($e, Re), (ii.litHtmlVersions ?? (ii.litHtmlVersions = [])).push("3.1.3");
var Xt = (i, t, e) => {
  const s = (e == null ? void 0 : e.renderBefore) ?? t;
  let n = s._$litPart$;
  if (n === void 0) {
    const o = (e == null ? void 0 : e.renderBefore) ?? null;
    s._$litPart$ = n = new Re(t.insertBefore(xe(), o), o, void 0, e ?? {});
  }
  return n._$AI(i), n;
};
var k = class extends jt {
  constructor() {
    super(...arguments), this.renderOptions = { host: this }, this._$Do = void 0;
  }
  createRenderRoot() {
    var t;
    const e = super.createRenderRoot();
    return (t = this.renderOptions).renderBefore ?? (t.renderBefore = e.firstChild), e;
  }
  update(t) {
    const e = this.render();
    this.hasUpdated || (this.renderOptions.isConnected = this.isConnected), super.update(t), this._$Do = Xt(e, this.renderRoot, this.renderOptions);
  }
  connectedCallback() {
    var t;
    super.connectedCallback(), (t = this._$Do) == null || t.setConnected(true);
  }
  disconnectedCallback() {
    var t;
    super.disconnectedCallback(), (t = this._$Do) == null || t.setConnected(false);
  }
  render() {
    return qt;
  }
};
var Dn;
k._$litElement$ = true, k.finalized = true, (Dn = globalThis.litElementHydrateSupport) == null || Dn.call(globalThis, { LitElement: k });
var jn = globalThis.litElementPolyfillSupport;
jn == null || jn({ LitElement: k });
(globalThis.litElementVersions ?? (globalThis.litElementVersions = [])).push("4.0.5");
var ca = { attribute: true, type: String, converter: ei, reflect: false, hasChanged: on };
var ua = (i = ca, t, e) => {
  const { kind: s, metadata: n } = e;
  let o = globalThis.litPropertyMetadata.get(n);
  if (o === void 0 && globalThis.litPropertyMetadata.set(n, o = /* @__PURE__ */ new Map()), o.set(e.name, i), s === "accessor") {
    const { name: r } = e;
    return { set(a) {
      const l = t.get.call(this);
      t.set.call(this, a), this.requestUpdate(r, l, i);
    }, init(a) {
      return a !== void 0 && this.P(r, void 0, i), a;
    } };
  }
  if (s === "setter") {
    const { name: r } = e;
    return function(a) {
      const l = this[r];
      t.call(this, a), this.requestUpdate(r, l, i);
    };
  }
  throw Error("Unsupported decorator location: " + s);
};
function f(i) {
  return (t, e) => typeof e == "object" ? ua(i, t, e) : ((s, n, o) => {
    const r = n.hasOwnProperty(o);
    return n.constructor.createProperty(o, r ? { ...s, wrapped: true } : s), r ? Object.getOwnPropertyDescriptor(n, o) : void 0;
  })(i, t, e);
}
function Ne(i) {
  return f({ ...i, state: true, attribute: false });
}
var ha = (i) => i.strings === void 0;
var da = { ATTRIBUTE: 1, CHILD: 2, PROPERTY: 3, BOOLEAN_ATTRIBUTE: 4, EVENT: 5, ELEMENT: 6 };
var pa = (i) => (...t) => ({ _$litDirective$: i, values: t });
var fa = class {
  constructor(i) {
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  _$AT(i, t, e) {
    this._$Ct = i, this._$AM = t, this._$Ci = e;
  }
  _$AS(i, t) {
    return this.update(i, t);
  }
  update(i, t) {
    return this.render(...t);
  }
};
var me = (i, t) => {
  var e;
  const s = i._$AN;
  if (s === void 0)
    return false;
  for (const n of s)
    (e = n._$AO) == null || e.call(n, t, false), me(n, t);
  return true;
};
var si = (i) => {
  let t, e;
  do {
    if ((t = i._$AM) === void 0)
      break;
    e = t._$AN, e.delete(i), i = t;
  } while ((e == null ? void 0 : e.size) === 0);
};
var Ws = (i) => {
  for (let t; t = i._$AM; i = t) {
    let e = t._$AN;
    if (e === void 0)
      t._$AN = e = /* @__PURE__ */ new Set();
    else if (e.has(i))
      break;
    e.add(i), ga(t);
  }
};
function ma(i) {
  this._$AN !== void 0 ? (si(this), this._$AM = i, Ws(this)) : this._$AM = i;
}
function ba(i, t = false, e = 0) {
  const s = this._$AH, n = this._$AN;
  if (n !== void 0 && n.size !== 0)
    if (t)
      if (Array.isArray(s))
        for (let o = e; o < s.length; o++)
          me(s[o], false), si(s[o]);
      else
        s != null && (me(s, false), si(s));
    else
      me(this, i);
}
var ga = (i) => {
  i.type == da.CHILD && (i._$AP ?? (i._$AP = ba), i._$AQ ?? (i._$AQ = ma));
};
var va = class extends fa {
  constructor() {
    super(...arguments), this._$AN = void 0;
  }
  _$AT(t, e, s) {
    super._$AT(t, e, s), Ws(this), this.isConnected = t._$AU;
  }
  _$AO(t, e = true) {
    var s, n;
    t !== this.isConnected && (this.isConnected = t, t ? (s = this.reconnected) == null || s.call(this) : (n = this.disconnected) == null || n.call(this)), e && (me(this, t), si(this));
  }
  setValue(t) {
    if (ha(this._$Ct))
      this._$Ct._$AI(t, this);
    else {
      const e = [...this._$Ct._$AH];
      e[this._$Ci] = t, this._$Ct._$AI(e, this, 0);
    }
  }
  disconnected() {
  }
  reconnected() {
  }
};
var mt = () => new ya();
var ya = class {
};
var Si = /* @__PURE__ */ new WeakMap();
var Z = pa(class extends va {
  render(i) {
    return M;
  }
  update(i, [t]) {
    var e;
    const s = t !== this.Y;
    return s && this.Y !== void 0 && this.rt(void 0), (s || this.lt !== this.ct) && (this.Y = t, this.ht = (e = i.options) == null ? void 0 : e.host, this.rt(this.ct = i.element)), M;
  }
  rt(i) {
    if (typeof this.Y == "function") {
      const t = this.ht ?? globalThis;
      let e = Si.get(t);
      e === void 0 && (e = /* @__PURE__ */ new WeakMap(), Si.set(t, e)), e.get(this.Y) !== void 0 && this.Y.call(this.ht, void 0), e.set(this.Y, i), i !== void 0 && this.Y.call(this.ht, i);
    } else
      this.Y.value = i;
  }
  get lt() {
    var i, t;
    return typeof this.Y == "function" ? (i = Si.get(this.ht ?? globalThis)) == null ? void 0 : i.get(this.Y) : (t = this.Y) == null ? void 0 : t.value;
  }
  disconnected() {
    this.lt === this.ct && this.rt(void 0);
  }
  reconnected() {
    this.rt(this.ct);
  }
});
var Gs = Object.freeze(
  {
    left: 0,
    top: 0,
    width: 16,
    height: 16
  }
);
var oi = Object.freeze({
  rotate: 0,
  vFlip: false,
  hFlip: false
});
var Me = Object.freeze({
  ...Gs,
  ...oi
});
var Di = Object.freeze({
  ...Me,
  body: "",
  hidden: false
});
var _a = Object.freeze({
  width: null,
  height: null
});
var qs = Object.freeze({
  // Dimensions
  ..._a,
  // Transformations
  ...oi
});
function xa2(i, t = 0) {
  const e = i.replace(/^-?[0-9.]*/, "");
  function s(n) {
    for (; n < 0; )
      n += 4;
    return n % 4;
  }
  if (e === "") {
    const n = parseInt(i);
    return isNaN(n) ? 0 : s(n);
  } else if (e !== i) {
    let n = 0;
    switch (e) {
      case "%":
        n = 25;
        break;
      case "deg":
        n = 90;
    }
    if (n) {
      let o = parseFloat(i.slice(0, i.length - e.length));
      return isNaN(o) ? 0 : (o = o / n, o % 1 === 0 ? s(o) : 0);
    }
  }
  return t;
}
var wa = /[\s,]+/;
function $a(i, t) {
  t.split(wa).forEach((e) => {
    switch (e.trim()) {
      case "horizontal":
        i.hFlip = true;
        break;
      case "vertical":
        i.vFlip = true;
        break;
    }
  });
}
var Ys = {
  ...qs,
  preserveAspectRatio: ""
};
function Hn(i) {
  const t = {
    ...Ys
  }, e = (s, n) => i.getAttribute(s) || n;
  return t.width = e("width", null), t.height = e("height", null), t.rotate = xa2(e("rotate", "")), $a(t, e("flip", "")), t.preserveAspectRatio = e("preserveAspectRatio", e("preserveaspectratio", "")), t;
}
function Ca(i, t) {
  for (const e in Ys)
    if (i[e] !== t[e])
      return true;
  return false;
}
var be = /^[a-z0-9]+(-[a-z0-9]+)*$/;
var Le = (i, t, e, s = "") => {
  const n = i.split(":");
  if (i.slice(0, 1) === "@") {
    if (n.length < 2 || n.length > 3)
      return null;
    s = n.shift().slice(1);
  }
  if (n.length > 3 || !n.length)
    return null;
  if (n.length > 1) {
    const a = n.pop(), l = n.pop(), u = {
      // Allow provider without '@': "provider:prefix:name"
      provider: n.length > 0 ? n[0] : s,
      prefix: l,
      name: a
    };
    return t && !Je(u) ? null : u;
  }
  const o = n[0], r = o.split("-");
  if (r.length > 1) {
    const a = {
      provider: s,
      prefix: r.shift(),
      name: r.join("-")
    };
    return t && !Je(a) ? null : a;
  }
  if (e && s === "") {
    const a = {
      provider: s,
      prefix: "",
      name: o
    };
    return t && !Je(a, e) ? null : a;
  }
  return null;
};
var Je = (i, t) => i ? !!((i.provider === "" || i.provider.match(be)) && (t && i.prefix === "" || i.prefix.match(be)) && i.name.match(be)) : false;
function Ea(i, t) {
  const e = {};
  !i.hFlip != !t.hFlip && (e.hFlip = true), !i.vFlip != !t.vFlip && (e.vFlip = true);
  const s = ((i.rotate || 0) + (t.rotate || 0)) % 4;
  return s && (e.rotate = s), e;
}
function Fn(i, t) {
  const e = Ea(i, t);
  for (const s in Di)
    s in oi ? s in i && !(s in e) && (e[s] = oi[s]) : s in t ? e[s] = t[s] : s in i && (e[s] = i[s]);
  return e;
}
function Aa(i, t) {
  const e = i.icons, s = i.aliases || /* @__PURE__ */ Object.create(null), n = /* @__PURE__ */ Object.create(null);
  function o(r) {
    if (e[r])
      return n[r] = [];
    if (!(r in n)) {
      n[r] = null;
      const a = s[r] && s[r].parent, l = a && o(a);
      l && (n[r] = [a].concat(l));
    }
    return n[r];
  }
  return Object.keys(e).concat(Object.keys(s)).forEach(o), n;
}
function Sa(i, t, e) {
  const s = i.icons, n = i.aliases || /* @__PURE__ */ Object.create(null);
  let o = {};
  function r(a) {
    o = Fn(
      s[a] || n[a],
      o
    );
  }
  return r(t), e.forEach(r), Fn(i, o);
}
function Xs(i, t) {
  const e = [];
  if (typeof i != "object" || typeof i.icons != "object")
    return e;
  i.not_found instanceof Array && i.not_found.forEach((n) => {
    t(n, null), e.push(n);
  });
  const s = Aa(i);
  for (const n in s) {
    const o = s[n];
    o && (t(n, Sa(i, n, o)), e.push(n));
  }
  return e;
}
var ka = {
  provider: "",
  aliases: {},
  not_found: {},
  ...Gs
};
function ki(i, t) {
  for (const e in t)
    if (e in i && typeof i[e] != typeof t[e])
      return false;
  return true;
}
function Js(i) {
  if (typeof i != "object" || i === null)
    return null;
  const t = i;
  if (typeof t.prefix != "string" || !i.icons || typeof i.icons != "object" || !ki(i, ka))
    return null;
  const e = t.icons;
  for (const n in e) {
    const o = e[n];
    if (!n.match(be) || typeof o.body != "string" || !ki(
      o,
      Di
    ))
      return null;
  }
  const s = t.aliases || /* @__PURE__ */ Object.create(null);
  for (const n in s) {
    const o = s[n], r = o.parent;
    if (!n.match(be) || typeof r != "string" || !e[r] && !s[r] || !ki(
      o,
      Di
    ))
      return null;
  }
  return t;
}
var ri = /* @__PURE__ */ Object.create(null);
function Oa(i, t) {
  return {
    provider: i,
    prefix: t,
    icons: /* @__PURE__ */ Object.create(null),
    missing: /* @__PURE__ */ new Set()
  };
}
function yt(i, t) {
  const e = ri[i] || (ri[i] = /* @__PURE__ */ Object.create(null));
  return e[t] || (e[t] = Oa(i, t));
}
function rn(i, t) {
  return Js(t) ? Xs(t, (e, s) => {
    s ? i.icons[e] = s : i.missing.add(e);
  }) : [];
}
function Ta(i, t, e) {
  try {
    if (typeof e.body == "string")
      return i.icons[t] = { ...e }, true;
  } catch {
  }
  return false;
}
function Ia(i, t) {
  let e = [];
  return (typeof i == "string" ? [i] : Object.keys(ri)).forEach((s) => {
    (typeof s == "string" && typeof t == "string" ? [t] : Object.keys(ri[s] || {})).forEach((n) => {
      const o = yt(s, n);
      e = e.concat(
        Object.keys(o.icons).map(
          (r) => (s !== "" ? "@" + s + ":" : "") + n + ":" + r
        )
      );
    });
  }), e;
}
var Ce = false;
function Qs(i) {
  return typeof i == "boolean" && (Ce = i), Ce;
}
function Ee(i) {
  const t = typeof i == "string" ? Le(i, true, Ce) : i;
  if (t) {
    const e = yt(t.provider, t.prefix), s = t.name;
    return e.icons[s] || (e.missing.has(s) ? null : void 0);
  }
}
function Zs(i, t) {
  const e = Le(i, true, Ce);
  if (!e)
    return false;
  const s = yt(e.provider, e.prefix);
  return Ta(s, e.name, t);
}
function Bn2(i, t) {
  if (typeof i != "object")
    return false;
  if (typeof t != "string" && (t = i.provider || ""), Ce && !t && !i.prefix) {
    let n = false;
    return Js(i) && (i.prefix = "", Xs(i, (o, r) => {
      r && Zs(o, r) && (n = true);
    })), n;
  }
  const e = i.prefix;
  if (!Je({
    provider: t,
    prefix: e,
    name: "a"
  }))
    return false;
  const s = yt(t, e);
  return !!rn(s, i);
}
function Un(i) {
  return !!Ee(i);
}
function Pa(i) {
  const t = Ee(i);
  return t ? {
    ...Me,
    ...t
  } : null;
}
function Ra(i) {
  const t = {
    loaded: [],
    missing: [],
    pending: []
  }, e = /* @__PURE__ */ Object.create(null);
  i.sort((n, o) => n.provider !== o.provider ? n.provider.localeCompare(o.provider) : n.prefix !== o.prefix ? n.prefix.localeCompare(o.prefix) : n.name.localeCompare(o.name));
  let s = {
    provider: "",
    prefix: "",
    name: ""
  };
  return i.forEach((n) => {
    if (s.name === n.name && s.prefix === n.prefix && s.provider === n.provider)
      return;
    s = n;
    const o = n.provider, r = n.prefix, a = n.name, l = e[o] || (e[o] = /* @__PURE__ */ Object.create(null)), u = l[r] || (l[r] = yt(o, r));
    let h;
    a in u.icons ? h = t.loaded : r === "" || u.missing.has(a) ? h = t.missing : h = t.pending;
    const d = {
      provider: o,
      prefix: r,
      name: a
    };
    h.push(d);
  }), t;
}
function Ks(i, t) {
  i.forEach((e) => {
    const s = e.loaderCallbacks;
    s && (e.loaderCallbacks = s.filter((n) => n.id !== t));
  });
}
function Na(i) {
  i.pendingCallbacksFlag || (i.pendingCallbacksFlag = true, setTimeout(() => {
    i.pendingCallbacksFlag = false;
    const t = i.loaderCallbacks ? i.loaderCallbacks.slice(0) : [];
    if (!t.length)
      return;
    let e = false;
    const s = i.provider, n = i.prefix;
    t.forEach((o) => {
      const r = o.icons, a = r.pending.length;
      r.pending = r.pending.filter((l) => {
        if (l.prefix !== n)
          return true;
        const u = l.name;
        if (i.icons[u])
          r.loaded.push({
            provider: s,
            prefix: n,
            name: u
          });
        else if (i.missing.has(u))
          r.missing.push({
            provider: s,
            prefix: n,
            name: u
          });
        else
          return e = true, true;
        return false;
      }), r.pending.length !== a && (e || Ks([i], o.id), o.callback(
        r.loaded.slice(0),
        r.missing.slice(0),
        r.pending.slice(0),
        o.abort
      ));
    });
  }));
}
var Ma = 0;
function La(i, t, e) {
  const s = Ma++, n = Ks.bind(null, e, s);
  if (!t.pending.length)
    return n;
  const o = {
    id: s,
    icons: t,
    callback: i,
    abort: n
  };
  return e.forEach((r) => {
    (r.loaderCallbacks || (r.loaderCallbacks = [])).push(o);
  }), n;
}
var ji = /* @__PURE__ */ Object.create(null);
function Vn(i, t) {
  ji[i] = t;
}
function Hi(i) {
  return ji[i] || ji[""];
}
function za(i, t = true, e = false) {
  const s = [];
  return i.forEach((n) => {
    const o = typeof n == "string" ? Le(n, t, e) : n;
    o && s.push(o);
  }), s;
}
var Da = {
  resources: [],
  index: 0,
  timeout: 2e3,
  rotate: 750,
  random: false,
  dataAfterTimeout: false
};
function ja(i, t, e, s) {
  const n = i.resources.length, o = i.random ? Math.floor(Math.random() * n) : i.index;
  let r;
  if (i.random) {
    let C = i.resources.slice(0);
    for (r = []; C.length > 1; ) {
      const E = Math.floor(Math.random() * C.length);
      r.push(C[E]), C = C.slice(0, E).concat(C.slice(E + 1));
    }
    r = r.concat(C);
  } else
    r = i.resources.slice(o).concat(i.resources.slice(0, o));
  const a = Date.now();
  let l = "pending", u = 0, h, d = null, c = [], p = [];
  typeof s == "function" && p.push(s);
  function g() {
    d && (clearTimeout(d), d = null);
  }
  function w() {
    l === "pending" && (l = "aborted"), g(), c.forEach((C) => {
      C.status === "pending" && (C.status = "aborted");
    }), c = [];
  }
  function _(C, E) {
    E && (p = []), typeof C == "function" && p.push(C);
  }
  function x() {
    return {
      startTime: a,
      payload: t,
      status: l,
      queriesSent: u,
      queriesPending: c.length,
      subscribe: _,
      abort: w
    };
  }
  function m() {
    l = "failed", p.forEach((C) => {
      C(void 0, h);
    });
  }
  function b() {
    c.forEach((C) => {
      C.status === "pending" && (C.status = "aborted");
    }), c = [];
  }
  function v(C, E, A) {
    const B = E !== "success";
    switch (c = c.filter((I) => I !== C), l) {
      case "pending":
        break;
      case "failed":
        if (B || !i.dataAfterTimeout)
          return;
        break;
      default:
        return;
    }
    if (E === "abort") {
      h = A, m();
      return;
    }
    if (B) {
      h = A, c.length || (r.length ? $() : m());
      return;
    }
    if (g(), b(), !i.random) {
      const I = i.resources.indexOf(C.resource);
      I !== -1 && I !== i.index && (i.index = I);
    }
    l = "completed", p.forEach((I) => {
      I(A);
    });
  }
  function $() {
    if (l !== "pending")
      return;
    g();
    const C = r.shift();
    if (C === void 0) {
      if (c.length) {
        d = setTimeout(() => {
          g(), l === "pending" && (b(), m());
        }, i.timeout);
        return;
      }
      m();
      return;
    }
    const E = {
      status: "pending",
      resource: C,
      callback: (A, B) => {
        v(E, A, B);
      }
    };
    c.push(E), u++, d = setTimeout($, i.rotate), e(C, t, E.callback);
  }
  return setTimeout($), x;
}
function to(i) {
  const t = {
    ...Da,
    ...i
  };
  let e = [];
  function s() {
    e = e.filter((r) => r().status === "pending");
  }
  function n(r, a, l) {
    const u = ja(
      t,
      r,
      a,
      (h, d) => {
        s(), l && l(h, d);
      }
    );
    return e.push(u), u;
  }
  function o(r) {
    return e.find((a) => r(a)) || null;
  }
  return {
    query: n,
    find: o,
    setIndex: (r) => {
      t.index = r;
    },
    getIndex: () => t.index,
    cleanup: s
  };
}
function an(i) {
  let t;
  if (typeof i.resources == "string")
    t = [i.resources];
  else if (t = i.resources, !(t instanceof Array) || !t.length)
    return null;
  return {
    // API hosts
    resources: t,
    // Root path
    path: i.path || "/",
    // URL length limit
    maxURL: i.maxURL || 500,
    // Timeout before next host is used.
    rotate: i.rotate || 750,
    // Timeout before failing query.
    timeout: i.timeout || 5e3,
    // Randomise default API end point.
    random: i.random === true,
    // Start index
    index: i.index || 0,
    // Receive data after time out (used if time out kicks in first, then API module sends data anyway).
    dataAfterTimeout: i.dataAfterTimeout !== false
  };
}
var mi = /* @__PURE__ */ Object.create(null);
var Ge = [
  "https://api.simplesvg.com",
  "https://api.unisvg.com"
];
var Fi = [];
for (; Ge.length > 0; )
  Ge.length === 1 || Math.random() > 0.5 ? Fi.push(Ge.shift()) : Fi.push(Ge.pop());
mi[""] = an({
  resources: ["https://api.iconify.design"].concat(Fi)
});
function Wn(i, t) {
  const e = an(t);
  return e === null ? false : (mi[i] = e, true);
}
function bi(i) {
  return mi[i];
}
function Ha() {
  return Object.keys(mi);
}
function Gn() {
}
var Oi = /* @__PURE__ */ Object.create(null);
function Fa(i) {
  if (!Oi[i]) {
    const t = bi(i);
    if (!t)
      return;
    const e = to(t), s = {
      config: t,
      redundancy: e
    };
    Oi[i] = s;
  }
  return Oi[i];
}
function eo(i, t, e) {
  let s, n;
  if (typeof i == "string") {
    const o = Hi(i);
    if (!o)
      return e(void 0, 424), Gn;
    n = o.send;
    const r = Fa(i);
    r && (s = r.redundancy);
  } else {
    const o = an(i);
    if (o) {
      s = to(o);
      const r = i.resources ? i.resources[0] : "", a = Hi(r);
      a && (n = a.send);
    }
  }
  return !s || !n ? (e(void 0, 424), Gn) : s.query(t, n, e)().abort;
}
var qn = "iconify2";
var Ae = "iconify";
var io = Ae + "-count";
var Yn = Ae + "-version";
var no = 36e5;
var Ba = 168;
var Ua = 50;
function Bi(i, t) {
  try {
    return i.getItem(t);
  } catch {
  }
}
function ln(i, t, e) {
  try {
    return i.setItem(t, e), true;
  } catch {
  }
}
function Xn(i, t) {
  try {
    i.removeItem(t);
  } catch {
  }
}
function Ui(i, t) {
  return ln(i, io, t.toString());
}
function Vi(i) {
  return parseInt(Bi(i, io)) || 0;
}
var Pt = {
  local: true,
  session: true
};
var so = {
  local: /* @__PURE__ */ new Set(),
  session: /* @__PURE__ */ new Set()
};
var cn = false;
function Va(i) {
  cn = i;
}
var qe = typeof window > "u" ? {} : window;
function oo(i) {
  const t = i + "Storage";
  try {
    if (qe && qe[t] && typeof qe[t].length == "number")
      return qe[t];
  } catch {
  }
  Pt[i] = false;
}
function ro(i, t) {
  const e = oo(i);
  if (!e)
    return;
  const s = Bi(e, Yn);
  if (s !== qn) {
    if (s) {
      const a = Vi(e);
      for (let l = 0; l < a; l++)
        Xn(e, Ae + l.toString());
    }
    ln(e, Yn, qn), Ui(e, 0);
    return;
  }
  const n = Math.floor(Date.now() / no) - Ba, o = (a) => {
    const l = Ae + a.toString(), u = Bi(e, l);
    if (typeof u == "string") {
      try {
        const h = JSON.parse(u);
        if (typeof h == "object" && typeof h.cached == "number" && h.cached > n && typeof h.provider == "string" && typeof h.data == "object" && typeof h.data.prefix == "string" && // Valid item: run callback
        t(h, a))
          return true;
      } catch {
      }
      Xn(e, l);
    }
  };
  let r = Vi(e);
  for (let a = r - 1; a >= 0; a--)
    o(a) || (a === r - 1 ? (r--, Ui(e, r)) : so[i].add(a));
}
function ao() {
  if (!cn) {
    Va(true);
    for (const i in Pt)
      ro(i, (t) => {
        const e = t.data, s = t.provider, n = e.prefix, o = yt(
          s,
          n
        );
        if (!rn(o, e).length)
          return false;
        const r = e.lastModified || -1;
        return o.lastModifiedCached = o.lastModifiedCached ? Math.min(o.lastModifiedCached, r) : r, true;
      });
  }
}
function Wa(i, t) {
  const e = i.lastModifiedCached;
  if (
    // Matches or newer
    e && e >= t
  )
    return e === t;
  if (i.lastModifiedCached = t, e)
    for (const s in Pt)
      ro(s, (n) => {
        const o = n.data;
        return n.provider !== i.provider || o.prefix !== i.prefix || o.lastModified === t;
      });
  return true;
}
function Ga(i, t) {
  cn || ao();
  function e(s) {
    let n;
    if (!Pt[s] || !(n = oo(s)))
      return;
    const o = so[s];
    let r;
    if (o.size)
      o.delete(r = Array.from(o).shift());
    else if (r = Vi(n), r >= Ua || !Ui(n, r + 1))
      return;
    const a = {
      cached: Math.floor(Date.now() / no),
      provider: i.provider,
      data: t
    };
    return ln(
      n,
      Ae + r.toString(),
      JSON.stringify(a)
    );
  }
  t.lastModified && !Wa(i, t.lastModified) || Object.keys(t.icons).length && (t.not_found && (t = Object.assign({}, t), delete t.not_found), e("local") || e("session"));
}
function Jn() {
}
function qa(i) {
  i.iconsLoaderFlag || (i.iconsLoaderFlag = true, setTimeout(() => {
    i.iconsLoaderFlag = false, Na(i);
  }));
}
function Ya(i, t) {
  i.iconsToLoad ? i.iconsToLoad = i.iconsToLoad.concat(t).sort() : i.iconsToLoad = t, i.iconsQueueFlag || (i.iconsQueueFlag = true, setTimeout(() => {
    i.iconsQueueFlag = false;
    const { provider: e, prefix: s } = i, n = i.iconsToLoad;
    delete i.iconsToLoad;
    let o;
    !n || !(o = Hi(e)) || o.prepare(e, s, n).forEach((r) => {
      eo(e, r, (a) => {
        if (typeof a != "object")
          r.icons.forEach((l) => {
            i.missing.add(l);
          });
        else
          try {
            const l = rn(
              i,
              a
            );
            if (!l.length)
              return;
            const u = i.pendingIcons;
            u && l.forEach((h) => {
              u.delete(h);
            }), Ga(i, a);
          } catch (l) {
            console.error(l);
          }
        qa(i);
      });
    });
  }));
}
var un2 = (i, t) => {
  const e = za(i, true, Qs()), s = Ra(e);
  if (!s.pending.length) {
    let l = true;
    return t && setTimeout(() => {
      l && t(
        s.loaded,
        s.missing,
        s.pending,
        Jn
      );
    }), () => {
      l = false;
    };
  }
  const n = /* @__PURE__ */ Object.create(null), o = [];
  let r, a;
  return s.pending.forEach((l) => {
    const { provider: u, prefix: h } = l;
    if (h === a && u === r)
      return;
    r = u, a = h, o.push(yt(u, h));
    const d = n[u] || (n[u] = /* @__PURE__ */ Object.create(null));
    d[h] || (d[h] = []);
  }), s.pending.forEach((l) => {
    const { provider: u, prefix: h, name: d } = l, c = yt(u, h), p = c.pendingIcons || (c.pendingIcons = /* @__PURE__ */ new Set());
    p.has(d) || (p.add(d), n[u][h].push(d));
  }), o.forEach((l) => {
    const { provider: u, prefix: h } = l;
    n[u][h].length && Ya(l, n[u][h]);
  }), t ? La(t, s, o) : Jn;
};
var Xa = (i) => new Promise((t, e) => {
  const s = typeof i == "string" ? Le(i, true) : i;
  if (!s) {
    e(i);
    return;
  }
  un2([s || i], (n) => {
    if (n.length && s) {
      const o = Ee(s);
      if (o) {
        t({
          ...Me,
          ...o
        });
        return;
      }
    }
    e(i);
  });
});
function Ja(i) {
  try {
    const t = typeof i == "string" ? JSON.parse(i) : i;
    if (typeof t.body == "string")
      return {
        ...t
      };
  } catch {
  }
}
function Qa(i, t) {
  const e = typeof i == "string" ? Le(i, true, true) : null;
  if (!e) {
    const o = Ja(i);
    return {
      value: i,
      data: o
    };
  }
  const s = Ee(e);
  if (s !== void 0 || !e.prefix)
    return {
      value: i,
      name: e,
      data: s
      // could be 'null' -> icon is missing
    };
  const n = un2([e], () => t(i, e, Ee(e)));
  return {
    value: i,
    name: e,
    loading: n
  };
}
function Ti(i) {
  return i.hasAttribute("inline");
}
var lo = false;
try {
  lo = navigator.vendor.indexOf("Apple") === 0;
} catch {
}
function Za(i, t) {
  switch (t) {
    case "svg":
    case "bg":
    case "mask":
      return t;
  }
  return t !== "style" && (lo || i.indexOf("<a") === -1) ? "svg" : i.indexOf("currentColor") === -1 ? "bg" : "mask";
}
var Ka = /(-?[0-9.]*[0-9]+[0-9.]*)/g;
var tl = /^-?[0-9.]*[0-9]+[0-9.]*$/g;
function Wi(i, t, e) {
  if (t === 1)
    return i;
  if (e = e || 100, typeof i == "number")
    return Math.ceil(i * t * e) / e;
  if (typeof i != "string")
    return i;
  const s = i.split(Ka);
  if (s === null || !s.length)
    return i;
  const n = [];
  let o = s.shift(), r = tl.test(o);
  for (; ; ) {
    if (r) {
      const a = parseFloat(o);
      isNaN(a) ? n.push(o) : n.push(Math.ceil(a * t * e) / e);
    } else
      n.push(o);
    if (o = s.shift(), o === void 0)
      return n.join("");
    r = !r;
  }
}
function el(i, t = "defs") {
  let e = "";
  const s = i.indexOf("<" + t);
  for (; s >= 0; ) {
    const n = i.indexOf(">", s), o = i.indexOf("</" + t);
    if (n === -1 || o === -1)
      break;
    const r = i.indexOf(">", o);
    if (r === -1)
      break;
    e += i.slice(n + 1, o).trim(), i = i.slice(0, s).trim() + i.slice(r + 1);
  }
  return {
    defs: e,
    content: i
  };
}
function il(i, t) {
  return i ? "<defs>" + i + "</defs>" + t : t;
}
function nl(i, t, e) {
  const s = el(i);
  return il(s.defs, t + s.content + e);
}
var sl = (i) => i === "unset" || i === "undefined" || i === "none";
function co(i, t) {
  const e = {
    ...Me,
    ...i
  }, s = {
    ...qs,
    ...t
  }, n = {
    left: e.left,
    top: e.top,
    width: e.width,
    height: e.height
  };
  let o = e.body;
  [e, s].forEach((w) => {
    const _ = [], x = w.hFlip, m = w.vFlip;
    let b = w.rotate;
    x ? m ? b += 2 : (_.push(
      "translate(" + (n.width + n.left).toString() + " " + (0 - n.top).toString() + ")"
    ), _.push("scale(-1 1)"), n.top = n.left = 0) : m && (_.push(
      "translate(" + (0 - n.left).toString() + " " + (n.height + n.top).toString() + ")"
    ), _.push("scale(1 -1)"), n.top = n.left = 0);
    let v;
    switch (b < 0 && (b -= Math.floor(b / 4) * 4), b = b % 4, b) {
      case 1:
        v = n.height / 2 + n.top, _.unshift(
          "rotate(90 " + v.toString() + " " + v.toString() + ")"
        );
        break;
      case 2:
        _.unshift(
          "rotate(180 " + (n.width / 2 + n.left).toString() + " " + (n.height / 2 + n.top).toString() + ")"
        );
        break;
      case 3:
        v = n.width / 2 + n.left, _.unshift(
          "rotate(-90 " + v.toString() + " " + v.toString() + ")"
        );
        break;
    }
    b % 2 === 1 && (n.left !== n.top && (v = n.left, n.left = n.top, n.top = v), n.width !== n.height && (v = n.width, n.width = n.height, n.height = v)), _.length && (o = nl(
      o,
      '<g transform="' + _.join(" ") + '">',
      "</g>"
    ));
  });
  const r = s.width, a = s.height, l = n.width, u = n.height;
  let h, d;
  r === null ? (d = a === null ? "1em" : a === "auto" ? u : a, h = Wi(d, l / u)) : (h = r === "auto" ? l : r, d = a === null ? Wi(h, u / l) : a === "auto" ? u : a);
  const c = {}, p = (w, _) => {
    sl(_) || (c[w] = _.toString());
  };
  p("width", h), p("height", d);
  const g = [n.left, n.top, l, u];
  return c.viewBox = g.join(" "), {
    attributes: c,
    viewBox: g,
    body: o
  };
}
function hn(i, t) {
  let e = i.indexOf("xlink:") === -1 ? "" : ' xmlns:xlink="http://www.w3.org/1999/xlink"';
  for (const s in t)
    e += " " + s + '="' + t[s] + '"';
  return '<svg xmlns="http://www.w3.org/2000/svg"' + e + ">" + i + "</svg>";
}
function ol(i) {
  return i.replace(/"/g, "'").replace(/%/g, "%25").replace(/#/g, "%23").replace(/</g, "%3C").replace(/>/g, "%3E").replace(/\s+/g, " ");
}
function rl(i) {
  return "data:image/svg+xml," + ol(i);
}
function uo(i) {
  return 'url("' + rl(i) + '")';
}
var al = () => {
  let i;
  try {
    if (i = fetch, typeof i == "function")
      return i;
  } catch {
  }
};
var ai = al();
function ll(i) {
  ai = i;
}
function cl() {
  return ai;
}
function ul(i, t) {
  const e = bi(i);
  if (!e)
    return 0;
  let s;
  if (!e.maxURL)
    s = 0;
  else {
    let n = 0;
    e.resources.forEach((r) => {
      n = Math.max(n, r.length);
    });
    const o = t + ".json?icons=";
    s = e.maxURL - n - e.path.length - o.length;
  }
  return s;
}
function hl(i) {
  return i === 404;
}
var dl = (i, t, e) => {
  const s = [], n = ul(i, t), o = "icons";
  let r = {
    type: o,
    provider: i,
    prefix: t,
    icons: []
  }, a = 0;
  return e.forEach((l, u) => {
    a += l.length + 1, a >= n && u > 0 && (s.push(r), r = {
      type: o,
      provider: i,
      prefix: t,
      icons: []
    }, a = l.length), r.icons.push(l);
  }), s.push(r), s;
};
function pl(i) {
  if (typeof i == "string") {
    const t = bi(i);
    if (t)
      return t.path;
  }
  return "/";
}
var fl = (i, t, e) => {
  if (!ai) {
    e("abort", 424);
    return;
  }
  let s = pl(t.provider);
  switch (t.type) {
    case "icons": {
      const o = t.prefix, r = t.icons.join(","), a = new URLSearchParams({
        icons: r
      });
      s += o + ".json?" + a.toString();
      break;
    }
    case "custom": {
      const o = t.uri;
      s += o.slice(0, 1) === "/" ? o.slice(1) : o;
      break;
    }
    default:
      e("abort", 400);
      return;
  }
  let n = 503;
  ai(i + s).then((o) => {
    const r = o.status;
    if (r !== 200) {
      setTimeout(() => {
        e(hl(r) ? "abort" : "next", r);
      });
      return;
    }
    return n = 501, o.json();
  }).then((o) => {
    if (typeof o != "object" || o === null) {
      setTimeout(() => {
        o === 404 ? e("abort", o) : e("next", n);
      });
      return;
    }
    setTimeout(() => {
      e("success", o);
    });
  }).catch(() => {
    e("next", n);
  });
};
var ml = {
  prepare: dl,
  send: fl
};
function Qn(i, t) {
  switch (i) {
    case "local":
    case "session":
      Pt[i] = t;
      break;
    case "all":
      for (const e in Pt)
        Pt[e] = t;
      break;
  }
}
var Ii = "data-style";
var ho = "";
function bl(i) {
  ho = i;
}
function Zn(i, t) {
  let e = Array.from(i.childNodes).find((s) => s.hasAttribute && s.hasAttribute(Ii));
  e || (e = document.createElement("style"), e.setAttribute(Ii, Ii), i.appendChild(e)), e.textContent = ":host{display:inline-block;vertical-align:" + (t ? "-0.125em" : "0") + "}span,svg{display:block}" + ho;
}
function po() {
  Vn("", ml), Qs(true);
  let i;
  try {
    i = window;
  } catch {
  }
  if (i) {
    if (ao(), i.IconifyPreload !== void 0) {
      const t = i.IconifyPreload, e = "Invalid IconifyPreload syntax.";
      typeof t == "object" && t !== null && (t instanceof Array ? t : [t]).forEach((s) => {
        try {
          (typeof s != "object" || s === null || s instanceof Array || // Check for 'icons' and 'prefix'
          typeof s.icons != "object" || typeof s.prefix != "string" || // Add icon set
          !Bn2(s)) && console.error(e);
        } catch {
          console.error(e);
        }
      });
    }
    if (i.IconifyProviders !== void 0) {
      const t = i.IconifyProviders;
      if (typeof t == "object" && t !== null)
        for (const e in t) {
          const s = "IconifyProviders[" + e + "] is invalid.";
          try {
            const n = t[e];
            if (typeof n != "object" || !n || n.resources === void 0)
              continue;
            Wn(e, n) || console.error(s);
          } catch {
            console.error(s);
          }
        }
    }
  }
  return {
    enableCache: (t) => Qn(t, true),
    disableCache: (t) => Qn(t, false),
    iconLoaded: Un,
    iconExists: Un,
    getIcon: Pa,
    listIcons: Ia,
    addIcon: Zs,
    addCollection: Bn2,
    calculateSize: Wi,
    buildIcon: co,
    iconToHTML: hn,
    svgToURL: uo,
    loadIcons: un2,
    loadIcon: Xa,
    addAPIProvider: Wn,
    appendCustomStyle: bl,
    _api: {
      getAPIConfig: bi,
      setAPIModule: Vn,
      sendAPIQuery: eo,
      setFetch: ll,
      getFetch: cl,
      listAPIProviders: Ha
    }
  };
}
var Gi = {
  "background-color": "currentColor"
};
var fo = {
  "background-color": "transparent"
};
var Kn = {
  image: "var(--svg)",
  repeat: "no-repeat",
  size: "100% 100%"
};
var ts = {
  "-webkit-mask": Gi,
  mask: Gi,
  background: fo
};
for (const i in ts) {
  const t = ts[i];
  for (const e in Kn)
    t[i + "-" + e] = Kn[e];
}
function es(i) {
  return i ? i + (i.match(/^[-0-9.]+$/) ? "px" : "") : "inherit";
}
function gl(i, t, e) {
  const s = document.createElement("span");
  let n = i.body;
  n.indexOf("<a") !== -1 && (n += "<!-- " + Date.now() + " -->");
  const o = i.attributes, r = hn(n, {
    ...o,
    width: t.width + "",
    height: t.height + ""
  }), a = uo(r), l = s.style, u = {
    "--svg": a,
    width: es(o.width),
    height: es(o.height),
    ...e ? Gi : fo
  };
  for (const h in u)
    l.setProperty(h, u[h]);
  return s;
}
var ge;
function vl() {
  try {
    ge = window.trustedTypes.createPolicy("iconify", {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-return
      createHTML: (i) => i
    });
  } catch {
    ge = null;
  }
}
function yl(i) {
  return ge === void 0 && vl(), ge ? ge.createHTML(i) : i;
}
function _l(i) {
  const t = document.createElement("span"), e = i.attributes;
  let s = "";
  e.width || (s = "width: inherit;"), e.height || (s += "height: inherit;"), s && (e.style = s);
  const n = hn(i.body, e);
  return t.innerHTML = yl(n), t.firstChild;
}
function qi(i) {
  return Array.from(i.childNodes).find((t) => {
    const e = t.tagName && t.tagName.toUpperCase();
    return e === "SPAN" || e === "SVG";
  });
}
function is(i, t) {
  const e = t.icon.data, s = t.customisations, n = co(e, s);
  s.preserveAspectRatio && (n.attributes.preserveAspectRatio = s.preserveAspectRatio);
  const o = t.renderedMode;
  let r;
  switch (o) {
    case "svg":
      r = _l(n);
      break;
    default:
      r = gl(n, {
        ...Me,
        ...e
      }, o === "mask");
  }
  const a = qi(i);
  a ? r.tagName === "SPAN" && a.tagName === r.tagName ? a.setAttribute("style", r.getAttribute("style")) : i.replaceChild(r, a) : i.appendChild(r);
}
function ns(i, t, e) {
  const s = e && (e.rendered ? e : e.lastRender);
  return {
    rendered: false,
    inline: t,
    icon: i,
    lastRender: s
  };
}
function xl(i = "iconify-icon") {
  let t, e;
  try {
    t = window.customElements, e = window.HTMLElement;
  } catch {
    return;
  }
  if (!t || !e)
    return;
  const s = t.get(i);
  if (s)
    return s;
  const n = [
    // Icon
    "icon",
    // Mode
    "mode",
    "inline",
    "observe",
    // Customisations
    "width",
    "height",
    "rotate",
    "flip"
  ], o = class extends e {
    /**
     * Constructor
     */
    constructor() {
      super(), At(this, "_shadowRoot"), At(this, "_initialised", false), At(this, "_state"), At(this, "_checkQueued", false), At(this, "_connected", false), At(this, "_observer", null), At(this, "_visible", true);
      const a = this._shadowRoot = this.attachShadow({
        mode: "open"
      }), l = Ti(this);
      Zn(a, l), this._state = ns({
        value: ""
      }, l), this._queueCheck();
    }
    /**
     * Connected to DOM
     */
    connectedCallback() {
      this._connected = true, this.startObserver();
    }
    /**
     * Disconnected from DOM
     */
    disconnectedCallback() {
      this._connected = false, this.stopObserver();
    }
    /**
     * Observed attributes
     */
    static get observedAttributes() {
      return n.slice(0);
    }
    /**
     * Observed properties that are different from attributes
     *
     * Experimental! Need to test with various frameworks that support it
     */
    /*
    static get properties() {
        return {
            inline: {
                type: Boolean,
                reflect: true,
            },
            // Not listing other attributes because they are strings or combination
            // of string and another type. Cannot have multiple types
        };
    }
    */
    /**
     * Attribute has changed
     */
    attributeChangedCallback(a) {
      switch (a) {
        case "inline": {
          const l = Ti(this), u = this._state;
          l !== u.inline && (u.inline = l, Zn(this._shadowRoot, l));
          break;
        }
        case "observer": {
          this.observer ? this.startObserver() : this.stopObserver();
          break;
        }
        default:
          this._queueCheck();
      }
    }
    /**
     * Get/set icon
     */
    get icon() {
      const a = this.getAttribute("icon");
      if (a && a.slice(0, 1) === "{")
        try {
          return JSON.parse(a);
        } catch {
        }
      return a;
    }
    set icon(a) {
      typeof a == "object" && (a = JSON.stringify(a)), this.setAttribute("icon", a);
    }
    /**
     * Get/set inline
     */
    get inline() {
      return Ti(this);
    }
    set inline(a) {
      a ? this.setAttribute("inline", "true") : this.removeAttribute("inline");
    }
    /**
     * Get/set observer
     */
    get observer() {
      return this.hasAttribute("observer");
    }
    set observer(a) {
      a ? this.setAttribute("observer", "true") : this.removeAttribute("observer");
    }
    /**
     * Restart animation
     */
    restartAnimation() {
      const a = this._state;
      if (a.rendered) {
        const l = this._shadowRoot;
        if (a.renderedMode === "svg")
          try {
            l.lastChild.setCurrentTime(0);
            return;
          } catch {
          }
        is(l, a);
      }
    }
    /**
     * Get status
     */
    get status() {
      const a = this._state;
      return a.rendered ? "rendered" : a.icon.data === null ? "failed" : "loading";
    }
    /**
     * Queue attributes re-check
     */
    _queueCheck() {
      this._checkQueued || (this._checkQueued = true, setTimeout(() => {
        this._check();
      }));
    }
    /**
     * Check for changes
     */
    _check() {
      if (!this._checkQueued)
        return;
      this._checkQueued = false;
      const a = this._state, l = this.getAttribute("icon");
      if (l !== a.icon.value) {
        this._iconChanged(l);
        return;
      }
      if (!a.rendered || !this._visible)
        return;
      const u = this.getAttribute("mode"), h = Hn(this);
      (a.attrMode !== u || Ca(a.customisations, h) || !qi(this._shadowRoot)) && this._renderIcon(a.icon, h, u);
    }
    /**
     * Icon value has changed
     */
    _iconChanged(a) {
      const l = Qa(a, (u, h, d) => {
        const c = this._state;
        if (c.rendered || this.getAttribute("icon") !== u)
          return;
        const p = {
          value: u,
          name: h,
          data: d
        };
        p.data ? this._gotIconData(p) : c.icon = p;
      });
      l.data ? this._gotIconData(l) : this._state = ns(l, this._state.inline, this._state);
    }
    /**
     * Force render icon on state change
     */
    _forceRender() {
      if (!this._visible) {
        const a = qi(this._shadowRoot);
        a && this._shadowRoot.removeChild(a);
        return;
      }
      this._queueCheck();
    }
    /**
     * Got new icon data, icon is ready to (re)render
     */
    _gotIconData(a) {
      this._checkQueued = false, this._renderIcon(a, Hn(this), this.getAttribute("mode"));
    }
    /**
     * Re-render based on icon data
     */
    _renderIcon(a, l, u) {
      const h = Za(a.data.body, u), d = this._state.inline;
      is(this._shadowRoot, this._state = {
        rendered: true,
        icon: a,
        inline: d,
        customisations: l,
        attrMode: u,
        renderedMode: h
      });
    }
    /**
     * Start observer
     */
    startObserver() {
      if (!this._observer)
        try {
          this._observer = new IntersectionObserver((a) => {
            const l = a.some((u) => u.isIntersecting);
            l !== this._visible && (this._visible = l, this._forceRender());
          }), this._observer.observe(this);
        } catch {
          if (this._observer) {
            try {
              this._observer.disconnect();
            } catch {
            }
            this._observer = null;
          }
        }
    }
    /**
     * Stop observer
     */
    stopObserver() {
      this._observer && (this._observer.disconnect(), this._observer = null, this._visible = true, this._connected && this._forceRender());
    }
  };
  n.forEach((a) => {
    a in o.prototype || Object.defineProperty(o.prototype, a, {
      get: function() {
        return this.getAttribute(a);
      },
      set: function(l) {
        l !== null ? this.setAttribute(a, l) : this.removeAttribute(a);
      }
    });
  });
  const r = po();
  for (const a in r)
    o[a] = o.prototype[a] = r[a];
  return t.define(i, o), o;
}
xl() || po();
var wl = Object.defineProperty;
var nt = (i, t, e, s) => {
  for (var n = void 0, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = r(t, e, n) || n);
  return n && wl(t, e, n), n;
};
var Ye;
var tt = (Ye = class extends k {
  constructor() {
    super(), this.labelHidden = false, this.active = false, this.disabled = false, this.vertical = false, this.tooltipVisible = false, this._parent = mt(), this._tooltip = mt(), this._contextMenu = mt(), this._mouseLeave = false, this.onWindowMouseUp = (i) => {
      const { value: t } = this._contextMenu;
      !this.contains(i.target) && t && (t.visible = false);
    }, this.mouseLeave = true, this.addEventListener("click", (i) => i.stopPropagation());
  }
  set mouseLeave(i) {
    this._mouseLeave = i, i && (this.tooltipVisible = false, clearTimeout(this.timeoutID));
  }
  get mouseLeave() {
    return this._mouseLeave;
  }
  computeTooltipPosition() {
    const { value: i } = this._parent, { value: t } = this._tooltip;
    i && t && Ds(i, t, {
      placement: "bottom",
      middleware: [Es(10), zs(), Ls(), Ms({ padding: 5 })]
    }).then((e) => {
      const { x: s, y: n } = e;
      Object.assign(t.style, {
        left: `${s}px`,
        top: `${n}px`
      });
    });
  }
  onMouseEnter() {
    if (!(this.tooltipTitle || this.tooltipText))
      return;
    this.mouseLeave = false;
    const i = this.tooltipTime ?? 700;
    this.timeoutID = setTimeout(() => {
      this.mouseLeave || (this.computeTooltipPosition(), this.tooltipVisible = true);
    }, i);
  }
  onChildrenClick(i) {
    i.stopPropagation();
    const { value: t } = this._contextMenu;
    t && (t.visible = !t.visible);
  }
  onSlotChange(i) {
    const { value: t } = this._contextMenu, e = i.target.assignedElements();
    for (const s of e) {
      if (!(s instanceof Ye)) {
        s.remove(), console.warn(
          "Only bim-button is allowed inside bim-button. Child has been removed."
        );
        continue;
      }
      s.addEventListener("click", () => t == null ? void 0 : t.updatePosition());
    }
    this.requestUpdate();
  }
  connectedCallback() {
    super.connectedCallback(), window.addEventListener("mouseup", this.onWindowMouseUp);
  }
  disconnectedCallback() {
    super.disconnectedCallback(), window.removeEventListener("mouseup", this.onWindowMouseUp);
  }
  render() {
    const i = y`
      <div ${Z(this._tooltip)} class="tooltip">
        ${this.tooltipTitle ? y`<p style="text-wrap: nowrap;">
              <strong>${this.tooltipTitle}</strong>
            </p>` : null}
        ${this.tooltipText ? y`<p style="width: 9rem;">${this.tooltipText}</p>` : null}
      </div>
    `, t = this.children.length > 0;
    return y`
      <style>
        .button {
          border-radius: var(
            --bim-button--bdrs,
            ${t ? "var(--bim-ui_size-4xs) 0 0 var(--bim-ui_size-4xs)" : "var(--bim-ui_size-4xs)"}
          );
        }
        .children {
          border-radius: var(
            --bim-button--bdrs,
            ${t ? "0 var(--bim-ui_size-4xs) var(--bim-ui_size-4xs) 0" : "var(--bim-ui_size-4xs)"}
          );
        }
      </style>
      <div ${Z(this._parent)} class="parent">
        ${this.label || this.icon ? y`
              <div
                class="button"
                @mouseenter=${this.onMouseEnter}
                @mouseleave=${() => this.mouseLeave = true}
              >
                <bim-label
                  .icon=${this.icon}
                  .vertical=${this.vertical}
                  .labelHidden=${this.labelHidden}
                  >${this.label}</bim-label
                >
              </div>
            ` : null}
        ${this.tooltipTitle || this.tooltipText ? i : null}
        ${t ? y`
              <div class="children" @click=${this.onChildrenClick}>
                <bim-icon .icon=${"ic:round-plus"}></bim-icon>
              </div>
            ` : null}
        <bim-context-menu
          ${Z(this._contextMenu)}
          style="row-gap: var(--bim-ui_size-4xs)"
        >
          <slot @slotchange=${this.onSlotChange}></slot>
        </bim-context-menu>
      </div>
    `;
  }
}, Ye.styles = O`
    :host {
      --bim-label--c: var(--bim-ui_bg-contrast-100);
      display: block;
      flex: 1;
      pointer-events: none;
    }

    :host(:not([disabled]):hover) {
      cursor: pointer;
    }

    bim-label {
      pointer-events: none;
    }

    .parent {
      --bim-label--fz: var(--bim-ui_size-xs);
      --bim-icon--c: var(--bim-label--c);
      display: flex;
      height: 100%;
      user-select: none;
      row-gap: 0.125rem;
      column-gap: 0.125rem;
    }

    .button,
    .children {
      box-sizing: border-box;
      display: flex;
      align-items: center;
      justify-content: center;
      pointer-events: auto;
      min-height: var(--bim-ui_size-5xl);
      min-width: var(--bim-ui_size-5xl);
      background-color: var(--bim-button--bgc, var(--bim-ui_bg-contrast-20));
      outline: var(--bim-button--olw) solid var(--bim-button--olc);
    }

    .button {
      flex-grow: 1;
    }

    :host(:not([label-hidden])[label]) .button {
      justify-content: var(--bim-button--jc, center);
    }

    :host(:hover) .button,
    :host(:hover) .children {
      --bim-label--c: var(--bim-ui_main-contrast);
      --bim-icon--c: var(--bim-ui_main-contrast);
      fill: white;
      background-color: var(--bim-ui_main-base);
    }

    :host(:not([label]):not([icon])) .children {
      flex: 1;
    }

    :host([active]) .button {
      --bim-label--c: var(--bim-ui_main-contrast);
      --bim-icon--c: var(--bim-ui_main-contrast);
      background-color: var(--bim-ui_main-base);
    }

    :host([vertical]) .parent {
      justify-content: center;
    }

    :host(:not([label-hidden])[label]) .button {
      padding: 0 0.5rem;
    }

    :host([disabled]) .parent {
      background-color: gray;
    }

    .children {
      --bim-icon--fz: var(--bim-ui_size-base);
      padding: 0 0.125rem;
    }

    ::slotted(bim-button) {
      --bim-icon--fz: var(--bim-ui_size-base);
      --bim-button--bgc: var(
        --bim-context-menu--bgc,
        var(--bim-ui_bg-contrast-20)
      );
      --bim-button--bdrs: var(--bim-ui_size-4xs);
      --bim-button--olw: 0;
      --bim-button--olc: transparent;
    }

    .tooltip {
      position: absolute;
      padding: 0.75rem;
      z-index: 99;
      display: flex;
      flex-flow: column;
      row-gap: 0.375rem;
      box-shadow: 0 0 10px 3px rgba(0 0 0 / 20%);
      outline: 1px solid var(--bim-ui_bg-contrast-40);
      font-size: var(--bim-ui_size-xs);
      border-radius: var(--bim-ui_size-4xs);
      background-color: var(--bim-ui_bg-contrast-20);
      color: var(--bim-ui_bg-contrast-100);
    }

    .tooltip p {
      margin: 0;
      padding: 0;
    }

    :host(:not([tooltip-visible])) .tooltip {
      display: none;
    }
  `, Ye);
nt([
  f({ type: String, reflect: true })
], tt.prototype, "label");
nt([
  f({ type: Boolean, attribute: "label-hidden", reflect: true })
], tt.prototype, "labelHidden");
nt([
  f({ type: Boolean, reflect: true })
], tt.prototype, "active");
nt([
  f({ type: Boolean, reflect: true, attribute: "disabled" })
], tt.prototype, "disabled");
nt([
  f({ type: String, reflect: true })
], tt.prototype, "icon");
nt([
  f({ type: Boolean, reflect: true })
], tt.prototype, "vertical");
nt([
  f({ type: Number, attribute: "tooltip-time", reflect: true })
], tt.prototype, "tooltipTime");
nt([
  f({ type: Boolean, attribute: "tooltip-visible", reflect: true })
], tt.prototype, "tooltipVisible");
nt([
  f({ type: String, attribute: "tooltip-title", reflect: true })
], tt.prototype, "tooltipTitle");
nt([
  f({ type: String, attribute: "tooltip-text", reflect: true })
], tt.prototype, "tooltipText");
var $l = tt;
var Cl = Object.defineProperty;
var ze = (i, t, e, s) => {
  for (var n = void 0, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = r(t, e, n) || n);
  return n && Cl(t, e, n), n;
};
var mo = class extends k {
  constructor() {
    super(...arguments), this.checked = false, this.inverted = false, this.onValueChange = new Event("change");
  }
  /**
   * A getter that returns the current checked state of the checkbox. This is useful for retrieving the checkbox's value in form submissions or JavaScript interactions as it provides a consistent `value` property as many other components.
   * @type {boolean}
   * @default false
   * @example <script>console.log(document.querySelector('bim-checkbox').value);<\/script>
   * @example
   * const checkbox = document.createElement('bim-checkbox');
   * document.body.appendChild(checkbox);
   * console.log(checkbox.value); // false initially
   */
  get value() {
    return this.checked;
  }
  onChange(t) {
    t.stopPropagation(), this.checked = t.target.checked, this.dispatchEvent(this.onValueChange);
  }
  render() {
    return y`
      <div class="parent">
        ${this.label ? y`<bim-label .icon="${this.icon}">${this.label}</bim-label> ` : null}
        <input
          type="checkbox"
          aria-label=${this.label || this.name || "Checkbox Input"}
          @change="${this.onChange}"
          .checked="${this.checked}"
        />
      </div>
    `;
  }
};
mo.styles = O`
    :host {
      display: block;
    }

    .parent {
      display: flex;
      justify-content: space-between;
      height: 1.75rem;
      column-gap: 0.5rem;
      width: 100%;
      align-items: center;
    }

    :host([inverted]) .parent {
      flex-direction: row-reverse;
      justify-content: start;
    }

    input {
      height: 1rem;
      width: 1rem;
      cursor: pointer;
      border: none;
      outline: none;
      accent-color: var(--bim-checkbox--c, var(--bim-ui_main-base));
    }

    input:focus {
      outline: var(--bim-checkbox--olw, 2px) solid
        var(--bim-checkbox--olc, var(--bim-ui_accent-base));
    }
  `;
var Kt = mo;
ze([
  f({ type: String, reflect: true })
], Kt.prototype, "icon");
ze([
  f({ type: String, reflect: true })
], Kt.prototype, "name");
ze([
  f({ type: String, reflect: true })
], Kt.prototype, "label");
ze([
  f({ type: Boolean, reflect: true })
], Kt.prototype, "checked");
ze([
  f({ type: Boolean, reflect: true })
], Kt.prototype, "inverted");
var El = Object.defineProperty;
var te = (i, t, e, s) => {
  for (var n = void 0, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = r(t, e, n) || n);
  return n && El(t, e, n), n;
};
var bo = class extends k {
  constructor() {
    super(...arguments), this.vertical = false, this.color = "#bcf124", this._colorInput = mt(), this._textInput = mt(), this.onValueChange = new Event("input"), this.onOpacityInput = (t) => {
      const e = t.target;
      this.opacity = e.value, this.dispatchEvent(this.onValueChange);
    };
  }
  /**
   * Represents both the color and opacity values combined into a single object. This is an instance property, not an HTMLElement attribute.
   * @type {Object}
   * @example
   * const colorInput = document.createElement('bim-color-input');
   * colorInput.value = { color: '#ff0000', opacity: 0.5 };
   */
  set value(t) {
    const { color: e, opacity: s } = t;
    this.color = e, s && (this.opacity = s);
  }
  get value() {
    const t = {
      color: this.color
    };
    return this.opacity && (t.opacity = this.opacity), t;
  }
  onColorInput(t) {
    t.stopPropagation();
    const { value: e } = this._colorInput;
    e && (this.color = e.value, this.dispatchEvent(this.onValueChange));
  }
  onTextInput(t) {
    t.stopPropagation();
    const { value: e } = this._textInput;
    if (!e)
      return;
    const { value: s } = e;
    let n = s.replace(/[^a-fA-F0-9]/g, "");
    n.startsWith("#") || (n = `#${n}`), e.value = n.slice(0, 7), e.value.length === 7 && (this.color = e.value, this.dispatchEvent(this.onValueChange));
  }
  /**
   * Focuses on the color input by programmatically triggering a click event on the underlying color input element.
   * If the color input element is not available, the function does nothing.
   */
  focus() {
    const { value: t } = this._colorInput;
    t && t.click();
  }
  render() {
    return y`
      <div class="parent">
        <bim-input
          .label=${this.label}
          .icon=${this.icon}
          .vertical="${this.vertical}"
        >
          <div class="color-container">
            <div
              style="display: flex; align-items: center; gap: .375rem; height: 100%; flex: 1; padding: 0 0.5rem;"
            >
              <input
                ${Z(this._colorInput)}
                @input="${this.onColorInput}"
                type="color"
                aria-label=${this.label || this.name || "Color Input"}
                value="${this.color}"
              />
              <div
                @click=${this.focus}
                class="sample"
                style="background-color: ${this.color}"
              ></div>
              <input
                ${Z(this._textInput)}
                @input="${this.onTextInput}"
                value="${this.color}"
                type="text"
                aria-label=${this.label || this.name || "Text Color Input"}
              />
            </div>
            ${this.opacity !== void 0 ? y`<bim-number-input
                  @change=${this.onOpacityInput}
                  slider
                  suffix="%"
                  min="0"
                  value=${this.opacity}
                  max="100"
                ></bim-number-input>` : null}
          </div>
        </bim-input>
      </div>
    `;
  }
};
bo.styles = O`
    :host {
      --bim-input--bgc: var(--bim-ui_bg-contrast-20);
      flex: 1;
      display: block;
    }

    :host(:focus) {
      --bim-input--olw: var(--bim-number-input--olw, 2px);
      --bim-input--olc: var(--bim-ui_accent-base);
    }

    .parent {
      display: flex;
      gap: 0.375rem;
    }

    .color-container {
      position: relative;
      outline: none;
      display: flex;
      height: 100%;
      gap: 0.5rem;
      justify-content: flex-start;
      align-items: center;
      flex: 1;
      border-radius: var(--bim-color-input--bdrs, var(--bim-ui_size-4xs));
    }

    .color-container input[type="color"] {
      position: absolute;
      bottom: -0.25rem;
      visibility: hidden;
      width: 0;
      height: 0;
    }

    .color-container .sample {
      width: 1rem;
      height: 1rem;
      border-radius: 0.125rem;
      background-color: #fff;
    }

    .color-container input[type="text"] {
      height: 100%;
      flex: 1;
      width: 3.25rem;
      text-transform: uppercase;
      font-size: 0.75rem;
      background-color: transparent;
      padding: 0%;
      outline: none;
      border: none;
      color: var(--bim-color-input--c, var(--bim-ui_bg-contrast-100));
    }

    bim-number-input {
      flex-grow: 0;
    }
  `;
var Mt = bo;
te([
  f({ type: String, reflect: true })
], Mt.prototype, "name");
te([
  f({ type: String, reflect: true })
], Mt.prototype, "label");
te([
  f({ type: String, reflect: true })
], Mt.prototype, "icon");
te([
  f({ type: Boolean, reflect: true })
], Mt.prototype, "vertical");
te([
  f({ type: Number, reflect: true })
], Mt.prototype, "opacity");
te([
  f({ type: String, reflect: true })
], Mt.prototype, "color");
var Al = O`
  ::-webkit-scrollbar {
    width: 0.4rem;
    height: 0.4rem;
    overflow: hidden;
  }

  ::-webkit-scrollbar-thumb {
    border-radius: 0.25rem;
    background-color: var(
      --bim-scrollbar--c,
      color-mix(in lab, var(--bim-ui_main-base), white 15%)
    );
  }

  ::-webkit-scrollbar-track {
    background-color: var(--bim-scrollbar--bgc, var(--bim-ui_bg-base));
  }
`;
var Sl = O`
  :root {
    /* Grayscale Colors */
    --bim-ui_gray-0: hsl(210 10% 5%);
    --bim-ui_gray-1: hsl(210 10% 10%);
    --bim-ui_gray-2: hsl(210 10% 20%);
    --bim-ui_gray-4: hsl(210 10% 40%);
    --bim-ui_gray-6: hsl(210 10% 60%);
    --bim-ui_gray-8: hsl(210 10% 80%);
    --bim-ui_gray-9: hsl(210 10% 90%);
    --bim-ui_gray-10: hsl(210 10% 95%);

    /* Brand Colors */
    --bim-ui_main-base: #6528d7;
    --bim-ui_accent-base: #bcf124;

    /* Brand Colors Contrasts */
    --bim-ui_main-contrast: var(--bim-ui_gray-10);
    --bim-ui_accent-contrast: var(--bim-ui_gray-0);

    /* Sizes */
    --bim-ui_size-4xs: 0.375rem;
    --bim-ui_size-3xs: 0.5rem;
    --bim-ui_size-2xs: 0.625rem;
    --bim-ui_size-xs: 0.75rem;
    --bim-ui_size-sm: 0.875rem;
    --bim-ui_size-base: 1rem;
    --bim-ui_size-lg: 1.125rem;
    --bim-ui_size-xl: 1.25rem;
    --bim-ui_size-2xl: 1.375rem;
    --bim-ui_size-3xl: 1.5rem;
    --bim-ui_size-4xl: 1.625rem;
    --bim-ui_size-5xl: 1.75rem;
    --bim-ui_size-6xl: 1.875rem;
    --bim-ui_size-7xl: 2rem;
    --bim-ui_size-8xl: 2.125rem;
    --bim-ui_size-9xl: 2.25rem;
  }

  /* Background Colors */
  @media (prefers-color-scheme: dark) {
    :root {
      --bim-ui_bg-base: var(--bim-ui_gray-0);
      --bim-ui_bg-contrast-10: var(--bim-ui_gray-1);
      --bim-ui_bg-contrast-20: var(--bim-ui_gray-2);
      --bim-ui_bg-contrast-40: var(--bim-ui_gray-4);
      --bim-ui_bg-contrast-60: var(--bim-ui_gray-6);
      --bim-ui_bg-contrast-80: var(--bim-ui_gray-8);
      --bim-ui_bg-contrast-100: var(--bim-ui_gray-10);
    }
  }

  @media (prefers-color-scheme: light) {
    :root {
      --bim-ui_bg-base: var(--bim-ui_gray-10);
      --bim-ui_bg-contrast-10: var(--bim-ui_gray-9);
      --bim-ui_bg-contrast-20: var(--bim-ui_gray-8);
      --bim-ui_bg-contrast-40: var(--bim-ui_gray-6);
      --bim-ui_bg-contrast-60: var(--bim-ui_gray-4);
      --bim-ui_bg-contrast-80: var(--bim-ui_gray-2);
      --bim-ui_bg-contrast-100: var(--bim-ui_gray-0);
      --bim-ui_accent-base: #6528d7;
    }
  }

  html.bim-ui-dark {
    --bim-ui_bg-base: var(--bim-ui_gray-0);
    --bim-ui_bg-contrast-10: var(--bim-ui_gray-1);
    --bim-ui_bg-contrast-20: var(--bim-ui_gray-2);
    --bim-ui_bg-contrast-40: var(--bim-ui_gray-4);
    --bim-ui_bg-contrast-60: var(--bim-ui_gray-6);
    --bim-ui_bg-contrast-80: var(--bim-ui_gray-8);
    --bim-ui_bg-contrast-100: var(--bim-ui_gray-10);
  }

  html.bim-ui-light {
    --bim-ui_bg-base: var(--bim-ui_gray-10);
    --bim-ui_bg-contrast-10: var(--bim-ui_gray-9);
    --bim-ui_bg-contrast-20: var(--bim-ui_gray-8);
    --bim-ui_bg-contrast-40: var(--bim-ui_gray-6);
    --bim-ui_bg-contrast-60: var(--bim-ui_gray-4);
    --bim-ui_bg-contrast-80: var(--bim-ui_gray-2);
    --bim-ui_bg-contrast-100: var(--bim-ui_gray-0);
    --bim-ui_accent-base: #6528d7;
  }
`;
var Lt = {
  scrollbar: Al,
  globalStyles: Sl
};
var kl = Object.defineProperty;
var Ol = Object.getOwnPropertyDescriptor;
var Tl = (i, t, e, s) => {
  for (var n = Ol(t, e), o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = r(t, e, n) || n);
  return n && kl(t, e, n), n;
};
var go = class extends k {
  constructor() {
    super(...arguments), this._visible = false, this._middleware = {
      name: "middleware",
      async fn(t) {
        const { right: e, top: s } = await Ki(t);
        return t.x -= Math.sign(e) === 1 ? e + 5 : 0, t.y -= Math.sign(s) === 1 ? s + 5 : 0, t;
      }
    };
  }
  get visible() {
    return this._visible;
  }
  set visible(t) {
    this._visible = t, t && this.updatePosition();
  }
  /**
   * Asynchronously updates the position of the context menu relative to a target element.
   * If no target element is provided, it attempts to use the parent node as the target.
   * The position is calculated using the `computePosition` function from `@floating-ui/dom`,
   * which considers various adjustments like offset, inline positioning, flipping, and shifting
   * to ensure the context menu is properly placed relative to the target element.
   *
   * @param [target] - The target element relative to which the context menu should be positioned.
   *                                 If not provided, the parent node is used as the target.
   * @returns A promise that resolves once the position has been updated. This method
   *                          does not explicitly return a value but updates the context menu's style
   *                          properties to position it on the screen.
   */
  async updatePosition(t) {
    const e = t || this.parentNode;
    if (!e) {
      this.visible = false, console.warn("No target element found for context-menu.");
      return;
    }
    const s = await Ds(e, this, {
      placement: "right",
      middleware: [
        Es(10),
        zs(),
        Ls(),
        Ms({ padding: 5 }),
        this._middleware
      ]
    }), { x: n, y: o } = s;
    this.style.left = `${n}px`, this.style.top = `${o}px`;
  }
  render() {
    return y` <slot></slot> `;
  }
};
go.styles = [
  Lt.scrollbar,
  O`
      :host {
        --bim-label--fz: var(--bim-ui_size-xs);
        position: absolute;
        top: 0;
        left: 0;
        z-index: 999;
        overflow: auto;
        max-height: 20rem;
        min-width: 3rem;
        flex-direction: column;
        box-shadow: 1px 2px 8px 2px rgba(0, 0, 0, 0.15);
        padding: 0.5rem;
        border-radius: var(--bim-ui_size-4xs);
        background-color: var(
          --bim-context-menu--bgc,
          var(--bim-ui_bg-contrast-20)
        );
      }

      :host([visible]) {
        display: flex;
      }

      :host(:not([visible])) {
        display: none;
      }
    `
];
var vo = go;
Tl([
  f({ type: Boolean, reflect: true })
], vo.prototype, "visible");
var xt = class extends k {
  constructor() {
    super(...arguments), this._lazyLoadObserver = null, this._visibleElements = [], this.ELEMENTS_BEFORE_OBSERVER = 20, this.useObserver = false, this.elements = /* @__PURE__ */ new Set(), this.observe = (t) => {
      if (!this.useObserver)
        return;
      for (const s of t)
        this.elements.add(s);
      const e = t.slice(this.ELEMENTS_BEFORE_OBSERVER);
      for (const s of e)
        s.remove();
      this.observeLastElement();
    };
  }
  set visibleElements(t) {
    this._visibleElements = this.useObserver ? t : [], this.requestUpdate();
  }
  get visibleElements() {
    return this._visibleElements;
  }
  getLazyObserver() {
    if (!this.useObserver)
      return null;
    if (this._lazyLoadObserver)
      return this._lazyLoadObserver;
    const t = new IntersectionObserver(
      (e) => {
        const s = e[0];
        if (!s.isIntersecting)
          return;
        const n = s.target;
        t.unobserve(n);
        const o = this.ELEMENTS_BEFORE_OBSERVER + this.visibleElements.length, r = [...this.elements][o];
        r && (this.visibleElements = [...this.visibleElements, r], t.observe(r));
      },
      { threshold: 0.5 }
    );
    return t;
  }
  observeLastElement() {
    const t = this.getLazyObserver();
    if (!t)
      return;
    const e = this.ELEMENTS_BEFORE_OBSERVER + this.visibleElements.length - 1, s = [...this.elements][e];
    s && t.observe(s);
  }
  resetVisibleElements() {
    const t = this.getLazyObserver();
    if (t) {
      for (const e of this.elements)
        t.unobserve(e);
      this.visibleElements = [], this.observeLastElement();
    }
  }
  /**
   * Creates a new UI component instance based on the provided template and initial state.
   *
   * @template T - The type of the UI component element.
   * @template S - The type of the component state.
   *
   * @param template - The component template function (stateless or stateful).
   * @param initialState - The initial state of the component (optional for stateless components).
   * @returns The created UI component element or an array containing the element and a function to update its state.
   */
  static create(t, e) {
    const s = document.createDocumentFragment();
    if (t.length === 0)
      return Xt(t(), s), s.firstElementChild;
    if (!e)
      throw new Error(
        "UIComponent: Initial state is required for statefull components."
      );
    let n = e;
    const o = t, r = (a) => (n = { ...n, ...a }, Xt(o(n), s), n);
    return r(e), [s.firstElementChild, r];
  }
};
var li = (i, t = true) => {
  let e = {};
  for (const s of i.children) {
    const n = s, o = n.getAttribute("name") || n.getAttribute("label");
    if (o) {
      if ("value" in n) {
        const r = n.value;
        if (typeof r == "object" && !Array.isArray(r) && Object.keys(r).length === 0)
          continue;
        e[o] = n.value;
      } else if (t) {
        const r = li(n);
        if (Object.keys(r).length === 0)
          continue;
        e[o] = r;
      }
    } else
      t && (e = { ...e, ...li(n) });
  }
  return e;
};
var gi = (i) => i === "true" || i === "false" ? i === "true" : i && !isNaN(Number(i)) && i.trim() !== "" ? Number(i) : i;
var Il = [">=", "<=", "=", ">", "<", "?", "/", "#"];
function ss(i) {
  const t = Il.find(
    (r) => i.split(r).length === 2
  ), e = i.split(t).map((r) => r.trim()), [s, n] = e, o = n.startsWith("'") && n.endsWith("'") ? n.replace(/'/g, "") : gi(n);
  return { key: s, condition: t, value: o };
}
var Yi = (i) => {
  try {
    const t = [], e = i.split(/&(?![^()]*\))/).map((s) => s.trim());
    for (const s of e) {
      const n = !s.startsWith("(") && !s.endsWith(")"), o = s.startsWith("(") && s.endsWith(")");
      if (n) {
        const r = ss(s);
        t.push(r);
      }
      if (o) {
        const r = {
          operator: "&",
          queries: s.replace(/^(\()|(\))$/g, "").split("&").map((a) => a.trim()).map((a, l) => {
            const u = ss(a);
            return l > 0 && (u.operator = "&"), u;
          })
        };
        t.push(r);
      }
    }
    return t;
  } catch {
    return null;
  }
};
var os = (i, t, e) => {
  let s = false;
  switch (t) {
    case "=":
      s = i === e;
      break;
    case "?":
      s = String(i).includes(String(e));
      break;
    case "<":
      (typeof i == "number" || typeof e == "number") && (s = i < e);
      break;
    case "<=":
      (typeof i == "number" || typeof e == "number") && (s = i <= e);
      break;
    case ">":
      (typeof i == "number" || typeof e == "number") && (s = i > e);
      break;
    case ">=":
      (typeof i == "number" || typeof e == "number") && (s = i >= e);
      break;
    case "/":
      s = String(i).startsWith(String(e));
      break;
  }
  return s;
};
var Pl = Object.defineProperty;
var Rl = Object.getOwnPropertyDescriptor;
var wt = (i, t, e, s) => {
  for (var n = s > 1 ? void 0 : s ? Rl(t, e) : t, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = (s ? r(t, e, n) : r(n)) || n);
  return s && n && Pl(t, e, n), n;
};
var yo = class extends k {
  constructor() {
    super(...arguments), this.checked = false, this.checkbox = false, this.noMark = false, this.vertical = false;
  }
  get value() {
    return this._value !== void 0 ? this._value : this.label ? gi(this.label) : this.label;
  }
  set value(t) {
    this._value = t;
  }
  render() {
    return y`
      <div class="parent" .title=${this.label ?? ""}>
        ${this.img || this.icon || this.label ? y` <div style="display: flex; column-gap: 0.375rem">
              ${this.checkbox && !this.noMark ? y`<bim-checkbox
                    style="pointer-events: none"
                    .checked=${this.checked}
                  ></bim-checkbox>` : null}
              <bim-label
                .vertical=${this.vertical}
                .icon=${this.icon}
                .img=${this.img}
                >${this.label}</bim-label
              >
            </div>` : null}
        ${!this.checkbox && !this.noMark && this.checked ? y`<svg
              xmlns="http://www.w3.org/2000/svg"
              height="1.125rem"
              viewBox="0 0 24 24"
              width="1.125rem"
              fill="#FFFFFF"
            >
              <path d="M0 0h24v24H0z" fill="none" />
              <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z" />
            </svg>` : null}
        <slot></slot>
      </div>
    `;
  }
};
yo.styles = O`
    :host {
      --bim-label--c: var(--bim-ui_bg-contrast-100);
      display: block;
      box-sizing: border-box;
      flex: 1;
      padding: 0rem 0.5rem;
      border-radius: var(--bim-ui_size-4xs);
    }

    :host(:hover) {
      cursor: pointer;
      background-color: color-mix(
        in lab,
        var(--bim-selector--bgc, var(--bim-ui_bg-contrast-20)),
        var(--bim-ui_main-base) 10%
      );
    }

    :host([checked]) {
      --bim-label--c: color-mix(in lab, var(--bim-ui_main-base), white 30%);
    }

    :host([checked]) svg {
      fill: color-mix(in lab, var(--bim-ui_main-base), white 30%);
    }

    .parent {
      box-sizing: border-box;
      display: flex;
      justify-content: var(--bim-option--jc, space-between);
      column-gap: 0.5rem;
      align-items: center;
      min-height: 1.75rem;
      height: 100%;
    }

    input {
      height: 1rem;
      width: 1rem;
      cursor: pointer;
      border: none;
      outline: none;
      accent-color: var(--bim-checkbox--c, var(--bim-ui_main-base));
    }

    input:focus {
      outline: var(--bim-checkbox--olw, 2px) solid
        var(--bim-checkbox--olc, var(--bim-ui_accent-base));
    }

    bim-label {
      pointer-events: none;
    }
  `;
var L = yo;
wt([
  f({ type: String, reflect: true })
], L.prototype, "img", 2);
wt([
  f({ type: String, reflect: true })
], L.prototype, "label", 2);
wt([
  f({ type: String, reflect: true })
], L.prototype, "icon", 2);
wt([
  f({ type: Boolean, reflect: true })
], L.prototype, "checked", 2);
wt([
  f({ type: Boolean, reflect: true })
], L.prototype, "checkbox", 2);
wt([
  f({ type: Boolean, attribute: "no-mark", reflect: true })
], L.prototype, "noMark", 2);
wt([
  f({
    converter: {
      fromAttribute(i) {
        return i && gi(i);
      }
    }
  })
], L.prototype, "value", 1);
wt([
  f({ type: Boolean, reflect: true })
], L.prototype, "vertical", 2);
var Nl = Object.defineProperty;
var Ml = Object.getOwnPropertyDescriptor;
var $t = (i, t, e, s) => {
  for (var n = s > 1 ? void 0 : s ? Ml(t, e) : t, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = (s ? r(t, e, n) : r(n)) || n);
  return s && n && Nl(t, e, n), n;
};
var _o = class extends xt {
  constructor() {
    super(), this.multiple = false, this.required = false, this.vertical = false, this._inputContainer = mt(), this._listElement = mt(), this._visible = false, this._value = [], this.onValueChange = new Event("change"), this.onWindowMouseUp = (t) => {
      this.visible && (this.contains(t.target) || (this.visible = false));
    }, this.onOptionClick = (t) => {
      const e = t.target, s = this._value.includes(e);
      if (!this.multiple && !this.required && !s)
        this._value = [e];
      else if (!this.multiple && !this.required && s)
        this._value = [];
      else if (!this.multiple && this.required && !s)
        this._value = [e];
      else if (this.multiple && !this.required && !s)
        this._value = [...this._value, e];
      else if (this.multiple && !this.required && s)
        this._value = this._value.filter((n) => n !== e);
      else if (this.multiple && this.required && !s)
        this._value = [...this._value, e];
      else if (this.multiple && this.required && s) {
        const n = this._value.filter((o) => o !== e);
        n.length !== 0 && (this._value = n);
      }
      this.updateOptionsState(), this.dispatchEvent(this.onValueChange);
    }, this.useObserver = true;
  }
  set visible(t) {
    this._visible = t, t || this.resetVisibleElements();
  }
  get visible() {
    return this._visible;
  }
  /**
   * The selected values in the dropdown.
   * @type {any[]}
   * @example
   * const dropdown = document.createElement('bim-dropdown');
   * dropdown.value = ['option1', 'option2'];
   */
  set value(t) {
    if (this.required && Object.keys(t).length === 0)
      return;
    const e = [];
    for (const s of t) {
      const n = this.findOption(s);
      if (n && (e.push(n), !this.multiple && Object.keys(t).length > 1))
        break;
    }
    this._value = e, this.updateOptionsState(), this.dispatchEvent(this.onValueChange);
  }
  get value() {
    return this._value.filter(
      (t) => t instanceof L && t.checked
    ).map((t) => t.value);
  }
  get _options() {
    const t = [...this.elements];
    for (const e of this.children)
      e instanceof L && t.push(e);
    return t;
  }
  onSlotChange(t) {
    const e = t.target.assignedElements();
    this.observe(e);
    for (const s of e) {
      if (!(s instanceof L)) {
        s.remove();
        continue;
      }
      s.removeEventListener("click", this.onOptionClick), s.addEventListener("click", this.onOptionClick);
    }
  }
  updateOptionsState() {
    for (const t of this._options)
      t instanceof L && (this._value.includes(t) ? t.checked = true : t.checked = false);
  }
  findOption(t) {
    return this._options.find((e) => e instanceof L ? e.label === t || e.value === t : false);
  }
  connectedCallback() {
    super.connectedCallback(), window.addEventListener("mouseup", this.onWindowMouseUp);
  }
  firstUpdated() {
    for (const t of this.children)
      t instanceof L && t.checked && this._value.push(t);
  }
  disconnectedCallback() {
    super.disconnectedCallback(), window.removeEventListener("mouseup", this.onWindowMouseUp);
  }
  render() {
    let t, e, s;
    if (this._value.length === 0)
      t = "Select an option...";
    else if (this._value.length === 1) {
      const n = this._value[0];
      t = (n == null ? void 0 : n.label) || (n == null ? void 0 : n.value), e = n == null ? void 0 : n.img, s = n == null ? void 0 : n.icon;
    } else
      t = `Multiple (${this._value.length})`;
    return y`
      <bim-input
        title=${this.label ?? ""}
        .label=${this.label}
        .icon=${this.icon}
        .vertical=${this.vertical}
      >
        <div
          ${Z(this._inputContainer)}
          class="input"
          @click=${() => this.visible = !this.visible}
        >
          <bim-label
            .img=${e}
            .icon=${s}
            style="overflow: hidden;"
            >${t}</bim-label
          >
          <svg
            style="flex-shrink: 0"
            xmlns="http://www.w3.org/2000/svg"
            height="1.125rem"
            viewBox="0 0 24 24"
            width="1.125rem"
            fill="#9ca3af"
          >
            <path d="M0 0h24v24H0V0z" fill="none" />
            <path d="M7.41 8.59 12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z" />
          </svg>
        </div>
        <bim-context-menu ${Z(this._listElement)} .visible=${this.visible}>
          <slot @slotchange=${this.onSlotChange}></slot>
          ${this.visibleElements.map((n) => n)}
        </bim-context-menu>
      </bim-input>
    `;
  }
};
_o.styles = [
  Lt.scrollbar,
  O`
      :host {
        --bim-input--bgc: var(
          --bim-dropdown--bgc,
          var(--bim-ui_bg-contrast-20)
        );
        --bim-input--olw: var(--bim-dropdown--olw, 2px);
        --bim-input--olc: var(--bim-dropdown--olc, transparent);
        --bim-input--bdrs: var(--bim-dropdown--bdrs, var(--bim-ui_size-4xs));
        flex: 1;
        display: block;
      }

      :host([visible]) {
        --bim-input--olc: var(
          --bim-dropdown¡focus--c,
          var(--bim-ui_accent-base)
        );
      }

      .input {
        --bim-label--fz: var(--bim-drodown--fz, var(--bim-ui_size-xs));
        --bim-label--c: var(--bim-dropdown--c, var(--bim-ui_bg-contrast-100));
        height: 100%;
        display: flex;
        flex: 1;
        overflow: hidden;
        column-gap: 0.25rem;
        outline: none;
        cursor: pointer;
        align-items: center;
        justify-content: space-between;
        padding: 0 0.5rem;
      }

      bim-label {
        pointer-events: none;
      }
    `
];
var ct = _o;
$t([
  f({ type: String, reflect: true })
], ct.prototype, "name", 2);
$t([
  f({ type: String, reflect: true })
], ct.prototype, "icon", 2);
$t([
  f({ type: String, reflect: true })
], ct.prototype, "label", 2);
$t([
  f({ type: Boolean, reflect: true })
], ct.prototype, "multiple", 2);
$t([
  f({ type: Boolean, reflect: true })
], ct.prototype, "required", 2);
$t([
  f({ type: Boolean, reflect: true })
], ct.prototype, "vertical", 2);
$t([
  f({ type: Boolean, reflect: true })
], ct.prototype, "visible", 1);
$t([
  Ne()
], ct.prototype, "_value", 2);
var Ll = Object.defineProperty;
var xo = (i, t, e, s) => {
  for (var n = void 0, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = r(t, e, n) || n);
  return n && Ll(t, e, n), n;
};
var wo = class extends k {
  constructor() {
    super(...arguments), this.floating = false, this.layouts = {};
  }
  // private isVerticalArea(area: string) {
  //   const { rows } = this;
  //   const row = rows.find((row) => row.includes(area));
  //   if (!row)
  //     throw new Error(
  //       `${area} wasn't defined in the grid-template of this bim-grid`,
  //     );
  //   const index = rows.indexOf(row);
  //   const abovePanel = index > 0 && rows[index - 1].includes(area);
  //   const belowPanel =
  //     index < rows.length - 1 && rows[index + 1].includes(area);
  //   return abovePanel || belowPanel;
  // }
  getUniqueAreasFromTemplate(t) {
    const e = t.split(`
`).map((s) => s.trim()).map((s) => s.split('"')[1]).filter((s) => s !== void 0).flatMap((s) => s.split(/\s+/));
    return [...new Set(e)].filter((s) => s !== "");
  }
  firstUpdated() {
    this._onLayoutChange = new Event("layoutchange");
  }
  render() {
    if (this.layout) {
      if (this.layouts[this.layout]) {
        this.innerHTML = "";
        const t = this.layouts[this.layout], e = this.getUniqueAreasFromTemplate(t.template).map((s) => {
          const n = t.elements[s];
          return n && (n.style.gridArea = s), n;
        }).filter((s) => !!s);
        this.style.gridTemplate = t.template, this._onLayoutChange && this.dispatchEvent(this._onLayoutChange), this.append(...e);
      }
    } else
      this.innerHTML = "", this.style.gridTemplate = "", this._onLayoutChange && this.dispatchEvent(this._onLayoutChange);
    return y`<slot></slot>`;
  }
};
wo.styles = O`
    :host {
      display: grid;
      height: 100%;
      width: 100%;
      overflow: hidden;
      box-sizing: border-box;
    }

    /* :host(:not([layout])) {
      display: none;
    } */

    :host([floating]) {
      --bim-panel--bdrs: var(--bim-ui_size-4xs);
      background-color: transparent;
      padding: 1rem;
      gap: 1rem;
      position: absolute;
      pointer-events: none;
      top: 0px;
      left: 0px;
    }

    :host(:not([floating])) {
      --bim-panel--bdrs: 0;
      background-color: var(--bim-ui_bg-contrast-20);
      gap: 1px;
    }
  `;
var dn = wo;
xo([
  f({ type: Boolean, reflect: true })
], dn.prototype, "floating");
xo([
  f({ type: String, reflect: true })
], dn.prototype, "layout");
var Xi = class extends k {
  render() {
    return y`
      <iconify-icon .icon=${this.icon} height="none"></iconify-icon>
    `;
  }
};
Xi.styles = O`
    :host {
      height: var(--bim-icon--fz, var(--bim-ui_size-sm));
      width: var(--bim-icon--fz, var(--bim-ui_size-sm));
    }

    iconify-icon {
      height: var(--bim-icon--fz, var(--bim-ui_size-sm));
      width: var(--bim-icon--fz, var(--bim-ui_size-sm));
      color: var(--bim-icon--c);
    }
  `, Xi.properties = {
  icon: { type: String }
};
var zl = Xi;
var Dl = Object.defineProperty;
var vi = (i, t, e, s) => {
  for (var n = void 0, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = r(t, e, n) || n);
  return n && Dl(t, e, n), n;
};
var $o = class extends k {
  constructor() {
    super(...arguments), this.vertical = false, this.onValueChange = new Event("change");
  }
  get value() {
    const t = {};
    for (const e of this.children) {
      const s = e;
      "value" in s ? t[s.name || s.label] = s.value : "checked" in s && (t[s.name || s.label] = s.checked);
    }
    return t;
  }
  set value(t) {
    const e = [...this.children];
    for (const s in t) {
      const n = e.find((a) => {
        const l = a;
        return l.name === s || l.label === s;
      });
      if (!n)
        continue;
      const o = n, r = t[s];
      typeof r == "boolean" ? o.checked = r : o.value = r;
    }
  }
  render() {
    return y`
      <div class="parent">
        ${this.label || this.icon ? y`<bim-label .icon=${this.icon}>${this.label}</bim-label>` : null}
        <div class="input">
          <slot></slot>
        </div>
      </div>
    `;
  }
};
$o.styles = O`
    :host {
      flex: 1;
      display: block;
    }

    .parent {
      display: flex;
      flex-wrap: wrap;
      column-gap: 1rem;
      row-gap: 0.375rem;
      user-select: none;
      flex: 1;
    }

    :host(:not([vertical])) .parent {
      justify-content: space-between;
    }

    :host([vertical]) .parent {
      flex-direction: column;
    }

    .input {
      overflow: hidden;
      box-sizing: border-box;
      display: flex;
      align-items: center;
      flex-wrap: wrap;
      min-height: 1.75rem;
      min-width: 3rem;
      gap: var(--bim-input--g, var(--bim-ui_size-4xs));
      padding: var(--bim-input--p, 0);
      background-color: var(--bim-input--bgc, transparent);
      outline: var(--bim-input--olw, 2px) solid
        var(--bim-input--olc, transparent);
      border-radius: var(--bim-input--bdrs, var(--bim-ui_size-4xs));
    }

    :host(:not([vertical])) .input {
      flex: 1;
      justify-content: flex-end;
    }

    :host(:not([vertical])[label]) .input {
      max-width: fit-content;
    }
  `;
var De = $o;
vi([
  f({ type: String, reflect: true })
], De.prototype, "name");
vi([
  f({ type: String, reflect: true })
], De.prototype, "label");
vi([
  f({ type: String, reflect: true })
], De.prototype, "icon");
vi([
  f({ type: Boolean, reflect: true })
], De.prototype, "vertical");
var jl = Object.defineProperty;
var je = (i, t, e, s) => {
  for (var n = void 0, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = r(t, e, n) || n);
  return n && jl(t, e, n), n;
};
var Co = class extends k {
  constructor() {
    super(...arguments), this.labelHidden = false, this.iconHidden = false, this.vertical = false;
  }
  get value() {
    return this.textContent ? gi(this.textContent) : this.textContent;
  }
  render() {
    return y`
      <div class="parent" .title=${this.textContent ?? ""}>
        ${this.img ? y`<img .src=${this.img} .alt=${this.textContent || ""} />` : null}
        ${!this.iconHidden && this.icon ? y`<bim-icon .icon=${this.icon}></bim-icon>` : null}
        <p><slot></slot></p>
      </div>
    `;
  }
};
Co.styles = O`
    :host {
      --bim-icon--c: var(--bim-label--c);
      color: var(--bim-label--c, var(--bim-ui_bg-contrast-60));
      font-size: var(--bim-label--fz, var(--bim-ui_size-xs));
      overflow: hidden;
      display: block;
      white-space: nowrap;
      line-height: 1.1rem;
    }

    .parent {
      display: flex;
      align-items: center;
      column-gap: 0.25rem;
      row-gap: 0.125rem;
      user-select: none;
      height: 100%;
    }

    :host([vertical]) .parent {
      flex-direction: column;
    }

    .parent p {
      margin: 0;
      text-overflow: ellipsis;
      overflow: hidden;
    }

    :host([label-hidden]) .parent p,
    :host(:empty) .parent p {
      display: none;
    }

    img {
      height: 100%;
      aspect-ratio: 1;
      border-radius: 100%;
      margin-right: 0.125rem;
    }

    :host(:not([vertical])) img {
      max-height: var(
        --bim-label_icon--sz,
        calc(var(--bim-label--fz, var(--bim-ui_size-xs)) * 1.5)
      );
    }

    :host([vertical]) img {
      max-height: var(
        --bim-label_icon--sz,
        calc(var(--bim-label--fz, var(--bim-ui_size-xs)) * 4)
      );
    }
  `;
var ee = Co;
je([
  f({ type: String, reflect: true })
], ee.prototype, "img");
je([
  f({ type: Boolean, attribute: "label-hidden", reflect: true })
], ee.prototype, "labelHidden");
je([
  f({ type: String, reflect: true })
], ee.prototype, "icon");
je([
  f({ type: Boolean, attribute: "icon-hidden", reflect: true })
], ee.prototype, "iconHidden");
je([
  f({ type: Boolean, reflect: true })
], ee.prototype, "vertical");
var Hl = Object.defineProperty;
var Fl = Object.getOwnPropertyDescriptor;
var Q = (i, t, e, s) => {
  for (var n = s > 1 ? void 0 : s ? Fl(t, e) : t, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = (s ? r(t, e, n) : r(n)) || n);
  return s && n && Hl(t, e, n), n;
};
var Eo = class extends k {
  constructor() {
    super(...arguments), this._value = 0, this.vertical = false, this.slider = false, this._input = mt(), this.onValueChange = new Event("change");
  }
  set value(t) {
    this.setValue(t.toString());
  }
  get value() {
    return this._value;
  }
  onChange(t) {
    t.stopPropagation();
    const { value: e } = this._input;
    e && this.setValue(e.value);
  }
  setValue(t) {
    const { value: e } = this._input;
    let s = t;
    if (s = s.replace(/[^0-9.-]/g, ""), s = s.replace(/(\..*)\./g, "$1"), s.endsWith(".") || (s.lastIndexOf("-") > 0 && (s = s[0] + s.substring(1).replace(/-/g, "")), s === "-" || s === "-0"))
      return;
    let n = Number(s);
    Number.isNaN(n) || (n = this.min !== void 0 ? Math.max(n, this.min) : n, n = this.max !== void 0 ? Math.min(n, this.max) : n, this.value !== n && (this._value = n, e && (e.value = this.value.toString()), this.requestUpdate(), this.dispatchEvent(this.onValueChange)));
  }
  onBlur() {
    const { value: t } = this._input;
    t && Number.isNaN(Number(t.value)) && (t.value = this.value.toString());
  }
  onSliderMouseDown(t) {
    document.body.style.cursor = "w-resize";
    const { clientX: e } = t, s = this.value;
    let n = false;
    const o = (l) => {
      var u;
      n = true;
      const { clientX: h } = l, d = this.step ?? 1, c = ((u = d.toString().split(".")[1]) == null ? void 0 : u.length) || 0, p = 1 / (this.sensitivity ?? 1), g = (h - e) / p;
      if (Math.floor(Math.abs(g)) !== Math.abs(g))
        return;
      const w = s + g * d;
      this.setValue(w.toFixed(c));
    }, r = () => {
      this.slider = true, this.removeEventListener("blur", r);
    }, a = () => {
      document.removeEventListener("mousemove", o), document.body.style.cursor = "default", n ? n = false : (this.addEventListener("blur", r), this.slider = false, requestAnimationFrame(() => this.focus())), document.removeEventListener("mouseup", a);
    };
    document.addEventListener("mousemove", o), document.addEventListener("mouseup", a);
  }
  onFocus(t) {
    t.stopPropagation();
    const e = (s) => {
      s.key === "Escape" && (this.blur(), window.removeEventListener("keydown", e));
    };
    window.addEventListener("keydown", e);
  }
  connectedCallback() {
    super.connectedCallback(), this.min && this.min > this.value && (this._value = this.min), this.max && this.max < this.value && (this._value = this.max);
  }
  /**
   * Sets focus to the input element of the number input component.
   * This method is useful for programmatically focusing the input element, for example,
   * in response to a user action or to emphasize the input in the UI.
   *
   * If the input element reference is not available (not yet rendered or disconnected),
   * this method will do nothing.
   */
  focus() {
    const { value: t } = this._input;
    t && t.focus();
  }
  render() {
    const t = y`
      ${this.pref || this.icon ? y`<bim-label
            style="pointer-events: auto"
            @mousedown=${this.onSliderMouseDown}
            .icon=${this.icon}
            >${this.pref}</bim-label
          >` : null}
      <input
        ${Z(this._input)}
        type="text"
        aria-label=${this.label || this.name || "Number Input"}
        size="1"
        @input=${(a) => a.stopPropagation()}
        @change=${this.onChange}
        @blur=${this.onBlur}
        @focus=${this.onFocus}
        .value=${this.value.toString()}
      />
      ${this.suffix ? y`<bim-label
            style="pointer-events: auto"
            @mousedown=${this.onSliderMouseDown}
            >${this.suffix}</bim-label
          >` : null}
    `, e = this.min ?? -1 / 0, s = this.max ?? 1 / 0, n = 100 * (this.value - e) / (s - e), o = y`
      <style>
        .slider-indicator {
          width: ${`${n}%`};
        }
      </style>
      <div class="slider" @mousedown=${this.onSliderMouseDown}>
        <div class="slider-indicator"></div>
        ${this.pref || this.icon ? y`<bim-label
              style="z-index: 1; margin-right: 0.125rem"
              .icon=${this.icon}
              >${`${this.pref}: `}</bim-label
            >` : null}
        <bim-label style="z-index: 1;">${this.value}</bim-label>
        ${this.suffix ? y`<bim-label style="z-index: 1;">${this.suffix}</bim-label>` : null}
      </div>
    `, r = `${this.label || this.name || this.pref ? `${this.label || this.name || this.pref}: ` : ""}${this.value}${this.suffix ?? ""}`;
    return y`
      <bim-input
        title=${r}
        .label=${this.label}
        .icon=${this.icon}
        .vertical=${this.vertical}
      >
        ${this.slider ? o : t}
      </bim-input>
    `;
  }
};
Eo.styles = O`
    :host {
      --bim-input--bgc: var(
        --bim-number-input--bgc,
        var(--bim-ui_bg-contrast-20)
      );
      --bim-input--olw: var(--bim-number-input--olw, 2px);
      --bim-input--olc: var(--bim-number-input--olc, transparent);
      --bim-input--bdrs: var(--bim-number-input--bdrs, var(--bim-ui_size-4xs));
      --bim-input--p: 0 0.375rem;
      flex: 1;
      display: block;
    }

    :host(:focus) {
      --bim-input--olw: var(--bim-number-input--olw, 2px);
      --bim-input--olc: var(
        --bim-number-input¡focus--c,
        var(--bim-ui_accent-base)
      );
    }

    :host(:not([slider])) bim-label {
      --bim-label--c: var(
        --bim-number-input_affixes--c,
        var(--bim-ui_bg-contrast-60)
      );
      --bim-label--fz: var(
        --bim-number-input_affixes--fz,
        var(--bim-ui_size-xs)
      );
    }

    p {
      margin: 0;
      padding: 0;
    }

    input {
      background-color: transparent;
      outline: none;
      border: none;
      padding: 0;
      flex-grow: 1;
      text-align: right;
      font-family: inherit;
      font-feature-settings: inherit;
      font-variation-settings: inherit;
      font-size: var(--bim-number-input--fz, var(--bim-ui_size-xs));
      color: var(--bim-number-input--c, var(--bim-ui_bg-contrast-100));
    }

    :host([suffix]:not([pref])) input {
      text-align: left;
    }

    :host([slider]) {
      --bim-input--p: 0;
    }

    :host([slider]) .slider {
      --bim-label--c: var(--bim-ui_bg-contrast-100);
    }

    .slider {
      position: relative;
      display: flex;
      justify-content: center;
      width: 100%;
      height: 100%;
      padding: 0 0.5rem;
    }

    .slider-indicator {
      height: 100%;
      background-color: var(--bim-ui_main-base);
      position: absolute;
      top: 0;
      left: 0;
      border-radius: var(--bim-input--bdrs, var(--bim-ui_size-4xs));
    }

    bim-input {
      display: flex;
    }

    bim-label {
      pointer-events: none;
    }
  `;
var V = Eo;
Q([
  f({ type: String, reflect: true })
], V.prototype, "name", 2);
Q([
  f({ type: String, reflect: true })
], V.prototype, "icon", 2);
Q([
  f({ type: String, reflect: true })
], V.prototype, "label", 2);
Q([
  f({ type: String, reflect: true })
], V.prototype, "pref", 2);
Q([
  f({ type: Number, reflect: true })
], V.prototype, "min", 2);
Q([
  f({ type: Number, reflect: true })
], V.prototype, "value", 1);
Q([
  f({ type: Number, reflect: true })
], V.prototype, "step", 2);
Q([
  f({ type: Number, reflect: true })
], V.prototype, "sensitivity", 2);
Q([
  f({ type: Number, reflect: true })
], V.prototype, "max", 2);
Q([
  f({ type: String, reflect: true })
], V.prototype, "suffix", 2);
Q([
  f({ type: Boolean, reflect: true })
], V.prototype, "vertical", 2);
Q([
  f({ type: Boolean, reflect: true })
], V.prototype, "slider", 2);
var Bl = Object.defineProperty;
var Ul = Object.getOwnPropertyDescriptor;
var He = (i, t, e, s) => {
  for (var n = s > 1 ? void 0 : s ? Ul(t, e) : t, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = (s ? r(t, e, n) : r(n)) || n);
  return s && n && Bl(t, e, n), n;
};
var Ao = class extends k {
  constructor() {
    super(...arguments), this.onValueChange = new Event("change"), this._hidden = false, this.headerHidden = false, this.activationButton = document.createElement("bim-button");
  }
  set hidden(t) {
    this._hidden = t, this.activationButton.active = !t, this.dispatchEvent(new Event("hiddenchange"));
  }
  get hidden() {
    return this._hidden;
  }
  /**
   * The `value` getter computes and returns the current state of the panel's form elements as an object. This property is dynamic and reflects the current input values within the panel. When accessed, it traverses the panel's child elements, collecting values from those that have a `name` or `label` attribute, and constructs an object where each key corresponds to the `name` or `label` of the element, and the value is the element's value. This property is particularly useful for forms or interactive panels where the user's input needs to be retrieved programmatically. The value returned is a snapshot of the panel's state at the time of access, and it does not maintain a live link to the input elements.
   *
   * @type {Record<string, any>}
   * @default {}
   * @example <bim-panel></bim-panel> <!-- Access via JavaScript to get value -->
   * @example
   * const panel = document.createElement('bim-panel');
   * document.body.appendChild(panel);
   * console.log(panel.value); // Logs the current value object of the panel
   */
  get value() {
    return li(this);
  }
  /**
   * The `value` setter allows programmatically updating the values of the panel's form elements. When a data object is passed to this property, it attempts to match the object's keys with the `name` or `label` attributes of the panel's child elements. If a match is found, the corresponding element's value is updated to the value associated with the key in the data object. This property is useful for initializing the panel with specific data or updating its state based on external inputs. Note that this operation does not affect elements without a matching `name` or `label`, and it only updates the values of elements that are direct children of the panel.
   *
   * @type {Record<string, any>}
   * @example <bim-panel></bim-panel> <!-- Set value via JavaScript -->
   * @example
   * const panel = document.createElement('bim-panel');
   * document.body.appendChild(panel);
   * panel.value = { 'input-name': 'John Doe', 'checkbox-name': true };
   */
  set value(t) {
    const e = [...this.children];
    for (const s in t) {
      const n = e.find((r) => {
        const a = r;
        return a.name === s || a.label === s;
      });
      if (!n)
        continue;
      const o = n;
      o.value = t[s];
    }
  }
  connectedCallback() {
    super.connectedCallback(), this.activationButton.active = !this.hidden, this.activationButton.onclick = () => this.hidden = !this.hidden;
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this.activationButton.remove();
  }
  /**
   * Collapses all `bim-panel-section` elements within the panel.
   * This method iterates over each `bim-panel-section` found within the panel's DOM and sets their `collapsed` property to `true`,
   * effectively hiding their content from view. This can be used to programmatically minimize the space taken up by sections
   * within the panel, making the panel more compact or to hide details that are not immediately necessary.
   */
  collapseSections() {
    const t = this.querySelectorAll("bim-panel-section");
    for (const e of t)
      e.collapsed = true;
  }
  /**
   * Expands all `bim-panel-section` elements within the panel.
   * This method iterates over each `bim-panel-section` found within the panel's DOM and sets their `collapsed` property to `false`,
   * effectively showing their content. This can be used to programmatically reveal the content of sections within the panel,
   * making the panel more informative or to display details that are necessary for the user.
   */
  expandSections() {
    const t = this.querySelectorAll("bim-panel-section");
    for (const e of t)
      e.collapsed = false;
  }
  render() {
    return this.activationButton.icon = this.icon, this.activationButton.label = this.label || this.name, this.activationButton.tooltipTitle = this.label || this.name, y`
      <div class="parent">
        ${this.label || this.name || this.icon ? y`<bim-label .icon=${this.icon}>${this.label}</bim-label>` : null}
        <div class="sections">
          <slot></slot>
        </div>
      </div>
    `;
  }
};
Ao.styles = [
  Lt.scrollbar,
  O`
      :host {
        display: flex;
        border-radius: var(--bim-ui_size-base);
        background-color: var(--bim-ui_bg-base);
        overflow: auto;
      }

      :host([hidden]) {
        display: none;
      }

      .parent {
        display: flex;
        flex: 1;
        flex-direction: column;
        pointer-events: auto;
        overflow: auto;
      }

      .parent bim-label {
        --bim-label--c: var(--bim-panel--c, var(--bim-ui_bg-contrast-80));
        --bim-label--fz: var(--bim-panel--fz, var(--bim-ui_size-sm));
        font-weight: 600;
        padding: 1rem;
        flex-shrink: 0;
        border-bottom: 1px solid var(--bim-ui_bg-contrast-20);
      }

      :host([header-hidden]) .parent bim-label {
        display: none;
      }

      .sections {
        display: flex;
        flex-direction: column;
        overflow: auto;
      }

      ::slotted(bim-panel-section:not(:last-child)) {
        border-bottom: 1px solid var(--bim-ui_bg-contrast-20);
      }
    `
];
var ie = Ao;
He([
  f({ type: String, reflect: true })
], ie.prototype, "icon", 2);
He([
  f({ type: String, reflect: true })
], ie.prototype, "name", 2);
He([
  f({ type: String, reflect: true })
], ie.prototype, "label", 2);
He([
  f({ type: Boolean, reflect: true })
], ie.prototype, "hidden", 1);
He([
  f({ type: Boolean, attribute: "header-hidden", reflect: true })
], ie.prototype, "headerHidden", 2);
var Vl = Object.defineProperty;
var Fe = (i, t, e, s) => {
  for (var n = void 0, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = r(t, e, n) || n);
  return n && Vl(t, e, n), n;
};
var So = class extends k {
  constructor() {
    super(...arguments), this.onValueChange = new Event("change");
  }
  /**
   * The `value` getter computes and returns the current state of the panel section's form elements as an object. This object's keys are the `name` or `label` attributes of the child elements, and the values are the corresponding values of these elements. This property is particularly useful for retrieving a consolidated view of the user's input or selections within the panel section. When the value of any child element changes, the returned object from this getter will reflect those changes, providing a dynamic snapshot of the panel section's state. Note that this property does not have a default value as it dynamically reflects the current state of the panel section's form elements.
   * @type {Record<string, any>}
   * @example <bim-panel-section></bim-panel-section> <!-- Usage in HTML not directly applicable as this is a getter -->
   * @example
   * const section = document.createElement('bim-panel-section');
   * console.log(section.value); // Logs the current value object
   */
  get value() {
    return li(this);
  }
  /**
   * The `value` setter allows programmatically updating the values of the panel section's child elements. It accepts an object where keys correspond to the `name` or `label` attributes of the child elements, and the values are the new values to be set for these elements. This property is useful for initializing the panel section with specific values or updating its state based on external data. When the property changes, the corresponding child elements' values are updated to reflect the new state. This does not have a default value as it is a method for updating child elements' values.
   * @type {Record<string, any>}
   * @default undefined
   * @example <bim-panel-section></bim-panel-section> <!-- Usage in HTML not directly applicable as this is a setter -->
   * @example
   * const section = document.createElement('bim-panel-section');
   * section.value = { 'user-settings': 'John Doe' }; // Programmatically sets the value of a child element named 'user-settings'
   */
  set value(t) {
    const e = [...this.children];
    for (const s in t) {
      const n = e.find((r) => {
        const a = r;
        return a.name === s || a.label === s;
      });
      if (!n)
        continue;
      const o = n;
      o.value = t[s];
    }
  }
  onHeaderClick() {
    this.fixed || (this.collapsed = !this.collapsed);
  }
  render() {
    const t = this.label || this.icon || this.name || this.fixed, e = y`<svg
      xmlns="http://www.w3.org/2000/svg"
      height="1.125rem"
      viewBox="0 0 24 24"
      width="1.125rem"
    >
      <path d="M0 0h24v24H0V0z" fill="none" />
      <path d="M7.41 8.59 12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z" />
    </svg>`, s = y`<svg
      xmlns="http://www.w3.org/2000/svg"
      height="1.125rem"
      viewBox="0 0 24 24"
      width="1.125rem"
    >
      <path d="M0 0h24v24H0z" fill="none" />
      <path d="M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z" />
    </svg>`, n = this.collapsed ? e : s, o = y`
      <div
        class="header"
        title=${this.label ?? ""}
        @click=${this.onHeaderClick}
      >
        ${this.label || this.icon || this.name ? y`<bim-label .icon=${this.icon}>${this.label}</bim-label>` : null}
        ${this.fixed ? null : n}
      </div>
    `;
    return y`
      <div class="parent">
        ${t ? o : null}
        <div class="components">
          <slot></slot>
        </div>
      </div>
    `;
  }
};
So.styles = [
  Lt.scrollbar,
  O`
      :host {
        display: block;
        pointer-events: auto;
      }

      :host(:not([fixed])) .header:hover {
        --bim-label--c: var(--bim-ui_accent-base);
        color: var(--bim-ui_accent-base);
        cursor: pointer;
      }

      :host(:not([fixed])) .header:hover svg {
        fill: var(--bim-ui_accent-base);
      }

      .header {
        --bim-label--fz: var(--bim-ui_size-sm);
        --bim-label--c: var(--bim-ui_bg-contrast-80);
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-weight: 600;
        height: 1.5rem;
        padding: 0.75rem 1rem;
      }

      .header svg {
        fill: var(--bim-ui_bg-contrast-80);
      }

      .title {
        display: flex;
        align-items: center;
        column-gap: 0.5rem;
      }

      .title p {
        font-size: var(--bim-ui_size-sm);
      }

      .components {
        display: flex;
        flex-direction: column;
        row-gap: 0.75rem;
        padding: 0.125rem 1rem 1rem;
      }

      :host(:not([fixed])[collapsed]) .components {
        display: none;
      }

      bim-label {
        pointer-events: none;
      }
    `
];
var ne = So;
Fe([
  f({ type: String, reflect: true })
], ne.prototype, "icon");
Fe([
  f({ type: String, reflect: true })
], ne.prototype, "label");
Fe([
  f({ type: String, reflect: true })
], ne.prototype, "name");
Fe([
  f({ type: Boolean, reflect: true })
], ne.prototype, "fixed");
Fe([
  f({ type: Boolean, reflect: true })
], ne.prototype, "collapsed");
var Wl = Object.defineProperty;
var Be = (i, t, e, s) => {
  for (var n = void 0, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = r(t, e, n) || n);
  return n && Wl(t, e, n), n;
};
var ko = class extends k {
  constructor() {
    super(...arguments), this.vertical = false, this.onValueChange = new Event("change"), this._canEmitEvents = false, this._value = document.createElement("bim-option"), this.onOptionClick = (t) => {
      this._value = t.target, this.dispatchEvent(this.onValueChange);
      for (const e of this.children)
        e instanceof L && (e.checked = e === t.target);
    };
  }
  get _options() {
    return [...this.querySelectorAll("bim-option")];
  }
  /**
   * Sets the value of the selector.
   * It finds the matching option based on the provided value and sets it as the selected option.
   * If no matching option is found, it does nothing.
   *
   * @param value - The value to set for the selector.
   */
  set value(t) {
    const e = this.findOption(t);
    if (e) {
      for (const s of this._options)
        s.checked = s === e;
      this._value = e, this._canEmitEvents && this.dispatchEvent(this.onValueChange);
    }
  }
  get value() {
    return this._value.value;
  }
  onSlotChange(t) {
    const e = t.target.assignedElements();
    for (const s of e)
      s instanceof L && (s.noMark = true, s.removeEventListener("click", this.onOptionClick), s.addEventListener("click", this.onOptionClick));
  }
  findOption(t) {
    return this._options.find((e) => e instanceof L ? e.label === t || e.value === t : false);
  }
  firstUpdated() {
    const t = [...this.children].find(
      (e) => e instanceof L && e.checked
    );
    t && (this._value = t);
  }
  render() {
    return y`
      <bim-input
        .vertical=${this.vertical}
        .label=${this.label}
        .icon=${this.icon}
      >
        <slot @slotchange=${this.onSlotChange}></slot>
      </bim-input>
    `;
  }
};
ko.styles = O`
    :host {
      --bim-input--bgc: var(--bim-ui_bg-contrast-20);
      --bim-input--g: 0;
      --bim-option--jc: center;
      flex: 1;
      display: block;
    }

    ::slotted(bim-option) {
      border-radius: 0;
    }

    ::slotted(bim-option[checked]) {
      --bim-label--c: var(--bim-ui_main-contrast);
      background-color: var(--bim-ui_main-base);
    }
  `;
var se = ko;
Be([
  f({ type: String, reflect: true })
], se.prototype, "name");
Be([
  f({ type: String, reflect: true })
], se.prototype, "icon");
Be([
  f({ type: String, reflect: true })
], se.prototype, "label");
Be([
  f({ type: Boolean, reflect: true })
], se.prototype, "vertical");
Be([
  Ne()
], se.prototype, "_value");
var Gl = Object.defineProperty;
var ql = (i, t, e, s) => {
  for (var n = void 0, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = r(t, e, n) || n);
  return n && Gl(t, e, n), n;
};
var Oo = class extends k {
  constructor() {
    super(...arguments), this.column = "", this.columnIndex = 0, this.rowData = {};
  }
  get data() {
    return this.column ? this.rowData[this.column] : null;
  }
  render() {
    return y`
      <style>
        :host {
          grid-area: ${this.column ?? "unset"};
        }
      </style>
      <slot></slot>
    `;
  }
};
Oo.styles = O`
    :host {
      padding: 0.25rem 1rem;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    :host([data-column-index="0"]:not([data-cell-header])) {
      justify-content: normal;
    }

    :host([data-column-index="0"]:not([data-cell-header]))
      ::slotted(bim-label) {
      text-align: left;
    }

    ::slotted(*) {
      --bim-input--bgc: transparent;
      --bim-input--olc: var(--bim-ui_bg-contrast-20);
      --bim-input--olw: 1px;
    }

    ::slotted(bim-input) {
      --bim-input--olw: 0;
    }

    ::slotted(bim-label) {
      white-space: normal;
      text-align: center;
    }
  `;
var To = Oo;
ql([
  f({ type: String, reflect: true })
], To.prototype, "column");
var Yl = Object.defineProperty;
var Xl = (i, t, e, s) => {
  for (var n = void 0, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = r(t, e, n) || n);
  return n && Yl(t, e, n), n;
};
var Io = class extends k {
  constructor() {
    super(...arguments), this._groups = [], this.data = [], this.table = this.closest("bim-table");
  }
  toggleGroups(t, e = false) {
    for (const s of this._groups)
      s.childrenHidden = typeof t > "u" ? !s.childrenHidden : !t, e && s.toggleChildren(t, e);
  }
  render() {
    return this._groups = [], y`
      <slot></slot>
      ${this.data.map((t) => {
      const e = document.createElement(
        "bim-table-group"
      );
      return this._groups.push(e), e.table = this.table, e.data = t, e;
    })}
    `;
  }
};
Io.styles = O`
    :host {
      position: relative;
      grid-area: Children;
    }

    :host([hidden]) {
      display: none;
    }

    ::slotted(.branch.branch-vertical) {
      top: 0;
      bottom: 1.125rem;
    }
  `;
var Po = Io;
Xl([
  f({ type: Array, attribute: false })
], Po.prototype, "data");
var Jl = Object.defineProperty;
var Ql = (i, t, e, s) => {
  for (var n = void 0, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = r(t, e, n) || n);
  return n && Jl(t, e, n), n;
};
var Ro = class extends k {
  constructor() {
    super(...arguments), this.data = { data: {} }, this.childrenHidden = true, this.table = this.closest("bim-table");
  }
  connectedCallback() {
    super.connectedCallback(), this.table && this.table.expanded ? this.childrenHidden = false : this.childrenHidden = true;
  }
  toggleChildren(t, e = false) {
    this._children && (this.childrenHidden = typeof t > "u" ? !this.childrenHidden : !t, e && this._children.toggleGroups(t, e));
  }
  render() {
    var t, e;
    const s = ((t = this.table) == null ? void 0 : t.getGroupIndentation(this.data)) ?? 0, n = y`
      <style>
        .branch-vertical {
          left: ${s + 0.5625}rem;
        }
      </style>
      <div class="branch branch-vertical"></div>
    `, o = document.createDocumentFragment();
    Xt(n, o);
    const r = document.createElement("div");
    r.classList.add("branch", "branch-horizontal"), r.style.left = `${s - 1 + 0.5625}rem`;
    const a = document.createElementNS(
      "http://www.w3.org/2000/svg",
      "svg"
    );
    a.setAttribute("height", "9.5"), a.setAttribute("width", "7.5"), a.setAttribute("viewBox", "0 0 4.6666672 7.3333333");
    const l = document.createElementNS(
      "http://www.w3.org/2000/svg",
      "path"
    );
    l.setAttribute(
      "d",
      "m 1.7470835,6.9583848 2.5899999,-2.59 c 0.39,-0.39 0.39,-1.02 0,-1.41 L 1.7470835,0.36838483 c -0.63,-0.62000003 -1.71000005,-0.18 -1.71000005,0.70999997 v 5.17 c 0,0.9 1.08000005,1.34 1.71000005,0.71 z"
    ), a.append(l);
    const u = document.createElementNS(
      "http://www.w3.org/2000/svg",
      "svg"
    );
    u.setAttribute("height", "6.5"), u.setAttribute("width", "9.5"), u.setAttribute("viewBox", "0 0 5.9111118 5.0175439");
    const h = document.createElementNS(
      "http://www.w3.org/2000/svg",
      "path"
    );
    h.setAttribute(
      "d",
      "M -0.33616196,1.922522 2.253838,4.5125219 c 0.39,0.39 1.02,0.39 1.41,0 L 6.2538379,1.922522 c 0.6200001,-0.63 0.18,-1.71000007 -0.7099999,-1.71000007 H 0.37383804 c -0.89999997,0 -1.33999997,1.08000007 -0.71,1.71000007 z"
    ), u.append(h);
    const d = document.createElement("div");
    d.addEventListener("click", (g) => {
      g.stopPropagation(), this.toggleChildren();
    }), d.classList.add("caret"), d.style.left = `${0.125 + s}rem`, this.childrenHidden ? d.append(a) : d.append(u);
    const c = document.createElement("bim-table-row");
    this.data.children && !this.childrenHidden && c.append(o), c.table = this.table, c.data = this.data.data, (e = this.table) == null || e.dispatchEvent(
      new CustomEvent("rowcreated", { detail: { row: c } })
    ), this.data.children && c.append(d), s !== 0 && (!this.data.children || this.childrenHidden) && c.append(r);
    let p;
    if (this.data.children) {
      p = document.createElement("bim-table-children"), this._children = p, p.table = this.table, p.data = this.data.children;
      const g = document.createDocumentFragment();
      Xt(n, g), p.append(g);
    }
    return y`
      <div class="parent">${c} ${this.childrenHidden ? null : p}</div>
    `;
  }
};
Ro.styles = O`
    :host {
      position: relative;
    }

    .parent {
      display: grid;
      grid-template-areas: "Data" "Children";
    }

    .branch {
      position: absolute;
      z-index: 1;
    }

    .branch-vertical {
      border-left: 1px dotted var(--bim-ui_bg-contrast-40);
    }

    .branch-horizontal {
      top: 50%;
      width: 1rem;
      border-bottom: 1px dotted var(--bim-ui_bg-contrast-40);
    }

    .caret {
      position: absolute;
      z-index: 2;
      transform: translateY(-50%) rotate(0deg);
      top: 50%;
      display: flex;
      width: 0.95rem;
      height: 0.95rem;
      justify-content: center;
      align-items: center;
      cursor: pointer;
    }

    .caret svg {
      fill: var(--bim-ui_bg-contrast-60);
    }
  `;
var No = Ro;
Ql([
  f({ type: Boolean, attribute: "children-hidden", reflect: true })
], No.prototype, "childrenHidden");
var Zl = Object.defineProperty;
var Ue = (i, t, e, s) => {
  for (var n = void 0, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = r(t, e, n) || n);
  return n && Zl(t, e, n), n;
};
var Mo = class extends k {
  constructor() {
    super(...arguments), this.columns = [], this.hiddenColumns = [], this.data = {}, this.isHeader = false, this.table = this.closest("bim-table"), this.onTableColumnsChange = () => {
      this.table && (this.columns = this.table.columns);
    }, this.onTableColumnsHidden = () => {
      this.table && (this.hiddenColumns = this.table.hiddenColumns);
    }, this._observer = new IntersectionObserver(
      (t) => {
        this._intersecting = t[0].isIntersecting;
      },
      { rootMargin: "36px" }
    );
  }
  get _columnNames() {
    return this.columns.filter(
      (t) => !this.hiddenColumns.includes(t.name)
    ).map((t) => t.name);
  }
  get _columnWidths() {
    return this.columns.filter(
      (t) => !this.hiddenColumns.includes(t.name)
    ).map((t) => t.width);
  }
  connectedCallback() {
    super.connectedCallback(), this._observer.observe(this), this.table && (this.columns = this.table.columns, this.hiddenColumns = this.table.hiddenColumns, this.table.addEventListener("columnschange", this.onTableColumnsChange), this.table.addEventListener("columnshidden", this.onTableColumnsHidden));
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this._observer.unobserve(this), this.table && (this.columns = [], this.hiddenColumns = [], this.table.removeEventListener("columnschange", this.onTableColumnsChange), this.table.removeEventListener("columnshidden", this.onTableColumnsHidden));
  }
  compute() {
    var t, e, s;
    const n = ((t = this.table) == null ? void 0 : t.getRowIndentation(this.data)) ?? 0, o = this.isHeader ? this.data : ((e = this.table) == null ? void 0 : e.computeRowDeclaration(this.data)) ?? this.data, r = [];
    for (const a in o) {
      if (this.hiddenColumns.includes(a))
        continue;
      const l = o[a];
      let u;
      if (typeof l == "string" || typeof l == "boolean" || typeof l == "number" ? (u = document.createElement("bim-label"), u.textContent = String(l)) : l instanceof HTMLElement ? u = l : (u = document.createDocumentFragment(), Xt(l, u)), !u)
        continue;
      const h = document.createElement("bim-table-cell");
      h.append(u), h.column = a, this._columnNames.indexOf(a) === 0 && !this.isHeader && (h.style.marginLeft = `${n + 0.125}rem`);
      const d = this._columnNames.indexOf(a);
      h.setAttribute("data-column-index", String(d)), h.toggleAttribute("data-cell-header", this.isHeader), h.rowData = this.data, (s = this.table) == null || s.dispatchEvent(
        new CustomEvent("cellcreated", {
          detail: { cell: h }
        })
      ), r.push(h);
    }
    return this.style.gridTemplateAreas = `"${this._columnNames.join(" ")}"`, this.style.gridTemplateColumns = `${this._columnWidths.join(" ")}`, y`
      ${r}
      <slot></slot>
    `;
  }
  render() {
    return y`${this._intersecting ? this.compute() : y``}`;
  }
};
Mo.styles = O`
    :host {
      position: relative;
      grid-area: Data;
      display: grid;
      min-height: 2.25rem;
    }

    ::slotted(.branch.branch-vertical) {
      top: 50%;
      bottom: 0;
    }
  `;
var oe = Mo;
Ue([
  f({ attribute: false })
], oe.prototype, "columns");
Ue([
  f({ attribute: false })
], oe.prototype, "hiddenColumns");
Ue([
  f({ attribute: false })
], oe.prototype, "data");
Ue([
  f({ type: Boolean, attribute: "is-header", reflect: true })
], oe.prototype, "isHeader");
Ue([
  Ne()
], oe.prototype, "_intersecting");
var Kl = Object.defineProperty;
var tc = Object.getOwnPropertyDescriptor;
var re = (i, t, e, s) => {
  for (var n = s > 1 ? void 0 : s ? tc(t, e) : t, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = (s ? r(t, e, n) : r(n)) || n);
  return s && n && Kl(t, e, n), n;
};
var Lo = class extends k {
  constructor() {
    super(...arguments), this._columnsChange = new Event("columnschange"), this._filteredData = [], this.headersHidden = false, this.minColWidth = "4rem", this._columns = [], this._textDelimiters = {
      comma: ",",
      tab: "	"
    }, this._queryString = null, this._data = [], this.expanded = false, this.preserveStructureOnFilter = false, this.indentationInText = false, this.dataTransform = {}, this._onColumnsHidden = new Event("columnshidden"), this._hiddenColumns = [], this._stringFilterFunction = (t, e) => Object.values(e.data).some((s) => String(s).toLowerCase().includes(t.toLowerCase())), this._queryFilterFunction = (t, e) => {
      let s = false;
      const n = Yi(t) ?? [];
      for (const o of n) {
        if ("queries" in o) {
          s = false;
          break;
        }
        const { condition: r, value: a } = o;
        let { key: l } = o;
        if (l.startsWith("[") && l.endsWith("]")) {
          const u = l.replace("[", "").replace("]", "");
          l = u, s = Object.keys(e.data).filter((h) => h.includes(u)).map(
            (h) => os(e.data[h], r, a)
          ).some((h) => h);
        } else
          s = os(e.data[l], r, a);
        if (!s)
          break;
      }
      return s;
    };
  }
  set columns(t) {
    const e = [];
    for (const s of t) {
      const n = typeof s == "string" ? { name: s, width: `minmax(${this.minColWidth}, 1fr)` } : s;
      e.push(n);
    }
    this._columns = e, this.computeMissingColumns(this.data), this.dispatchEvent(this._columnsChange);
  }
  get columns() {
    return this._columns;
  }
  get _headerRowData() {
    const t = {};
    for (const e of this.columns)
      if (typeof e == "string")
        t[e] = e;
      else {
        const { name: s } = e;
        t[s] = s;
      }
    return t;
  }
  /**
   * Getter for the `value` property.
   * Returns the filtered data if a search string is provided, otherwise returns the original data.
   *
   * @example
   * ```typescript
   * const tableValue = table.value;
   * console.log(tableValue); // Output: The filtered or original data.
   * ```
   */
  get value() {
    return this._filteredData;
  }
  /**
   * Sets the search string for filtering the table data.
   * This property allows you to filter the table data based on a search string.
   * If a search string is provided, the table will only display rows that match the search criteria.
   * The search criteria can be a simple string or a complex query.
   * If a simple string is provided, the table will filter rows based on the string's presence in any column.
   * If a complex query is provided, the table will filter rows based on the query's conditions and values.
   *
   * @example
   * ```typescript
   * table.queryString = "example";
   * ```
   *
   * @example
   * ```typescript
   * table.queryString = "column1="Jhon Doe" & column2=20";
   * ```
   */
  set queryString(t) {
    this._queryString = t && t.trim() !== "" ? t.trim() : null, this.updateFilteredData();
  }
  get queryString() {
    return this._queryString;
  }
  set data(t) {
    this._data = t, this.updateFilteredData(), this.computeMissingColumns(t) && (this.columns = this._columns);
  }
  get data() {
    return this._data;
  }
  get dataAsync() {
    return new Promise((t) => {
      setTimeout(() => {
        t(this.data);
      });
    });
  }
  set hiddenColumns(t) {
    this._hiddenColumns = t, setTimeout(() => {
      this.dispatchEvent(this._onColumnsHidden);
    });
  }
  get hiddenColumns() {
    return this._hiddenColumns;
  }
  updateFilteredData() {
    this.queryString ? (Yi(this.queryString) ? (this.filterFunction = this._queryFilterFunction, this._filteredData = this.filter(this.queryString)) : (this.filterFunction = this._stringFilterFunction, this._filteredData = this.filter(this.queryString)), this.preserveStructureOnFilter && (this._expandedBeforeFilter === void 0 && (this._expandedBeforeFilter = this.expanded), this.expanded = true)) : (this.preserveStructureOnFilter && this._expandedBeforeFilter !== void 0 && (this.expanded = this._expandedBeforeFilter, this._expandedBeforeFilter = void 0), this._filteredData = this.data);
  }
  computeMissingColumns(t) {
    let e = false;
    for (const s of t) {
      const { children: n, data: o } = s;
      for (const r in o)
        this._columns.map((a) => typeof a == "string" ? a : a.name).includes(r) || (this._columns.push({
          name: r,
          width: `minmax(${this.minColWidth}, 1fr)`
        }), e = true);
      if (n) {
        const r = this.computeMissingColumns(n);
        r && !e && (e = r);
      }
    }
    return e;
  }
  generateText(t = "comma", e = this.value, s = "", n = true) {
    const o = this._textDelimiters[t];
    let r = "";
    const a = this.columns.map((l) => l.name);
    if (n) {
      this.indentationInText && (r += `Indentation${o}`);
      const l = `${a.join(o)}
`;
      r += l;
    }
    for (const [l, u] of e.entries()) {
      const { data: h, children: d } = u, c = this.indentationInText ? `${s}${l + 1}${o}` : "", p = a.map((w) => h[w] ?? ""), g = `${c}${p.join(o)}
`;
      r += g, d && (r += this.generateText(
        t,
        u.children,
        `${s}${l + 1}.`,
        false
      ));
    }
    return r;
  }
  /**
   * A getter function that generates a CSV (Comma Separated Values) representation of the table data.
   *
   * @returns A string containing the CSV representation of the table data.
   *
   * @example
   * ```typescript
   * const csvData = table.csv;
   * console.log(csvData); // Output: "Column 1,Column 2\nValue 1,Value 2\nValue 3,Value 4"
   * ```
   */
  get csv() {
    return this.generateText("comma");
  }
  /**
   * A getter function that generates a Tab Separated Values (TSV) representation of the table data.
   *
   * @returns A string containing the TSV representation of the table data.
   *
   * @example
   * ```typescript
   * const tsvData = table.tsv;
   * console.log(tsvData); // Output: "Column 1\tColumn 2\nValue 1\tValue 2\nValue 3\tValue 4"
   * ```
   */
  get tsv() {
    return this.generateText("tab");
  }
  computeRowDeclaration(t) {
    const e = {};
    for (const s in t) {
      const n = this.dataTransform[s];
      n ? e[s] = n(t[s], t) : e[s] = t[s];
    }
    return e;
  }
  /**
   * The `downloadData` method is used to download the table data in different formats.
   *
   * @param fileName - The name of the downloaded file. Default is "BIM Table Data".
   * @param format - The format of the downloaded file. Can be "json", "tsv", or "csv". Default is "json".
   *
   * @returns - This method does not return any value.
   *
   * @example
   * ```typescript
   * table.downloadData("MyTableData", "tsv");
   * ```
   */
  downloadData(t = "BIM Table Data", e = "json") {
    let s = null;
    if (e === "json" && (s = new File(
      [JSON.stringify(this.value, void 0, 2)],
      `${t}.json`
    )), e === "csv" && (s = new File([this.csv], `${t}.csv`)), e === "tsv" && (s = new File([this.tsv], `${t}.tsv`)), !s)
      return;
    const n = document.createElement("a");
    n.href = URL.createObjectURL(s), n.download = s.name, n.click(), URL.revokeObjectURL(n.href);
  }
  getRowIndentation(t, e = this.value, s = 0) {
    for (const n of e) {
      if (n.data === t)
        return s;
      if (n.children) {
        const o = this.getRowIndentation(
          t,
          n.children,
          s + 1
        );
        if (o !== null)
          return o;
      }
    }
    return null;
  }
  getGroupIndentation(t, e = this.value, s = 0) {
    for (const n of e) {
      if (n === t)
        return s;
      if (n.children) {
        const o = this.getGroupIndentation(
          t,
          n.children,
          s + 1
        );
        if (o !== null)
          return o;
      }
    }
    return null;
  }
  connectedCallback() {
    super.connectedCallback(), this.dispatchEvent(new Event("connected"));
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this.dispatchEvent(new Event("disconnected"));
  }
  filter(t, e = this.filterFunction ?? this._stringFilterFunction, s = this.data) {
    const n = [];
    for (const o of s)
      if (e(t, o)) {
        if (this.preserveStructureOnFilter) {
          const r = { data: o.data };
          if (o.children) {
            const a = this.filter(
              t,
              e,
              o.children
            );
            a.length && (r.children = a);
          }
          n.push(r);
        } else if (n.push({ data: o.data }), o.children) {
          const r = this.filter(
            t,
            e,
            o.children
          );
          n.push(...r);
        }
      } else if (o.children) {
        const r = this.filter(
          t,
          e,
          o.children
        );
        this.preserveStructureOnFilter && r.length ? n.push({
          data: o.data,
          children: r
        }) : n.push(...r);
      }
    return n;
  }
  render() {
    const t = document.createElement("bim-table-row");
    t.table = this, t.isHeader = true, t.data = this._headerRowData, t.style.gridArea = "Header", t.style.position = "sticky", t.style.top = "0", t.style.zIndex = "5";
    const e = document.createElement("bim-table-children");
    return e.table = this, e.data = this.value, e.style.gridArea = "Body", e.style.backgroundColor = "transparent", y`
      <div class="parent">
        ${this.headersHidden ? null : t}
        <div style="overflow-x: hidden; grid-area: Body">${e}</div>
      </div>
    `;
  }
};
Lo.styles = [
  Lt.scrollbar,
  O`
      :host {
        --bim-button--bgc: transparent;
        position: relative;
        overflow: auto;
        display: block;
        pointer-events: auto;
      }

      .parent {
        display: grid;
        grid-template:
          "Header" auto
          "Body" 1fr
          "Footer" auto;
        overflow: auto;
        height: 100%;
      }

      .parent > bim-table-row[is-header] {
        color: var(--bim-table_header--c, var(--bim-ui_bg-contrast-100));
        background-color: var(
          --bim-table_header--bgc,
          var(--bim-ui_bg-contrast-20)
        );
      }

      .controls {
        display: flex;
        gap: 0.375rem;
        flex-wrap: wrap;
        margin-bottom: 0.5rem;
      }
    `
];
var zt = Lo;
re([
  Ne()
], zt.prototype, "_filteredData", 2);
re([
  f({
    type: Boolean,
    attribute: "headers-hidden",
    reflect: true
  })
], zt.prototype, "headersHidden", 2);
re([
  f({ type: String, attribute: "min-col-width", reflect: true })
], zt.prototype, "minColWidth", 2);
re([
  f({ type: Array, attribute: false })
], zt.prototype, "columns", 1);
re([
  f({ type: Array, attribute: false })
], zt.prototype, "data", 1);
re([
  f({ type: Boolean, reflect: true })
], zt.prototype, "expanded", 2);
var ec = Object.defineProperty;
var ic = Object.getOwnPropertyDescriptor;
var yi = (i, t, e, s) => {
  for (var n = s > 1 ? void 0 : s ? ic(t, e) : t, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = (s ? r(t, e, n) : r(n)) || n);
  return s && n && ec(t, e, n), n;
};
var zo = class extends k {
  constructor() {
    super(...arguments), this._defaultName = "__unnamed__", this.name = this._defaultName, this._hidden = false;
  }
  set hidden(t) {
    this._hidden = t, this.dispatchEvent(new Event("hiddenchange"));
  }
  get hidden() {
    return this._hidden;
  }
  connectedCallback() {
    super.connectedCallback();
    const { parentElement: t } = this;
    if (t && this.name === this._defaultName) {
      const e = [...t.children].indexOf(this);
      this.name = `${this._defaultName}${e}`;
    }
  }
  render() {
    return y` <slot></slot> `;
  }
};
zo.styles = O`
    :host {
      display: block;
      height: 100%;
    }

    :host([hidden]) {
      display: none;
    }
  `;
var X = zo;
yi([
  f({ type: String, reflect: true })
], X.prototype, "name", 2);
yi([
  f({ type: String, reflect: true })
], X.prototype, "label", 2);
yi([
  f({ type: String, reflect: true })
], X.prototype, "icon", 2);
yi([
  f({ type: Boolean, reflect: true })
], X.prototype, "hidden", 1);
var nc = Object.defineProperty;
var sc = Object.getOwnPropertyDescriptor;
var ae = (i, t, e, s) => {
  for (var n = s > 1 ? void 0 : s ? sc(t, e) : t, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = (s ? r(t, e, n) : r(n)) || n);
  return s && n && nc(t, e, n), n;
};
var Do = class extends k {
  constructor() {
    super(...arguments), this._switchers = [], this.bottom = false, this.switchersHidden = false, this.floating = false, this.switchersFull = false, this.onTabHiddenChange = (t) => {
      const e = t.target;
      e instanceof X && !e.hidden && (e.removeEventListener("hiddenchange", this.onTabHiddenChange), this.tab = e.name, e.addEventListener("hiddenchange", this.onTabHiddenChange));
    };
  }
  set tab(t) {
    this._tab = t;
    const e = [...this.children], s = e.find(
      (n) => n instanceof X && n.name === t
    );
    for (const n of e) {
      if (!(n instanceof X))
        continue;
      n.hidden = s !== n;
      const o = this.getTabSwitcher(n.name);
      o && o.toggleAttribute("data-active", !n.hidden);
    }
  }
  get tab() {
    return this._tab;
  }
  getTabSwitcher(t) {
    return this._switchers.find(
      (e) => e.getAttribute("data-name") === t
    );
  }
  createSwitchers() {
    this._switchers = [];
    for (const t of this.children) {
      if (!(t instanceof X))
        continue;
      const e = document.createElement("div");
      e.addEventListener("click", () => {
        this.tab === t.name ? this.toggleAttribute("tab", false) : this.tab = t.name;
      }), e.setAttribute("data-name", t.name), e.className = "switcher";
      const s = document.createElement("bim-label");
      s.textContent = t.label ?? "", s.icon = t.icon, e.append(s), this._switchers.push(e);
    }
  }
  onSlotChange(t) {
    this.createSwitchers();
    const e = t.target.assignedElements(), s = e.find((n) => n instanceof X ? this.tab ? n.name === this.tab : !n.hidden : false);
    s && s instanceof X && (this.tab = s.name);
    for (const n of e) {
      if (!(n instanceof X)) {
        n.remove();
        continue;
      }
      n.removeEventListener("hiddenchange", this.onTabHiddenChange), s !== n && (n.hidden = true), n.addEventListener("hiddenchange", this.onTabHiddenChange);
    }
  }
  render() {
    return y`
      <div class="parent">
        <div class="switchers">${this._switchers}</div>
        <div class="content">
          <slot @slotchange=${this.onSlotChange}></slot>
        </div>
      </div>
    `;
  }
};
Do.styles = [
  Lt.scrollbar,
  O`
      * {
        box-sizing: border-box;
      }

      :host {
        background-color: var(--bim-ui_bg-base);
        display: block;
        overflow: auto;
      }

      .parent {
        display: grid;
        grid-template: "switchers" auto "content" 1fr;
        height: 100%;
      }

      :host([bottom]) .parent {
        grid-template: "content" 1fr "switchers" auto;
      }

      .switchers {
        display: flex;
        height: 2.25rem;
        font-weight: 600;
        grid-area: switchers;
      }

      .switcher {
        --bim-label--c: var(--bim-ui_bg-contrast-80);
        background-color: var(--bim-ui_bg-base);
        cursor: pointer;
        pointer-events: auto;
        padding: 0rem 0.75rem;
        display: flex;
        justify-content: center;
      }

      :host([switchers-full]) .switcher {
        flex: 1;
      }

      .switcher:hover,
      .switcher[data-active] {
        --bim-label--c: var(--bim-ui_main-contrast);
        background-color: var(--bim-ui_main-base);
      }

      .switchers bim-label {
        pointer-events: none;
      }

      :host([switchers-hidden]) .switchers {
        display: none;
      }

      .content {
        grid-area: content;
        overflow: auto;
      }

      :host(:not([bottom])) .content {
        border-top: 1px solid var(--bim-ui_bg-contrast-20);
      }

      :host([bottom]) .content {
        border-bottom: 1px solid var(--bim-ui_bg-contrast-20);
      }

      :host(:not([tab])) .content {
        display: none;
      }

      :host([floating]) {
        background-color: transparent;
      }

      :host([floating]) .switchers {
        justify-self: center;
        overflow: auto;
      }

      :host([floating]:not([bottom])) .switchers {
        border-radius: var(--bim-ui_size-2xs) var(--bim-ui_size-2xs) 0 0;
        border-top: 1px solid var(--bim-ui_bg-contrast-20);
        border-left: 1px solid var(--bim-ui_bg-contrast-20);
        border-right: 1px solid var(--bim-ui_bg-contrast-20);
      }

      :host([floating][bottom]) .switchers {
        border-radius: 0 0 var(--bim-ui_size-2xs) var(--bim-ui_size-2xs);
        border-bottom: 1px solid var(--bim-ui_bg-contrast-20);
        border-left: 1px solid var(--bim-ui_bg-contrast-20);
        border-right: 1px solid var(--bim-ui_bg-contrast-20);
      }

      :host([floating]:not([tab])) .switchers {
        border-radius: var(--bim-ui_size-2xs);
        border-bottom: 1px solid var(--bim-ui_bg-contrast-20);
      }

      :host([floating][bottom]:not([tab])) .switchers {
        border-top: 1px solid var(--bim-ui_bg-contrast-20);
      }

      :host([floating]) .content {
        border: 1px solid var(--bim-ui_bg-contrast-20);
        border-radius: var(--bim-ui_size-2xs);
        background-color: var(--bim-ui_bg-base);
      }
    `
];
var Dt = Do;
ae([
  Ne()
], Dt.prototype, "_switchers", 2);
ae([
  f({ type: Boolean, reflect: true })
], Dt.prototype, "bottom", 2);
ae([
  f({ type: Boolean, attribute: "switchers-hidden", reflect: true })
], Dt.prototype, "switchersHidden", 2);
ae([
  f({ type: Boolean, reflect: true })
], Dt.prototype, "floating", 2);
ae([
  f({ type: String, reflect: true })
], Dt.prototype, "tab", 1);
ae([
  f({ type: Boolean, attribute: "switchers-full", reflect: true })
], Dt.prototype, "switchersFull", 2);
var oc = (i) => i ?? M;
var rc = Object.defineProperty;
var ac = Object.getOwnPropertyDescriptor;
var Ct = (i, t, e, s) => {
  for (var n = s > 1 ? void 0 : s ? ac(t, e) : t, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = (s ? r(t, e, n) : r(n)) || n);
  return s && n && rc(t, e, n), n;
};
var jo = class extends k {
  constructor() {
    super(...arguments), this._inputTypes = [
      "date",
      "datetime-local",
      "email",
      "month",
      "password",
      "search",
      "tel",
      "text",
      "time",
      "url",
      "week"
    ], this.value = "", this.vertical = false, this._type = "text", this.onValueChange = new Event("input");
  }
  set type(t) {
    this._inputTypes.includes(t) && (this._type = t);
  }
  get type() {
    return this._type;
  }
  /**
   * Gets the query value derived from the current input value.
   * The `getQuery` function is assumed to be a utility function that takes a string as input
   * and returns a processed query value based on the input.
   *
   * @returns The processed query value derived from the current input value.
   *
   * @example
   * ```typescript
   * const textInput = new TextInput();
   * textInput.value = "Key?Value";
   * console.log(textInput.query);
   * ```
   */
  get query() {
    return Yi(this.value);
  }
  onInputChange(t) {
    t.stopPropagation();
    const e = t.target;
    clearTimeout(this._debounceTimeoutID), this._debounceTimeoutID = setTimeout(() => {
      this.value = e.value, this.dispatchEvent(this.onValueChange);
    }, this.debounce);
  }
  focus() {
    setTimeout(() => {
      var t;
      const e = (t = this.shadowRoot) == null ? void 0 : t.querySelector("input");
      e == null || e.focus();
    });
  }
  render() {
    return y`
      <bim-input
        .name=${this.name}
        .icon=${this.icon}
        .label=${this.label}
        .vertical=${this.vertical}
      >
        <input
          aria-label=${this.label || this.name || "Text Input"}
          .type=${this.type}
          .value=${this.value}
          placeholder=${oc(this.placeholder)}
          @input=${this.onInputChange}
        />
      </bim-input>
    `;
  }
};
jo.styles = O`
    :host {
      --bim-input--bgc: var(--bim-ui_bg-contrast-20);
      flex: 1;
      display: block;
    }

    input {
      background-color: transparent;
      outline: none;
      border: none;
      width: 100%;
      height: 100%;
      padding: 0 var(--bim-ui_size-3xs);
      border-radius: var(--bim-text-input--bdrs, var(--bim-ui_size-4xs));
      color: var(--bim-text-input--c, var(--bim-ui_bg-contrast-100));
    }

    :host(:focus) {
      --bim-input--olc: var(--bim-ui_accent-base);
    }

    /* :host([disabled]) {
      --bim-input--bgc: var(--bim-ui_bg-contrast-20);
    } */
  `;
var ut2 = jo;
Ct([
  f({ type: String, reflect: true })
], ut2.prototype, "icon", 2);
Ct([
  f({ type: String, reflect: true })
], ut2.prototype, "label", 2);
Ct([
  f({ type: String, reflect: true })
], ut2.prototype, "name", 2);
Ct([
  f({ type: String, reflect: true })
], ut2.prototype, "placeholder", 2);
Ct([
  f({ type: String, reflect: true })
], ut2.prototype, "value", 2);
Ct([
  f({ type: Boolean, reflect: true })
], ut2.prototype, "vertical", 2);
Ct([
  f({ type: Number, reflect: true })
], ut2.prototype, "debounce", 2);
Ct([
  f({ type: String, reflect: true })
], ut2.prototype, "type", 1);
var lc = Object.defineProperty;
var cc = Object.getOwnPropertyDescriptor;
var Ho = (i, t, e, s) => {
  for (var n = s > 1 ? void 0 : s ? cc(t, e) : t, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = (s ? r(t, e, n) : r(n)) || n);
  return s && n && lc(t, e, n), n;
};
var Fo = class extends k {
  constructor() {
    super(...arguments), this.rows = 2, this._vertical = false;
  }
  set vertical(t) {
    this._vertical = t, this.updateChildren();
  }
  get vertical() {
    return this._vertical;
  }
  updateChildren() {
    const t = this.children;
    for (const e of t)
      this.vertical ? e.setAttribute("label-hidden", "") : e.removeAttribute("label-hidden");
  }
  render() {
    return y`
      <style>
        .parent {
          grid-auto-flow: ${this.vertical ? "row" : "column"};
          grid-template-rows: repeat(${this.rows}, 1fr);
        }
      </style>
      <div class="parent">
        <slot @slotchange=${this.updateChildren}></slot>
      </div>
    `;
  }
};
Fo.styles = O`
    .parent {
      display: grid;
      gap: 0.25rem;
    }

    ::slotted(bim-button[label]:not([vertical])) {
      --bim-button--jc: flex-start;
    }

    ::slotted(bim-button) {
      --bim-label--c: var(--bim-ui_bg-contrast-80);
    }
  `;
var _i = Fo;
Ho([
  f({ type: Number, reflect: true })
], _i.prototype, "rows", 2);
Ho([
  f({ type: Boolean, reflect: true })
], _i.prototype, "vertical", 1);
var uc = Object.defineProperty;
var hc = Object.getOwnPropertyDescriptor;
var xi = (i, t, e, s) => {
  for (var n = s > 1 ? void 0 : s ? hc(t, e) : t, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = (s ? r(t, e, n) : r(n)) || n);
  return s && n && uc(t, e, n), n;
};
var Bo = class extends k {
  constructor() {
    super(...arguments), this._vertical = false, this._labelHidden = false;
  }
  set vertical(t) {
    this._vertical = t, this.updateChildren();
  }
  get vertical() {
    return this._vertical;
  }
  set labelHidden(t) {
    this._labelHidden = t, this.updateChildren();
  }
  get labelHidden() {
    return this._labelHidden;
  }
  updateChildren() {
    const t = this.children;
    for (const e of t)
      e instanceof _i && (e.vertical = this.vertical), e.toggleAttribute("label-hidden", this.vertical);
  }
  render() {
    return y`
      <div class="parent">
        <div class="children">
          <slot @slotchange=${this.updateChildren}></slot>
        </div>
        ${!this.labelHidden && (this.label || this.icon) ? y`<bim-label .icon=${this.icon}>${this.label}</bim-label>` : null}
      </div>
    `;
  }
};
Bo.styles = O`
    :host {
      --bim-label--fz: var(--bim-ui_size-xs);
      --bim-label--c: var(--bim-ui_bg-contrast-60);
      display: block;
      flex: 1;
    }

    :host(:not([vertical])) ::slotted(bim-button[vertical]) {
      --bim-icon--fz: var(--bim-ui_size-5xl);
      min-height: 3.75rem;
    }

    ::slotted(bim-button) {
      --bim-label--c: var(--bim-ui_bg-contrast-80);
    }

    .parent {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
      align-items: center;
      padding: 0.5rem;
      height: 100%;
      box-sizing: border-box;
      justify-content: space-between;
    }

    :host([vertical]) .parent {
      flex-direction: row-reverse;
    }

    :host([vertical]) .parent > bim-label {
      writing-mode: tb;
    }

    .children {
      display: flex;
      gap: 0.25rem;
    }

    :host([vertical]) .children {
      flex-direction: column;
    }
  `;
var le = Bo;
xi([
  f({ type: String, reflect: true })
], le.prototype, "label", 2);
xi([
  f({ type: String, reflect: true })
], le.prototype, "icon", 2);
xi([
  f({ type: Boolean, reflect: true })
], le.prototype, "vertical", 1);
xi([
  f({ type: Boolean, attribute: "label-hidden", reflect: true })
], le.prototype, "labelHidden", 1);
var Uo = class S {
  static set config(t) {
    this._config = { ...S._config, ...t };
  }
  static get config() {
    return S._config;
  }
  static addGlobalStyles() {
    let t = document.querySelector("style[id='bim-ui']");
    if (t)
      return;
    t = document.createElement("style"), t.id = "bim-ui", t.textContent = Lt.globalStyles.cssText;
    const e = document.head.firstChild;
    e ? document.head.insertBefore(t, e) : document.head.append(t);
  }
  static defineCustomElement(t, e) {
    customElements.get(t) || customElements.define(t, e);
  }
  /**
   * @deprecated Use `Manager.init()` instead.
   */
  static registerComponents() {
    S.init();
  }
  /**
   * Initializes the BIM UI library by defining custom elements.
   * It ensures that all necessary styles and custom elements are registered for use in BIM UI components.
   *
   * @example
   * ```typescript
   * import { Manager } from "@thatopen/ui";
   * Manager.init();
   * ```
   */
  static init() {
    S.addGlobalStyles(), S.defineCustomElement("bim-button", $l), S.defineCustomElement("bim-checkbox", Kt), S.defineCustomElement("bim-color-input", Mt), S.defineCustomElement("bim-context-menu", vo), S.defineCustomElement("bim-dropdown", ct), S.defineCustomElement("bim-grid", dn), S.defineCustomElement("bim-icon", zl), S.defineCustomElement("bim-input", De), S.defineCustomElement("bim-label", ee), S.defineCustomElement("bim-number-input", V), S.defineCustomElement("bim-option", L), S.defineCustomElement("bim-panel", ie), S.defineCustomElement("bim-panel-section", ne), S.defineCustomElement("bim-selector", se), S.defineCustomElement("bim-table", zt), S.defineCustomElement("bim-tabs", Dt), S.defineCustomElement("bim-tab", X), S.defineCustomElement("bim-table-cell", To), S.defineCustomElement("bim-table-children", Po), S.defineCustomElement("bim-table-group", No), S.defineCustomElement("bim-table-row", oe), S.defineCustomElement("bim-text-input", ut2), S.defineCustomElement("bim-toolbar", wi), S.defineCustomElement("bim-toolbar-group", _i), S.defineCustomElement(
      "bim-toolbar-section",
      le
    ), S.defineCustomElement("bim-viewport", Go);
  }
  static newRandomId() {
    const t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    let e = "";
    for (let s = 0; s < 10; s++) {
      const n = Math.floor(Math.random() * t.length);
      e += t.charAt(n);
    }
    return e;
  }
};
Uo._config = {
  sectionLabelOnVerticalToolbar: false
  // draggableToolbars: true,
  // draggablePanels: true,
};
var Ji = Uo;
var dc = Object.defineProperty;
var pc = Object.getOwnPropertyDescriptor;
var pn = (i, t, e, s) => {
  for (var n = s > 1 ? void 0 : s ? pc(t, e) : t, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = (s ? r(t, e, n) : r(n)) || n);
  return s && n && dc(t, e, n), n;
};
var Vo = class extends k {
  constructor() {
    super(...arguments), this.labelsHidden = false, this._vertical = false, this._hidden = false;
  }
  set vertical(t) {
    this._vertical = t, this.updateSections();
  }
  get vertical() {
    return this._vertical;
  }
  set hidden(t) {
    this._hidden = t, this.dispatchEvent(new Event("hiddenchange"));
  }
  get hidden() {
    return this._hidden;
  }
  // private setActivationButton() {
  //   this.activationButton.draggable = Manager.config.draggableToolbars;
  //   this.activationButton.addEventListener(
  //     "click",
  //     () => (this.hidden = !this.hidden),
  //   );
  //   this.activationButton.setAttribute("data-ui-manager-id", this._managerID);
  //   this.activationButton.addEventListener("dragstart", (e) => {
  //     const id = this.getAttribute("data-ui-manager-id");
  //     if (e.dataTransfer && id) {
  //       e.dataTransfer.setData("id", id);
  //       e.dataTransfer.effectAllowed = "move";
  //     }
  //     const containers = document.querySelectorAll("bim-toolbars-container");
  //     for (const container of containers) {
  //       if (container === this.parentElement) continue;
  //       container.dropping = true;
  //     }
  //   });
  //   this.activationButton.addEventListener("dragend", (e) => {
  //     if (e.dataTransfer) e.dataTransfer.clearData();
  //     const containers = document.querySelectorAll("bim-toolbars-container");
  //     for (const container of containers) {
  //       container.dropping = false;
  //     }
  //   });
  // }
  updateSections() {
    const t = this.children;
    for (const e of t)
      e instanceof le && (e.labelHidden = this.vertical && !Ji.config.sectionLabelOnVerticalToolbar, e.vertical = this.vertical);
  }
  // firstUpdated() {
  //   this.setAttribute("data-ui-manager-id", this._managerID);
  // }
  render() {
    return y`
      <div class="parent">
        <slot @slotchange=${this.updateSections}></slot>
      </div>
    `;
  }
};
Vo.styles = O`
    :host {
      --bim-button--bgc: transparent;
      background-color: var(--bim-ui_bg-base);
      border-radius: var(--bim-ui_size-2xs);
      display: block;
    }

    :host([hidden]) {
      display: none;
    }

    .parent {
      display: flex;
      width: min-content;
      pointer-events: auto;
    }

    :host([vertical]) .parent {
      flex-direction: column;
    }

    :host([vertical]) {
      width: min-content;
      border-radius: var(--bim-ui_size-2xs);
      border: 1px solid var(--bim-ui_bg-contrast-20);
    }

    ::slotted(bim-toolbar-section:not(:last-child)) {
      border-right: 1px solid var(--bim-ui_bg-contrast-20);
      border-bottom: none;
    }

    :host([vertical]) ::slotted(bim-toolbar-section:not(:last-child)) {
      border-bottom: 1px solid var(--bim-ui_bg-contrast-20);
      border-right: none;
    }
  `;
var wi = Vo;
pn([
  f({ type: String, reflect: true })
], wi.prototype, "icon", 2);
pn([
  f({ type: Boolean, attribute: "labels-hidden", reflect: true })
], wi.prototype, "labelsHidden", 2);
pn([
  f({ type: Boolean, reflect: true })
], wi.prototype, "vertical", 1);
var fc = Object.defineProperty;
var mc = (i, t, e, s) => {
  for (var n = void 0, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = r(t, e, n) || n);
  return n && fc(t, e, n), n;
};
var Wo = class extends k {
  constructor() {
    super(), this._onResize = new Event("resize"), new ResizeObserver(() => {
      setTimeout(() => {
        this.dispatchEvent(this._onResize);
      });
    }).observe(this);
  }
  render() {
    return y`
      <div class="parent">
        <slot></slot>
      </div>
    `;
  }
};
Wo.styles = O`
    :host {
      display: grid;
      min-width: 0;
      min-height: 0;
      height: 100%;
    }

    .parent {
      overflow: hidden;
      position: relative;
    }
  `;
var Go = Wo;
mc([
  f({ type: String, reflect: true })
], Go.prototype, "name");
var bc = (i) => {
  const { components: t } = i, e = t.get(Ri);
  return y`
    <bim-button
      data-ui-id="import-ifc"
      label="Load IFC"
      icon="mage:box-3d-fill"
      @click=${() => {
    const n = document.createElement("input");
    n.type = "file", n.accept = ".ifc", n.onchange = async () => {
      if (n.files === null || n.files.length === 0)
        return;
      const o = n.files[0];
      n.remove();
      const r = await o.arrayBuffer(), a = new Uint8Array(r), l = await e.load(a);
      l.name = o.name.replace(".ifc", "");
    }, n.click();
  }}
    ></bim-button>
  `;
};
var gc = (i) => xt.create(
  bc,
  i
);
var vc = Object.freeze(Object.defineProperty({
  __proto__: null,
  loadIfc: gc
}, Symbol.toStringTag, { value: "Module" }));
var eh = {
  ...vc
  // fragmentExploder,
};
var yc = (i) => {
  const { components: t } = i, e = i.schemaTag ?? true, s = i.viewDefinitionTag ?? true, n = t.get(ut), o = document.createElement("bim-table");
  o.addEventListener("cellcreated", ({ detail: a }) => {
    const { cell: l } = a;
    l.style.padding = "0.25rem 0";
  }), o.hiddenColumns = ["modelID"], o.headersHidden = true;
  const r = [];
  for (const [, a] of n.groups) {
    if (!a)
      continue;
    const l = {
      data: {
        Name: a.name || a.uuid,
        modelID: a.uuid
      }
    };
    r.push(l);
  }
  return o.dataTransform = {
    Name: (a, l) => {
      const { modelID: u } = l;
      if (typeof u != "string")
        return a;
      const h = n.groups.get(u);
      if (!h)
        return u;
      const d = {};
      for (const x of h.items)
        d[x.id] = x.ids;
      let c;
      const { schema: p } = h.ifcMetadata;
      e && p && (c = y`
          <bim-label style="background-color: var(--bim-ui_main-base); padding: 0 0.25rem; color: var(--bim-ui_main-contrast); border-radius: 0.25rem;">${p}</bim-label>
          `);
      let g;
      if (s && "viewDefinition" in h.ifcMetadata) {
        const x = h.ifcMetadata.viewDefinition;
        g = y`
          ${x.split(",").map((m) => y`<bim-label style="background-color: var(--bim-ui_main-base); padding: 0 0.25rem; color: var(--bim-ui_main-contrast); border-radius: 0.25rem;">${m}</bim-label>`)}
        `;
      }
      return y`
       <div style="display: flex; flex: 1; gap: var(--bim-ui_size-4xs); justify-content: space-between; overflow: auto;">
        <div style="display: flex; flex-wrap: wrap; align-items: center; gap: 0 var(--bim-ui_size-4xs); flex-grow: 1; overflow: auto;">
          <div style="min-height: 1.75rem; overflow: auto; display: flex;">
            <bim-label style="white-space: normal;">${a}</bim-label>
          </div>
          <div style="display: flex; flex-wrap: wrap; gap: var(--bim-ui_size-4xs); overflow: auto;">
            ${c}
            ${g}
          </div>
        </div>
        <div style="display: flex; gap: var(--bim-ui_size-4xs); align-self: flex-start; flex-shrink: 0;">
          <bim-button @click=${(x) => {
        const m = t.get(_n), b = x.target;
        m.set(b.hasAttribute("data-model-hidden"), d), b.toggleAttribute("data-model-hidden"), b.icon = b.hasAttribute("data-model-hidden") ? "mdi:eye-off" : "mdi:eye";
      }} icon="mdi:eye"></bim-button>
          <bim-button @click=${() => n.disposeGroup(h)} icon="mdi:delete"></bim-button>
        </div>
       </div>
      `;
    }
  }, o.data = r, y`
    <div>
      ${r.length === 0 ? y`<bim-label>No models has been loaded yet</bim-label>` : o}
    </div>
  `;
};
var _c = (i, t = true) => {
  const e = xt.create(
    yc,
    i
  );
  if (t) {
    const { components: s } = i, n = s.get(ut), [, o] = e;
    n.onFragmentsLoaded.add(() => setTimeout(() => o())), n.onFragmentsDisposed.add(() => o());
  }
  return e;
};
var xc = Object.freeze(Object.defineProperty({
  __proto__: null,
  modelsList: _c
}, Symbol.toStringTag, { value: "Module" }));
var qo = [
  "Name",
  "ContainedInStructure",
  "ForLayerSet",
  "LayerThickness",
  "HasProperties",
  "HasAssociations",
  "HasAssignments",
  "HasPropertySets",
  "PredefinedType",
  "Quantities",
  "ReferencedSource",
  "Identification",
  (i) => i.includes("Value"),
  (i) => i.startsWith("Material"),
  (i) => i.startsWith("Relating"),
  (i) => {
    const t = ["IsGroupedBy", "IsDecomposedBy"];
    return i.startsWith("Is") && !t.includes(i);
  }
];
async function Qe(i, t, e, s = qo, n = false) {
  const o = i.get(We), r = await t.getProperties(e);
  if (!r)
    return {
      data: { Entity: `${e} properties not found...` }
      // onRowCreated(row) {
      //   row.addEventListener("cellcreated", (event) => {
      //     if (!(event instanceof CustomEvent)) return;
      //     const { cell } = event.detail;
      //     cell.style.gridColumn = "1 / -1";
      //   });
      // },
    };
  const a = o.relationMaps[t.uuid], l = {
    data: {}
  };
  for (const u in r) {
    const h = s.map((c) => typeof c == "string" ? u === c : c(u)).includes(true);
    if (!(u === "type" || h))
      continue;
    const d = r[u];
    if (d)
      if (d.type === 5) {
        l.children || (l.children = []);
        const c = await Qe(
          i,
          t,
          d.value,
          s,
          n
        );
        l.children.push(c);
      } else if (typeof d == "object" && !Array.isArray(d)) {
        const { value: c, type: p } = d;
        if (n)
          p === 1 || p === 2 || p === 3 || (l.data[u] = c);
        else {
          const g = typeof c == "number" ? Number(c.toFixed(3)) : c;
          l.data[u] = g;
        }
      } else if (Array.isArray(d))
        for (const c of d) {
          if (c.type !== 5)
            continue;
          l.children || (l.children = []);
          const p = await Qe(
            i,
            t,
            c.value,
            s,
            n
          );
          l.children.push(p);
        }
      else if (u === "type") {
        const c = Bn[d];
        l.data.Entity = c;
      } else
        l.data[u] = d;
  }
  if (a && a.get(r.expressID)) {
    const u = a.get(r.expressID);
    for (const h of s) {
      const d = [];
      if (typeof h == "string") {
        const c = o._inverseAttributes.indexOf(
          h
        );
        c !== -1 && d.push(c);
      } else {
        const c = o._inverseAttributes.filter(
          (p) => h(p)
        );
        for (const p of c) {
          const g = o._inverseAttributes.indexOf(p);
          d.push(g);
        }
      }
      for (const c of d) {
        const p = u.get(c);
        if (p)
          for (const g of p) {
            const w = await Qe(
              i,
              t,
              g,
              s,
              n
            );
            l.children || (l.children = []), l.children.push(w);
          }
      }
    }
  }
  return l;
}
var wc = (i) => {
  const {
    components: t,
    fragmentIdMap: e,
    attributesToInclude: s,
    editable: n,
    tableDefinition: o
  } = i, r = t.get(ut);
  let a;
  return typeof s == "function" ? a = s(qo) : a = s, y`<bim-table ${Z(async (u) => {
    if (!u)
      return;
    const h = u, d = [], c = [];
    for (const p in e) {
      const g = r.list.get(p);
      if (!(g && g.group))
        continue;
      const w = g.group, _ = c.find((x) => x.model === w);
      if (_)
        for (const x of e[p])
          _.expressIDs.add(x);
      else {
        const x = { model: w, expressIDs: new Set(e[p]) };
        c.push(x);
      }
    }
    for (const p of c) {
      const { model: g, expressIDs: w } = p;
      for (const _ of w) {
        const x = await Qe(
          t,
          g,
          _,
          a,
          n
        );
        d.push(x);
      }
    }
    h.dataTransform = o, h.data = d, h.columns = [{ name: "Entity", width: "minmax(15rem, 1fr)" }];
  })}></bim-table>`;
};
var $c = (i) => xt.create(
  wc,
  i
);
var Cc = Object.freeze(Object.defineProperty({
  __proto__: null,
  entityAttributes: $c
}, Symbol.toStringTag, { value: "Module" }));
function Ec(i) {
  const t = Object.keys(i).pop();
  return t && i[t].length > 0 ? i[t][0] : "";
}
function Yo(i) {
  return i.map((t) => {
    const e = {
      data: {
        System: Ec(t.filter)
        // Actions: JSON.stringify(node.filter),
      }
    };
    return t.children && t.children.length > 0 && (e.children = Yo(t.children)), e;
  });
}
var Ac = (i) => {
  const { components: t, classifications: e } = i, s = t.get(Ai), n = (o) => {
    if (!o)
      return;
    const r = o;
    r.dataTransform = {
      Actions: (u) => u
    };
    const a = (u, h = {}) => {
      const d = s.list, c = u[0], p = d[c], g = [];
      if (!c || !p)
        return g;
      for (const w in p) {
        const _ = { ...h, [c]: [w] }, x = s.find(_);
        if (Object.keys(x).length > 0) {
          const b = { filter: _ };
          b.children = a(u.slice(1), _), g.push(b);
        }
      }
      return g;
    }, l = [];
    for (const u in e) {
      const h = e[u], d = a(h), c = Yo(d);
      l.push({
        data: { System: u },
        children: c
      });
    }
    r.data = l;
  };
  return y`
  <div>
    ${Object.keys(e).length === 0 ? y`<bim-label label="No classifications to show"></bim-label>` : y`<bim-table ${Z(n)} headers-hidden expanded></bim-table>`}
  </div>
  `;
};
var Sc2 = (i, t = true) => {
  const e = xt.create(
    Ac,
    i
  );
  if (t) {
    const { components: s } = i, n = s.get(ut), [, o] = e;
    n.onFragmentsDisposed.add(() => o());
  }
  return e;
};
var kc = Object.freeze(Object.defineProperty({
  __proto__: null,
  classificationTree: Sc2
}, Symbol.toStringTag, { value: "Module" }));
var Oc = ["OwnerHistory", "ObjectPlacement", "CompositionType"];
var rs = async (i, t, e) => {
  const n = { ...{
    groupName: "Attributes",
    includeClass: false
  }, ...e }, { groupName: o, includeClass: r } = n, a = await i.getProperties(t) ?? {}, l = { data: { Name: o } };
  r && (l.children || (l.children = []), l.children.push({
    data: {
      Name: "Class",
      Value: Bn[a.type]
    }
  }));
  for (const u in a) {
    if (Oc.includes(u))
      continue;
    const h = a[u];
    if (h && typeof h == "object" && !Array.isArray(h)) {
      if (h.type === REF)
        continue;
      const d = {
        data: { Name: u, Value: h.value }
      };
      l.children || (l.children = []), l.children.push(d);
    }
  }
  return l;
};
var Tc = async (i, t) => {
  const e = { data: { Name: "Property Sets" } };
  for (const s of t) {
    const n = await i.getProperties(s);
    if (!n)
      continue;
    const o = {
      data: { Name: n.Name.value }
    };
    if (n.type === IFCPROPERTYSET) {
      for (const r of n.HasProperties) {
        const { value: a } = r, l = await i.getProperties(a);
        if (!l)
          continue;
        const u = Object.keys(l).find(
          (d) => d.includes("Value")
        );
        if (!(u && l[u]))
          continue;
        const h = {
          data: {
            Name: l.Name.value,
            Value: l[u].value
          }
        };
        o.children || (o.children = []), o.children.push(h);
      }
      o.children && (e.children || (e.children = []), e.children.push(o));
    }
  }
  return e;
};
var Ic = async (i, t) => {
  const e = { data: { Name: "Quantity Sets" } };
  for (const s of t) {
    const n = await i.getProperties(s);
    if (!n)
      continue;
    const o = {
      data: { Name: n.Name.value }
    };
    if (n.type === IFCELEMENTQUANTITY) {
      for (const r of n.Quantities) {
        const { value: a } = r, l = await i.getProperties(a);
        if (!l)
          continue;
        const u = Object.keys(l).find(
          (d) => d.includes("Value")
        );
        if (!(u && l[u]))
          continue;
        const h = {
          data: {
            Name: l.Name.value,
            Value: l[u].value
          }
        };
        o.children || (o.children = []), o.children.push(h);
      }
      o.children && (e.children || (e.children = []), e.children.push(o));
    }
  }
  return e;
};
var Pc = async (i, t) => {
  const e = { data: { Name: "Materials" } };
  for (const s of t) {
    const n = await i.getProperties(s);
    if (n && n.type === IFCMATERIALLAYERSETUSAGE) {
      const o = n.ForLayerSet.value, r = await i.getProperties(o);
      if (!r)
        continue;
      for (const a of r.MaterialLayers) {
        const { value: l } = a, u = await i.getProperties(l);
        if (!u)
          continue;
        const h = await i.getProperties(
          u.Material.value
        );
        if (!h)
          continue;
        const d = {
          data: {
            Name: "Layer"
          },
          children: [
            {
              data: {
                Name: "Thickness",
                Value: u.LayerThickness.value
              }
            },
            {
              data: {
                Name: "Material",
                Value: h.Name.value
              }
            }
          ]
        };
        e.children || (e.children = []), e.children.push(d);
      }
    }
    if (n && n.type === IFCMATERIALLIST)
      for (const o of n.Materials) {
        const { value: r } = o, a = await i.getProperties(r);
        if (!a)
          continue;
        const l = {
          data: {
            Name: "Name",
            Value: a.Name.value
          }
        };
        e.children || (e.children = []), e.children.push(l);
      }
    if (n && n.type === IFCMATERIAL) {
      const o = await i.getProperties(s);
      if (!o)
        continue;
      const r = {
        data: {
          Name: "Name",
          Value: o.Name.value
        }
      };
      e.children || (e.children = []), e.children.push(r);
    }
  }
  return e;
};
var Rc = async (i, t) => {
  var s, n;
  const e = { data: { Name: "Classifications" } };
  for (const o of t) {
    const r = await i.getProperties(o);
    if (r && r.type === IFCCLASSIFICATIONREFERENCE) {
      const { value: a } = r.ReferencedSource, l = await i.getProperties(a);
      if (!l)
        continue;
      const u = {
        data: {
          Name: l.Name.value
        },
        children: [
          {
            data: {
              Name: "Identification",
              Value: ((s = r.Identification) == null ? void 0 : s.value) || ((n = r.ItemReference) == null ? void 0 : n.value)
            }
          },
          {
            data: {
              Name: "Name",
              Value: r.Name.value
            }
          }
        ]
      };
      e.children || (e.children = []), e.children.push(u);
    }
  }
  return e;
};
var Nc = async (i, t) => {
  var r;
  const e = i.get(We), s = i.get(ut), n = [], o = [];
  for (const a in t) {
    const l = s.list.get(a);
    if (!(l && l.group))
      continue;
    const u = l.group, h = o.find((d) => d.model === u);
    if (h)
      for (const d of t[a])
        h.expressIDs.add(d);
    else {
      const d = { model: u, expressIDs: new Set(t[a]) };
      o.push(d);
    }
  }
  for (const a in o) {
    const { model: l, expressIDs: u } = o[a], h = e.relationMaps[l.uuid];
    if (h)
      for (const d of u) {
        const c = await l.getProperties(d);
        if (!c)
          continue;
        const p = {
          data: {
            Name: (r = c.Name) == null ? void 0 : r.value
          }
        };
        n.push(p);
        const g = await rs(l, d, {
          includeClass: true
        });
        if (p.children || (p.children = []), p.children.push(g), !h.get(d))
          continue;
        const _ = e.getEntityRelations(
          l,
          d,
          "IsDefinedBy"
        );
        if (_) {
          const b = _.filter(async (E) => {
            const A = await l.getProperties(E);
            return A ? A.type === IFCPROPERTYSET : false;
          }), v = await Tc(l, b);
          v.children && p.children.push(v);
          const $ = _.filter(async (E) => {
            const A = await l.getProperties(E);
            return A ? A.type === IFCELEMENTQUANTITY : false;
          }), C = await Ic(l, $);
          C.children && p.children.push(C);
        }
        const x = e.getEntityRelations(
          l,
          d,
          "HasAssociations"
        );
        if (x) {
          const b = x.filter(async (E) => {
            const A = await l.getProperties(E);
            return A ? A.type === IFCMATERIALLAYERSETUSAGE || A.type === IFCMATERIALLAYERSET || A.type === IFCMATERIALLAYER || A.type === IFCMATERIAL || A.type === IFCMATERIALLIST : false;
          }), v = await Pc(l, b);
          v.children && p.children.push(v);
          const $ = x.filter(
            async (E) => {
              const A = await l.getProperties(E);
              return A ? A.type === IFCCLASSIFICATIONREFERENCE : false;
            }
          ), C = await Rc(
            l,
            $
          );
          C.children && p.children.push(C);
        }
        const m = e.getEntityRelations(
          l,
          d,
          "ContainedInStructure"
        );
        if (m) {
          const b = m[0], v = await rs(l, b, {
            groupName: "SpatialContainer"
          });
          p.children.push(v);
        }
      }
  }
  return n;
};
var kt;
var Mc = (i) => {
  const { components: t, fragmentIdMap: e } = i;
  return kt || (kt = document.createElement("bim-table"), kt.columns = [{ name: "Name", width: "12rem" }], kt.headersHidden = true, kt.addEventListener("cellcreated", ({ detail: s }) => {
    const { cell: n } = s;
    n.column === "Name" && !("Value" in n.rowData) && (n.style.gridColumn = "1 / -1");
  })), Nc(t, e).then(
    (s) => kt.data = s
  ), y`${kt}`;
};
var Lc = (i) => xt.create(
  Mc,
  i
);
var zc = Object.freeze(Object.defineProperty({
  __proto__: null,
  elementProperties: Lc
}, Symbol.toStringTag, { value: "Module" }));
var Qi = async (i, t, e, s) => {
  var u;
  const n = [], o = i.get(We), r = await t.getProperties(e);
  if (!r)
    return n;
  const { type: a } = r, l = {
    data: {
      Entity: Bn[a],
      Name: (u = r.Name) == null ? void 0 : u.value,
      modelID: t.uuid
    }
  };
  for (const h of s) {
    const d = o.getEntityRelations(t, e, h);
    if (l.data.expressID = e, !!d) {
      l.data.relations = JSON.stringify(d);
      for (const c of d) {
        const p = await Qi(
          i,
          t,
          c,
          s
        );
        l.children || (l.children = []), l.children.push(...p);
      }
    }
  }
  return n.push(l), n;
};
var Dc = async (i, t, e, s) => {
  const n = i.get(We), o = [];
  for (const r of t) {
    let a;
    if (s)
      a = {
        data: {
          Entity: r.name !== "" ? r.name : r.uuid
        },
        children: await Qi(
          i,
          r,
          s,
          e
        )
      };
    else {
      const l = n.relationMaps[r.uuid], u = await r.getAllPropertiesOfType(
        IFCPROJECT
      );
      if (!(l && u))
        continue;
      const { expressID: h } = Object.values(u)[0];
      a = {
        data: {
          Entity: r.name !== "" ? r.name : r.uuid
        },
        children: await Qi(
          i,
          r,
          h,
          e
        )
      };
    }
    o.push(a);
  }
  return o;
};
var ot;
var as = (i, t) => {
  const e = i.get(ut), { modelID: s, expressID: n, relations: o } = t.data;
  if (!(s && n))
    return null;
  const r = e.groups.get(s);
  return r ? r.getFragmentMap([
    n,
    ...JSON.parse(o ?? "[]")
  ]) : null;
};
var jc = (i) => {
  const { components: t, models: e, expressID: s } = i, n = i.selectHighlighterName ?? "select", o = i.hoverHighlighterName ?? "hover";
  ot || (ot = document.createElement("bim-table"), ot.hiddenColumns = ["modelID", "expressID", "relations"], ot.columns = ["Entity", "Name"], ot.headersHidden = true, ot.addEventListener("cellcreated", ({ detail: a }) => {
    const { cell: l } = a;
    l.column === "Entity" && !("Name" in l.rowData) && (l.style.gridColumn = "1 / -1");
  })), ot.addEventListener("rowcreated", (a) => {
    a.stopImmediatePropagation();
    const { row: l } = a.detail, u = t.get(Sc);
    l.onmouseover = () => {
      if (!o)
        return;
      const h = as(t, l);
      h && Object.keys(h).length !== 0 && (l.style.backgroundColor = "var(--bim-ui_bg-contrast-20)", u.highlightByID(
        o,
        h,
        true,
        false,
        u.selection[n] ?? {}
      ));
    }, l.onmouseout = () => {
      l.style.backgroundColor = "", u.clear(o);
    }, l.onclick = () => {
      if (!n)
        return;
      const h = as(t, l);
      h && Object.keys(h).length !== 0 && u.highlightByID(
        n,
        h,
        true,
        true
      );
    };
  });
  const r = i.inverseAttributes ?? [
    "IsDecomposedBy",
    "ContainsElements"
  ];
  return Dc(t, e, r, s).then(
    (a) => ot.data = a
  ), y`${ot}`;
};
var Hc = (i, t = true) => {
  const e = xt.create(
    jc,
    i
  );
  if (t) {
    const [, s] = e, { components: n } = i, o = n.get(ut), r = n.get(We), a = () => s({ models: o.groups.values() });
    r.onRelationsIndexed.add(a), o.onFragmentsDisposed.add(a);
  }
  return e;
};
var Fc = Object.freeze(Object.defineProperty({
  __proto__: null,
  relationsTree: Hc
}, Symbol.toStringTag, { value: "Module" }));
var de = (i, t) => [...i.get(un).list.values()].find((n) => n.world === t);
var Bc = (i, t) => y`
    <bim-color-input @input=${(s) => {
  const n = s.target;
  i.color = new Color(n.color);
}} color=${t}></bim-color-input>
  `;
var Uc = (i, t) => {
  const { postproduction: e } = i, s = e.n8ao.configuration;
  return y`
    <bim-color-input @input=${(o) => {
    const r = o.target;
    s.color = new Color(r.color);
  }} color=${t}></bim-color-input>
  `;
};
var Vc = (i, t) => {
  const { color: e, opacity: s } = JSON.parse(t), { postproduction: n } = i, { customEffects: o } = n;
  return y`
    <bim-color-input @input=${(a) => {
    const { color: l, opacity: u } = a.target;
    o.lineColor = new Color(l).getHex(), u && (o.opacity = u / 100);
  }} color=${e} opacity=${s * 100}></bim-color-input>
  `;
};
var Wc = (i, t) => y`
    <bim-color-input @input=${(s) => {
  const n = s.target, o = new Color(n.color);
  i.material.uniforms.uColor.value = o;
}} color=${t}></bim-color-input>
  `;
var Gc = (i, t) => {
  const { postproduction: e } = i;
  return y`
    <bim-checkbox @change=${(n) => {
    const o = n.target;
    e.setPasses({ ao: o.checked });
  }} .checked=${t}></bim-checkbox>
  `;
};
var qc = (i, t) => {
  const { postproduction: e } = i;
  return y`
    <bim-checkbox @change=${(n) => {
    const o = n.target;
    e.setPasses({ gamma: o.checked });
  }} .checked=${t}></bim-checkbox>
  `;
};
var Yc = (i, t) => {
  const { postproduction: e } = i;
  return y`
    <bim-checkbox @change=${(n) => {
    const o = n.target;
    e.setPasses({ custom: o.checked });
  }} .checked=${t}></bim-checkbox>
  `;
};
var dt = (i, t, e, s = () => {
}) => y`
    <bim-checkbox .checked="${e}" @change="${(o) => {
  const a = o.target.checked;
  i[t] = a, s(a);
}}"></bim-checkbox> 
  `;
var R = (i, t, e, s) => {
  const n = {
    slider: false,
    min: 0,
    max: 100,
    step: 1,
    prefix: null,
    suffix: null,
    onInputSet: () => {
    },
    ...s
  }, { slider: o, min: r, max: a, step: l, suffix: u, prefix: h, onInputSet: d } = n;
  return y`
    <bim-number-input
      .pref=${h}
      .suffix=${u}
      .slider=${o} 
      min=${r} 
      value="${e}" 
      max=${a} 
      step=${l} 
      @change="${(p) => {
    const w = p.target.value;
    i[t] = w, d(w);
  }}"
    ></bim-number-input> 
  `;
};
var Xc = (i) => {
  const { components: t } = i, e = t.get(Ci);
  return y`<bim-table ${Z(async (n) => {
    var a, l, u, h, d;
    if (!n)
      return;
    const o = n;
    o.preserveStructureOnFilter = true, o.dataTransform = {
      Value: (c, p) => {
        const g = p.World, w = e.list.get(g);
        if (!w)
          return c;
        const { scene: _, camera: x, renderer: m } = w, b = p.Name;
        if (b === "Grid" && p.IsGridConfig && typeof c == "boolean") {
          const v = de(t, w);
          return v ? dt(v, "visible", c) : c;
        }
        if (b === "Color" && p.IsGridConfig && typeof c == "string") {
          const v = de(t, w);
          return v ? Wc(v, c) : c;
        }
        if (b === "Distance" && p.IsGridConfig && typeof c == "number") {
          const v = de(t, w);
          return v ? R(
            v.material.uniforms.uDistance,
            "value",
            c,
            { slider: true, min: 300, max: 1e3 }
          ) : c;
        }
        if (b === "Size" && p.IsGridConfig && typeof c == "string") {
          const v = de(t, w);
          if (!v)
            return c;
          const { x: $, y: C } = JSON.parse(c), E = R(
            v.material.uniforms.uSize1,
            "value",
            $,
            { slider: true, suffix: "m", prefix: "A", min: 1, max: 20 }
          ), A = R(
            v.material.uniforms.uSize2,
            "value",
            C,
            { slider: true, suffix: "m", prefix: "B", min: 1, max: 20 }
          );
          return y`
            <div style="display: flex; gap: 0.25rem; width: 100%; flex-wrap: wrap">${E}${A}</div>
          `;
        }
        if (b === "Near Frustum" && x.three instanceof PerspectiveCamera && typeof c == "number") {
          const v = x.three;
          return R(x.three, "near", c, {
            slider: true,
            min: 0.1,
            max: 10,
            step: 0.1,
            onInputSet: () => v.updateProjectionMatrix()
          });
        }
        if (b === "Far Frustum" && x.three instanceof PerspectiveCamera && typeof c == "number") {
          const v = x.three;
          return R(x.three, "far", c, {
            slider: true,
            min: 300,
            max: 2e3,
            step: 10,
            onInputSet: () => v.updateProjectionMatrix()
          });
        }
        if (b === "Field of View" && x.three instanceof PerspectiveCamera && typeof c == "number") {
          const v = x.three;
          return R(x.three, "fov", c, {
            slider: true,
            min: 10,
            max: 120,
            onInputSet: () => v.updateProjectionMatrix()
          });
        }
        if (b === "Invert Drag" && x.hasCameraControls() && typeof c == "boolean")
          return dt(
            x.controls,
            "dollyDragInverted",
            c
          );
        if (b === "Dolly Speed" && x.hasCameraControls() && typeof c == "number")
          return R(x.controls, "dollySpeed", c, {
            slider: true,
            min: 0.5,
            max: 3,
            step: 0.1
          });
        if (b === "Truck Speed" && x.hasCameraControls() && typeof c == "number")
          return R(x.controls, "truckSpeed", c, {
            slider: true,
            min: 0.5,
            max: 6,
            step: 0.1
          });
        if (b === "Smooth Time" && x.hasCameraControls() && typeof c == "number")
          return R(x.controls, "smoothTime", c, {
            slider: true,
            min: 0.01,
            max: 2,
            step: 0.01
          });
        if (b === "Intensity" && typeof c == "number") {
          if (p.Light && typeof p.Light == "string") {
            const v = _.three.children.find(
              ($) => $.uuid === p.Light
            );
            return v && v instanceof Light ? R(v, "intensity", c, {
              slider: true,
              min: 0,
              max: 10,
              step: 0.1
            }) : c;
          }
          if (p.IsAOConfig && m instanceof xa)
            return R(
              m.postproduction.n8ao.configuration,
              "intensity",
              c,
              { slider: true, max: 16, step: 0.1 }
            );
        }
        if (b === "Color" && typeof c == "string") {
          const v = p.Light, $ = _.three.children.find(
            (C) => C.uuid === v
          );
          if ($ && $ instanceof Light)
            return Bc($, c);
          if (p.IsAOConfig && m instanceof xa)
            return Uc(m, c);
        }
        if (b === "Ambient Oclussion" && typeof c == "boolean" && p.IsAOConfig && m instanceof xa)
          return Gc(m, c);
        if (b === "Half Resolution" && p.IsAOConfig && m instanceof xa && typeof c == "boolean")
          return dt(
            m.postproduction.n8ao.configuration,
            "halfRes",
            c
          );
        if (b === "Screen Space Radius" && p.IsAOConfig && m instanceof xa && typeof c == "boolean")
          return dt(
            m.postproduction.n8ao.configuration,
            "screenSpaceRadius",
            c
          );
        if (b === "Radius" && p.IsAOConfig && m instanceof xa && typeof c == "number")
          return R(
            m.postproduction.n8ao.configuration,
            "aoRadius",
            c,
            { slider: true, max: 2, step: 0.1 }
          );
        if (b === "Denoise Samples" && p.IsAOConfig && m instanceof xa && typeof c == "number")
          return R(
            m.postproduction.n8ao.configuration,
            "denoiseSamples",
            c,
            { slider: true, min: 1, max: 16 }
          );
        if (b === "Samples" && p.IsAOConfig && m instanceof xa && typeof c == "number")
          return R(
            m.postproduction.n8ao.configuration,
            "aoSamples",
            c,
            { slider: true, min: 1, max: 16 }
          );
        if (b === "Denoise Radius" && p.IsAOConfig && m instanceof xa && typeof c == "number")
          return R(
            m.postproduction.n8ao.configuration,
            "denoiseRadius",
            c,
            { slider: true, min: 0, max: 16, step: 0.1 }
          );
        if (b === "Distance Falloff" && p.IsAOConfig && m instanceof xa && typeof c == "number")
          return R(
            m.postproduction.n8ao.configuration,
            "distanceFalloff",
            c,
            { slider: true, min: 0, max: 4, step: 0.1 }
          );
        if (b === "Directional Light" && p.Light && typeof p.Light == "string" && typeof c == "boolean") {
          const v = _.three.children.find(
            ($) => $.uuid === p.Light
          );
          return v && v instanceof Light ? dt(v, "visible", c) : c;
        }
        if (b === "Ambient Light" && p.Light && typeof p.Light == "string" && typeof c == "boolean") {
          const v = _.three.children.find(
            ($) => $.uuid === p.Light
          );
          return v && v instanceof Light ? dt(v, "visible", c) : c;
        }
        if (b === "Position" && p.Light && typeof p.Light == "string" && typeof c == "string") {
          const v = _.three.children.find(
            (W) => W.uuid === p.Light
          );
          if (!(v && v instanceof Light))
            return c;
          const { x: $, y: C, z: E } = JSON.parse(c), A = R(v.position, "x", $, {
            slider: true,
            prefix: "X",
            suffix: "m",
            min: -50,
            max: 50
          }), B = R(v.position, "y", C, {
            slider: true,
            prefix: "Y",
            suffix: "m",
            min: -50,
            max: 50
          }), I = R(v.position, "z", E, {
            slider: true,
            prefix: "Z",
            suffix: "m",
            min: -50,
            max: 50
          });
          return y`
            <div style="display: flex; gap: 0.25rem; width: 100%; flex-wrap: wrap">${A}${B}${I}</div>
          `;
        }
        return b === "Custom Effects" && p.IsCEConfig && m instanceof xa && typeof c == "boolean" ? Yc(m, c) : b === "Color" && p.IsOutlineConfig && m instanceof xa && typeof c == "string" ? Vc(m, c) : b === "Tolerance" && p.IsOutlineConfig && m instanceof xa && typeof c == "number" ? R(
          m.postproduction.customEffects,
          "tolerance",
          c,
          { slider: true, min: 0, max: 6, step: 0.01 }
        ) : b === "Outline" && p.IsOutlineConfig && m instanceof xa && typeof c == "boolean" ? dt(
          m.postproduction.customEffects,
          "outlineEnabled",
          c
        ) : b === "Gloss" && p.IsGlossConfig && m instanceof xa && typeof c == "boolean" ? dt(
          m.postproduction.customEffects,
          "glossEnabled",
          c
        ) : b === "Min" && p.IsGlossConfig && m instanceof xa && typeof c == "number" ? R(
          m.postproduction.customEffects,
          "minGloss",
          c,
          { slider: true, min: -0.5, max: 0.5, step: 0.01 }
        ) : b === "Max" && p.IsGlossConfig && m instanceof xa && typeof c == "number" ? R(
          m.postproduction.customEffects,
          "maxGloss",
          c,
          { slider: true, min: -0.5, max: 0.5, step: 0.01 }
        ) : b === "Exponent" && p.IsGlossConfig && m instanceof xa && typeof c == "number" ? R(
          m.postproduction.customEffects,
          "glossExponent",
          c,
          { slider: true, min: 0, max: 5, step: 0.01 }
        ) : b === "Gamma Correction" && p.IsGammaConfig && m instanceof xa && typeof c == "boolean" ? qc(m, c) : c;
      }
    }, o.addEventListener("cellcreated", ({ detail: c }) => {
      const p = c.cell.parentNode;
      if (!p)
        return;
      const g = p.querySelector(
        "bim-table-cell[column='Name']"
      ), w = p.querySelector(
        "bim-table-cell[column='Value']"
      );
      g && !w && (g.style.gridColumn = "1 / -1");
    });
    const r = [];
    for (const [, c] of e.list) {
      const { scene: p, camera: g, renderer: w } = c, _ = de(t, c), x = {
        data: {
          Name: c instanceof Or && c.name || c.uuid
        },
        children: []
      };
      if (p) {
        const m = {
          data: {
            Name: "Scene"
          }
        };
        if (_) {
          const $ = {
            data: {
              Name: "Grid",
              Value: _.three.visible,
              World: c.uuid,
              IsGridConfig: true
            },
            children: [
              {
                data: {
                  Name: "Color",
                  get Value() {
                    return `#${_.material.uniforms.uColor.value.getHexString()}`;
                  },
                  World: c.uuid,
                  IsGridConfig: true
                }
              },
              {
                data: {
                  Name: "Size",
                  get Value() {
                    const C = _.material.uniforms.uSize1.value, E = _.material.uniforms.uSize2.value;
                    return JSON.stringify({ x: C, y: E });
                  },
                  World: c.uuid,
                  IsGridConfig: true
                }
              },
              {
                data: {
                  Name: "Distance",
                  Value: _.material.uniforms.uDistance.value,
                  World: c.uuid,
                  IsGridConfig: true
                }
              }
            ]
          };
          m.children || (m.children = []), m.children.push($);
        }
        const b = p.three.children.filter(
          ($) => $ instanceof DirectionalLight
        );
        for (const $ of b) {
          const C = {
            data: {
              Name: "Directional Light",
              Value: $.visible,
              World: c.uuid,
              Light: $.uuid
            },
            children: [
              {
                data: {
                  Name: "Position",
                  Value: JSON.stringify($.position),
                  World: c.uuid,
                  Light: $.uuid
                }
              },
              {
                data: {
                  Name: "Intensity",
                  Value: $.intensity,
                  World: c.uuid,
                  Light: $.uuid
                }
              },
              {
                data: {
                  Name: "Color",
                  Value: `#${$.color.getHexString()}`,
                  World: c.uuid,
                  Light: $.uuid
                }
              }
            ]
          };
          m.children || (m.children = []), m.children.push(C);
        }
        const v = p.three.children.filter(
          ($) => $ instanceof AmbientLight
        );
        for (const $ of v) {
          const C = {
            data: {
              Name: "Ambient Light",
              Value: $.visible,
              World: c.uuid,
              Light: $.uuid
            },
            children: [
              {
                data: {
                  Name: "Intensity",
                  Value: $.intensity,
                  World: c.uuid,
                  Light: $.uuid
                }
              },
              {
                data: {
                  Name: "Color",
                  Value: `#${$.color.getHexString()}`,
                  World: c.uuid,
                  Light: $.uuid
                }
              }
            ]
          };
          m.children || (m.children = []), m.children.push(C);
        }
        m.children && ((a = m.children) == null ? void 0 : a.length) > 0 && ((l = x.children) == null || l.push(m));
      }
      if (g.three instanceof PerspectiveCamera) {
        const m = {
          data: {
            Name: "Perspective Camera"
          },
          children: [
            {
              data: {
                Name: "Near Frustum",
                Value: g.three.near,
                World: c.uuid
              }
            },
            {
              data: {
                Name: "Far Frustum",
                Value: g.three.far,
                World: c.uuid
              }
            },
            {
              data: {
                Name: "Field of View",
                Value: g.three.fov,
                World: c.uuid
              }
            }
          ]
        };
        if (g.hasCameraControls()) {
          const { controls: b } = g, v = {
            dollyDragInverted: "Invert Drag",
            dollySpeed: "Dolly Speed",
            truckSpeed: "Truck Speed",
            smoothTime: "Smooth Time"
          };
          for (const $ in v) {
            const C = b[$];
            C != null && ((u = m.children) == null || u.push({
              data: {
                Name: v[$],
                Value: C,
                World: c.uuid
              }
            }));
          }
        }
        (h = x.children) == null || h.push(m);
      }
      if (w instanceof xa) {
        const { postproduction: m } = w, b = m.n8ao.configuration, v = {
          data: {
            Name: "Renderer"
          },
          children: [
            {
              data: {
                Name: "Gamma Correction",
                Value: m.settings.gamma ?? false,
                World: c.uuid,
                IsGammaConfig: true
              }
            },
            {
              data: {
                Name: "Ambient Oclussion",
                Value: m.settings.ao ?? false,
                World: c.uuid,
                IsAOConfig: true
              },
              children: [
                {
                  data: {
                    Name: "Samples",
                    Value: b.aoSamples,
                    World: c.uuid,
                    IsAOConfig: true
                  }
                },
                {
                  data: {
                    Name: "Color",
                    Value: `#${b.color.getHexString()}`,
                    World: c.uuid,
                    IsAOConfig: true
                  }
                },
                {
                  data: {
                    Name: "Half Resolution",
                    Value: b.halfRes,
                    World: c.uuid,
                    IsAOConfig: true
                  }
                },
                {
                  data: {
                    Name: "Screen Space Radius",
                    Value: b.screenSpaceRadius,
                    World: c.uuid,
                    IsAOConfig: true
                  }
                },
                {
                  data: {
                    Name: "Radius",
                    Value: b.aoRadius,
                    World: c.uuid,
                    IsAOConfig: true
                  }
                },
                {
                  data: {
                    Name: "Intensity",
                    Value: b.intensity,
                    World: c.uuid,
                    IsAOConfig: true
                  }
                },
                {
                  data: {
                    Name: "Distance Falloff",
                    Value: b.distanceFalloff,
                    World: c.uuid,
                    IsAOConfig: true
                  }
                },
                {
                  data: {
                    Name: "Denoise Samples",
                    Value: b.denoiseSamples,
                    World: c.uuid,
                    IsAOConfig: true
                  }
                },
                {
                  data: {
                    Name: "Denoise Radius",
                    Value: b.denoiseRadius,
                    World: c.uuid,
                    IsAOConfig: true
                  }
                }
              ]
            },
            {
              data: {
                Name: "Custom Effects",
                Value: m.settings.custom ?? false,
                World: c.uuid,
                IsCEConfig: true
              },
              children: [
                {
                  data: {
                    Name: "Gloss",
                    Value: m.customEffects.glossEnabled,
                    World: c.uuid,
                    IsGlossConfig: true
                  },
                  children: [
                    {
                      data: {
                        Name: "Min",
                        Value: m.customEffects.minGloss,
                        World: c.uuid,
                        IsGlossConfig: true
                      }
                    },
                    {
                      data: {
                        Name: "Max",
                        Value: m.customEffects.maxGloss,
                        World: c.uuid,
                        IsGlossConfig: true
                      }
                    },
                    {
                      data: {
                        Name: "Exponent",
                        Value: m.customEffects.glossExponent,
                        World: c.uuid,
                        IsGlossConfig: true
                      }
                    }
                  ]
                },
                {
                  data: {
                    Name: "Outline",
                    Value: m.customEffects.outlineEnabled,
                    World: c.uuid,
                    IsOutlineConfig: true
                  },
                  children: [
                    {
                      data: {
                        Name: "Color",
                        get Value() {
                          const $ = new Color(
                            m.customEffects.lineColor
                          ), C = m.customEffects.opacity;
                          return JSON.stringify({
                            color: `#${$.getHexString()}`,
                            opacity: C
                          });
                        },
                        World: c.uuid,
                        IsOutlineConfig: true
                      }
                    },
                    {
                      data: {
                        Name: "Tolerance",
                        Value: m.customEffects.tolerance,
                        World: c.uuid,
                        IsOutlineConfig: true
                      }
                    }
                  ]
                }
              ]
            }
          ]
        };
        (d = x.children) == null || d.push(v);
      }
      r.push(x);
    }
    o.columns = [{ name: "Name", width: "11rem" }], o.hiddenColumns = [
      "World",
      "Light",
      "IsAOConfig",
      "IsCEConfig",
      "IsGlossConfig",
      "IsOutlineConfig",
      "IsGammaConfig",
      "IsGridConfig"
    ], o.data = r;
  })} headers-hidden expanded></bim-table>`;
};
var Jc = (i, t = true) => {
  const e = xt.create(
    Xc,
    i
  );
  if (t) {
    const [s] = e, n = () => e[1](), { components: o } = i, r = o.get(Ci);
    r.onDisposed.add(s.remove);
    for (const [, a] of r.list)
      a.onDisposed.add(n);
    s.addEventListener("disconnected", () => {
      r.onDisposed.remove(s.remove);
      for (const [, a] of r.list)
        a.onDisposed.remove(n);
    });
  }
  return e;
};
var Qc = Object.freeze(Object.defineProperty({
  __proto__: null,
  worldsConfiguration: Jc
}, Symbol.toStringTag, { value: "Module" }));
var ih = {
  ...xc,
  ...Cc,
  ...kc,
  ...zc,
  ...Fc,
  ...Qc
};
var Ze = globalThis;
var fn = Ze.ShadowRoot && (Ze.ShadyCSS === void 0 || Ze.ShadyCSS.nativeShadow) && "adoptedStyleSheets" in Document.prototype && "replace" in CSSStyleSheet.prototype;
var mn = Symbol();
var ls = /* @__PURE__ */ new WeakMap();
var Xo = class {
  constructor(t, e, s) {
    if (this._$cssResult$ = true, s !== mn)
      throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");
    this.cssText = t, this.t = e;
  }
  get styleSheet() {
    let t = this.o;
    const e = this.t;
    if (fn && t === void 0) {
      const s = e !== void 0 && e.length === 1;
      s && (t = ls.get(e)), t === void 0 && ((this.o = t = new CSSStyleSheet()).replaceSync(this.cssText), s && ls.set(e, t));
    }
    return t;
  }
  toString() {
    return this.cssText;
  }
};
var Zc = (i) => new Xo(typeof i == "string" ? i : i + "", void 0, mn);
var Jo = (i, ...t) => {
  const e = i.length === 1 ? i[0] : t.reduce((s, n, o) => s + ((r) => {
    if (r._$cssResult$ === true)
      return r.cssText;
    if (typeof r == "number")
      return r;
    throw Error("Value passed to 'css' function must be a 'css' function result: " + r + ". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.");
  })(n) + i[o + 1], i[0]);
  return new Xo(e, i, mn);
};
var Kc = (i, t) => {
  if (fn)
    i.adoptedStyleSheets = t.map((e) => e instanceof CSSStyleSheet ? e : e.styleSheet);
  else
    for (const e of t) {
      const s = document.createElement("style"), n = Ze.litNonce;
      n !== void 0 && s.setAttribute("nonce", n), s.textContent = e.cssText, i.appendChild(s);
    }
};
var cs = fn ? (i) => i : (i) => i instanceof CSSStyleSheet ? ((t) => {
  let e = "";
  for (const s of t.cssRules)
    e += s.cssText;
  return Zc(e);
})(i) : i;
var { is: tu, defineProperty: eu, getOwnPropertyDescriptor: iu, getOwnPropertyNames: nu, getOwnPropertySymbols: su, getPrototypeOf: ou } = Object;
var bt = globalThis;
var us = bt.trustedTypes;
var ru = us ? us.emptyScript : "";
var Pi = bt.reactiveElementPolyfillSupport;
var ve = (i, t) => i;
var ci = { toAttribute(i, t) {
  switch (t) {
    case Boolean:
      i = i ? ru : null;
      break;
    case Object:
    case Array:
      i = i == null ? i : JSON.stringify(i);
  }
  return i;
}, fromAttribute(i, t) {
  let e = i;
  switch (t) {
    case Boolean:
      e = i !== null;
      break;
    case Number:
      e = i === null ? null : Number(i);
      break;
    case Object:
    case Array:
      try {
        e = JSON.parse(i);
      } catch {
        e = null;
      }
  }
  return e;
} };
var bn = (i, t) => !tu(i, t);
var hs = { attribute: true, type: String, converter: ci, reflect: false, hasChanged: bn };
Symbol.metadata ?? (Symbol.metadata = Symbol("metadata")), bt.litPropertyMetadata ?? (bt.litPropertyMetadata = /* @__PURE__ */ new WeakMap());
var Ht = class extends HTMLElement {
  static addInitializer(t) {
    this._$Ei(), (this.l ?? (this.l = [])).push(t);
  }
  static get observedAttributes() {
    return this.finalize(), this._$Eh && [...this._$Eh.keys()];
  }
  static createProperty(t, e = hs) {
    if (e.state && (e.attribute = false), this._$Ei(), this.elementProperties.set(t, e), !e.noAccessor) {
      const s = Symbol(), n = this.getPropertyDescriptor(t, s, e);
      n !== void 0 && eu(this.prototype, t, n);
    }
  }
  static getPropertyDescriptor(t, e, s) {
    const { get: n, set: o } = iu(this.prototype, t) ?? { get() {
      return this[e];
    }, set(r) {
      this[e] = r;
    } };
    return { get() {
      return n == null ? void 0 : n.call(this);
    }, set(r) {
      const a = n == null ? void 0 : n.call(this);
      o.call(this, r), this.requestUpdate(t, a, s);
    }, configurable: true, enumerable: true };
  }
  static getPropertyOptions(t) {
    return this.elementProperties.get(t) ?? hs;
  }
  static _$Ei() {
    if (this.hasOwnProperty(ve("elementProperties")))
      return;
    const t = ou(this);
    t.finalize(), t.l !== void 0 && (this.l = [...t.l]), this.elementProperties = new Map(t.elementProperties);
  }
  static finalize() {
    if (this.hasOwnProperty(ve("finalized")))
      return;
    if (this.finalized = true, this._$Ei(), this.hasOwnProperty(ve("properties"))) {
      const e = this.properties, s = [...nu(e), ...su(e)];
      for (const n of s)
        this.createProperty(n, e[n]);
    }
    const t = this[Symbol.metadata];
    if (t !== null) {
      const e = litPropertyMetadata.get(t);
      if (e !== void 0)
        for (const [s, n] of e)
          this.elementProperties.set(s, n);
    }
    this._$Eh = /* @__PURE__ */ new Map();
    for (const [e, s] of this.elementProperties) {
      const n = this._$Eu(e, s);
      n !== void 0 && this._$Eh.set(n, e);
    }
    this.elementStyles = this.finalizeStyles(this.styles);
  }
  static finalizeStyles(t) {
    const e = [];
    if (Array.isArray(t)) {
      const s = new Set(t.flat(1 / 0).reverse());
      for (const n of s)
        e.unshift(cs(n));
    } else
      t !== void 0 && e.push(cs(t));
    return e;
  }
  static _$Eu(t, e) {
    const s = e.attribute;
    return s === false ? void 0 : typeof s == "string" ? s : typeof t == "string" ? t.toLowerCase() : void 0;
  }
  constructor() {
    super(), this._$Ep = void 0, this.isUpdatePending = false, this.hasUpdated = false, this._$Em = null, this._$Ev();
  }
  _$Ev() {
    var t;
    this._$ES = new Promise((e) => this.enableUpdating = e), this._$AL = /* @__PURE__ */ new Map(), this._$E_(), this.requestUpdate(), (t = this.constructor.l) == null || t.forEach((e) => e(this));
  }
  addController(t) {
    var e;
    (this._$EO ?? (this._$EO = /* @__PURE__ */ new Set())).add(t), this.renderRoot !== void 0 && this.isConnected && ((e = t.hostConnected) == null || e.call(t));
  }
  removeController(t) {
    var e;
    (e = this._$EO) == null || e.delete(t);
  }
  _$E_() {
    const t = /* @__PURE__ */ new Map(), e = this.constructor.elementProperties;
    for (const s of e.keys())
      this.hasOwnProperty(s) && (t.set(s, this[s]), delete this[s]);
    t.size > 0 && (this._$Ep = t);
  }
  createRenderRoot() {
    const t = this.shadowRoot ?? this.attachShadow(this.constructor.shadowRootOptions);
    return Kc(t, this.constructor.elementStyles), t;
  }
  connectedCallback() {
    var t;
    this.renderRoot ?? (this.renderRoot = this.createRenderRoot()), this.enableUpdating(true), (t = this._$EO) == null || t.forEach((e) => {
      var s;
      return (s = e.hostConnected) == null ? void 0 : s.call(e);
    });
  }
  enableUpdating(t) {
  }
  disconnectedCallback() {
    var t;
    (t = this._$EO) == null || t.forEach((e) => {
      var s;
      return (s = e.hostDisconnected) == null ? void 0 : s.call(e);
    });
  }
  attributeChangedCallback(t, e, s) {
    this._$AK(t, s);
  }
  _$EC(t, e) {
    var o;
    const s = this.constructor.elementProperties.get(t), n = this.constructor._$Eu(t, s);
    if (n !== void 0 && s.reflect === true) {
      const r = (((o = s.converter) == null ? void 0 : o.toAttribute) !== void 0 ? s.converter : ci).toAttribute(e, s.type);
      this._$Em = t, r == null ? this.removeAttribute(n) : this.setAttribute(n, r), this._$Em = null;
    }
  }
  _$AK(t, e) {
    var o;
    const s = this.constructor, n = s._$Eh.get(t);
    if (n !== void 0 && this._$Em !== n) {
      const r = s.getPropertyOptions(n), a = typeof r.converter == "function" ? { fromAttribute: r.converter } : ((o = r.converter) == null ? void 0 : o.fromAttribute) !== void 0 ? r.converter : ci;
      this._$Em = n, this[n] = a.fromAttribute(e, r.type), this._$Em = null;
    }
  }
  requestUpdate(t, e, s) {
    if (t !== void 0) {
      if (s ?? (s = this.constructor.getPropertyOptions(t)), !(s.hasChanged ?? bn)(this[t], e))
        return;
      this.P(t, e, s);
    }
    this.isUpdatePending === false && (this._$ES = this._$ET());
  }
  P(t, e, s) {
    this._$AL.has(t) || this._$AL.set(t, e), s.reflect === true && this._$Em !== t && (this._$Ej ?? (this._$Ej = /* @__PURE__ */ new Set())).add(t);
  }
  async _$ET() {
    this.isUpdatePending = true;
    try {
      await this._$ES;
    } catch (e) {
      Promise.reject(e);
    }
    const t = this.scheduleUpdate();
    return t != null && await t, !this.isUpdatePending;
  }
  scheduleUpdate() {
    return this.performUpdate();
  }
  performUpdate() {
    var s;
    if (!this.isUpdatePending)
      return;
    if (!this.hasUpdated) {
      if (this.renderRoot ?? (this.renderRoot = this.createRenderRoot()), this._$Ep) {
        for (const [o, r] of this._$Ep)
          this[o] = r;
        this._$Ep = void 0;
      }
      const n = this.constructor.elementProperties;
      if (n.size > 0)
        for (const [o, r] of n)
          r.wrapped !== true || this._$AL.has(o) || this[o] === void 0 || this.P(o, this[o], r);
    }
    let t = false;
    const e = this._$AL;
    try {
      t = this.shouldUpdate(e), t ? (this.willUpdate(e), (s = this._$EO) == null || s.forEach((n) => {
        var o;
        return (o = n.hostUpdate) == null ? void 0 : o.call(n);
      }), this.update(e)) : this._$EU();
    } catch (n) {
      throw t = false, this._$EU(), n;
    }
    t && this._$AE(e);
  }
  willUpdate(t) {
  }
  _$AE(t) {
    var e;
    (e = this._$EO) == null || e.forEach((s) => {
      var n;
      return (n = s.hostUpdated) == null ? void 0 : n.call(s);
    }), this.hasUpdated || (this.hasUpdated = true, this.firstUpdated(t)), this.updated(t);
  }
  _$EU() {
    this._$AL = /* @__PURE__ */ new Map(), this.isUpdatePending = false;
  }
  get updateComplete() {
    return this.getUpdateComplete();
  }
  getUpdateComplete() {
    return this._$ES;
  }
  shouldUpdate(t) {
    return true;
  }
  update(t) {
    this._$Ej && (this._$Ej = this._$Ej.forEach((e) => this._$EC(e, this[e]))), this._$EU();
  }
  updated(t) {
  }
  firstUpdated(t) {
  }
};
Ht.elementStyles = [], Ht.shadowRootOptions = { mode: "open" }, Ht[ve("elementProperties")] = /* @__PURE__ */ new Map(), Ht[ve("finalized")] = /* @__PURE__ */ new Map(), Pi == null || Pi({ ReactiveElement: Ht }), (bt.reactiveElementVersions ?? (bt.reactiveElementVersions = [])).push("2.0.4");
var ye = globalThis;
var ui = ye.trustedTypes;
var ds = ui ? ui.createPolicy("lit-html", { createHTML: (i) => i }) : void 0;
var Qo = "$lit$";
var ft = `lit$${Math.random().toFixed(9).slice(2)}$`;
var Zo = "?" + ft;
var au = `<${Zo}>`;
var Nt = document;
var Se = () => Nt.createComment("");
var ke = (i) => i === null || typeof i != "object" && typeof i != "function";
var Ko = Array.isArray;
var lu = (i) => Ko(i) || typeof (i == null ? void 0 : i[Symbol.iterator]) == "function";
var Ri2 = `[ 	
\f\r]`;
var pe = /<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g;
var ps = /-->/g;
var fs = />/g;
var Ot = RegExp(`>|${Ri2}(?:([^\\s"'>=/]+)(${Ri2}*=${Ri2}*(?:[^ 	
\f\r"'\`<>=]|("|')|))|$)`, "g");
var ms = /'/g;
var bs = /"/g;
var tr = /^(?:script|style|textarea|title)$/i;
var cu = (i) => (t, ...e) => ({ _$litType$: i, strings: t, values: e });
var er = cu(1);
var Jt = Symbol.for("lit-noChange");
var j = Symbol.for("lit-nothing");
var gs = /* @__PURE__ */ new WeakMap();
var It = Nt.createTreeWalker(Nt, 129);
function ir(i, t) {
  if (!Array.isArray(i) || !i.hasOwnProperty("raw"))
    throw Error("invalid template strings array");
  return ds !== void 0 ? ds.createHTML(t) : t;
}
var uu = (i, t) => {
  const e = i.length - 1, s = [];
  let n, o = t === 2 ? "<svg>" : "", r = pe;
  for (let a = 0; a < e; a++) {
    const l = i[a];
    let u, h, d = -1, c = 0;
    for (; c < l.length && (r.lastIndex = c, h = r.exec(l), h !== null); )
      c = r.lastIndex, r === pe ? h[1] === "!--" ? r = ps : h[1] !== void 0 ? r = fs : h[2] !== void 0 ? (tr.test(h[2]) && (n = RegExp("</" + h[2], "g")), r = Ot) : h[3] !== void 0 && (r = Ot) : r === Ot ? h[0] === ">" ? (r = n ?? pe, d = -1) : h[1] === void 0 ? d = -2 : (d = r.lastIndex - h[2].length, u = h[1], r = h[3] === void 0 ? Ot : h[3] === '"' ? bs : ms) : r === bs || r === ms ? r = Ot : r === ps || r === fs ? r = pe : (r = Ot, n = void 0);
    const p = r === Ot && i[a + 1].startsWith("/>") ? " " : "";
    o += r === pe ? l + au : d >= 0 ? (s.push(u), l.slice(0, d) + Qo + l.slice(d) + ft + p) : l + ft + (d === -2 ? a : p);
  }
  return [ir(i, o + (i[e] || "<?>") + (t === 2 ? "</svg>" : "")), s];
};
var Oe = class _Oe {
  constructor({ strings: t, _$litType$: e }, s) {
    let n;
    this.parts = [];
    let o = 0, r = 0;
    const a = t.length - 1, l = this.parts, [u, h] = uu(t, e);
    if (this.el = _Oe.createElement(u, s), It.currentNode = this.el.content, e === 2) {
      const d = this.el.content.firstChild;
      d.replaceWith(...d.childNodes);
    }
    for (; (n = It.nextNode()) !== null && l.length < a; ) {
      if (n.nodeType === 1) {
        if (n.hasAttributes())
          for (const d of n.getAttributeNames())
            if (d.endsWith(Qo)) {
              const c = h[r++], p = n.getAttribute(d).split(ft), g = /([.?@])?(.*)/.exec(c);
              l.push({ type: 1, index: o, name: g[2], strings: p, ctor: g[1] === "." ? du : g[1] === "?" ? pu : g[1] === "@" ? fu : $i }), n.removeAttribute(d);
            } else
              d.startsWith(ft) && (l.push({ type: 6, index: o }), n.removeAttribute(d));
        if (tr.test(n.tagName)) {
          const d = n.textContent.split(ft), c = d.length - 1;
          if (c > 0) {
            n.textContent = ui ? ui.emptyScript : "";
            for (let p = 0; p < c; p++)
              n.append(d[p], Se()), It.nextNode(), l.push({ type: 2, index: ++o });
            n.append(d[c], Se());
          }
        }
      } else if (n.nodeType === 8)
        if (n.data === Zo)
          l.push({ type: 2, index: o });
        else {
          let d = -1;
          for (; (d = n.data.indexOf(ft, d + 1)) !== -1; )
            l.push({ type: 7, index: o }), d += ft.length - 1;
        }
      o++;
    }
  }
  static createElement(t, e) {
    const s = Nt.createElement("template");
    return s.innerHTML = t, s;
  }
};
function Qt(i, t, e = i, s) {
  var r, a;
  if (t === Jt)
    return t;
  let n = s !== void 0 ? (r = e._$Co) == null ? void 0 : r[s] : e._$Cl;
  const o = ke(t) ? void 0 : t._$litDirective$;
  return (n == null ? void 0 : n.constructor) !== o && ((a = n == null ? void 0 : n._$AO) == null || a.call(n, false), o === void 0 ? n = void 0 : (n = new o(i), n._$AT(i, e, s)), s !== void 0 ? (e._$Co ?? (e._$Co = []))[s] = n : e._$Cl = n), n !== void 0 && (t = Qt(i, n._$AS(i, t.values), n, s)), t;
}
var hu = class {
  constructor(t, e) {
    this._$AV = [], this._$AN = void 0, this._$AD = t, this._$AM = e;
  }
  get parentNode() {
    return this._$AM.parentNode;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  u(t) {
    const { el: { content: e }, parts: s } = this._$AD, n = ((t == null ? void 0 : t.creationScope) ?? Nt).importNode(e, true);
    It.currentNode = n;
    let o = It.nextNode(), r = 0, a = 0, l = s[0];
    for (; l !== void 0; ) {
      if (r === l.index) {
        let u;
        l.type === 2 ? u = new Ve(o, o.nextSibling, this, t) : l.type === 1 ? u = new l.ctor(o, l.name, l.strings, this, t) : l.type === 6 && (u = new mu(o, this, t)), this._$AV.push(u), l = s[++a];
      }
      r !== (l == null ? void 0 : l.index) && (o = It.nextNode(), r++);
    }
    return It.currentNode = Nt, n;
  }
  p(t) {
    let e = 0;
    for (const s of this._$AV)
      s !== void 0 && (s.strings !== void 0 ? (s._$AI(t, s, e), e += s.strings.length - 2) : s._$AI(t[e])), e++;
  }
};
var Ve = class _Ve {
  get _$AU() {
    var t;
    return ((t = this._$AM) == null ? void 0 : t._$AU) ?? this._$Cv;
  }
  constructor(t, e, s, n) {
    this.type = 2, this._$AH = j, this._$AN = void 0, this._$AA = t, this._$AB = e, this._$AM = s, this.options = n, this._$Cv = (n == null ? void 0 : n.isConnected) ?? true;
  }
  get parentNode() {
    let t = this._$AA.parentNode;
    const e = this._$AM;
    return e !== void 0 && (t == null ? void 0 : t.nodeType) === 11 && (t = e.parentNode), t;
  }
  get startNode() {
    return this._$AA;
  }
  get endNode() {
    return this._$AB;
  }
  _$AI(t, e = this) {
    t = Qt(this, t, e), ke(t) ? t === j || t == null || t === "" ? (this._$AH !== j && this._$AR(), this._$AH = j) : t !== this._$AH && t !== Jt && this._(t) : t._$litType$ !== void 0 ? this.$(t) : t.nodeType !== void 0 ? this.T(t) : lu(t) ? this.k(t) : this._(t);
  }
  S(t) {
    return this._$AA.parentNode.insertBefore(t, this._$AB);
  }
  T(t) {
    this._$AH !== t && (this._$AR(), this._$AH = this.S(t));
  }
  _(t) {
    this._$AH !== j && ke(this._$AH) ? this._$AA.nextSibling.data = t : this.T(Nt.createTextNode(t)), this._$AH = t;
  }
  $(t) {
    var o;
    const { values: e, _$litType$: s } = t, n = typeof s == "number" ? this._$AC(t) : (s.el === void 0 && (s.el = Oe.createElement(ir(s.h, s.h[0]), this.options)), s);
    if (((o = this._$AH) == null ? void 0 : o._$AD) === n)
      this._$AH.p(e);
    else {
      const r = new hu(n, this), a = r.u(this.options);
      r.p(e), this.T(a), this._$AH = r;
    }
  }
  _$AC(t) {
    let e = gs.get(t.strings);
    return e === void 0 && gs.set(t.strings, e = new Oe(t)), e;
  }
  k(t) {
    Ko(this._$AH) || (this._$AH = [], this._$AR());
    const e = this._$AH;
    let s, n = 0;
    for (const o of t)
      n === e.length ? e.push(s = new _Ve(this.S(Se()), this.S(Se()), this, this.options)) : s = e[n], s._$AI(o), n++;
    n < e.length && (this._$AR(s && s._$AB.nextSibling, n), e.length = n);
  }
  _$AR(t = this._$AA.nextSibling, e) {
    var s;
    for ((s = this._$AP) == null ? void 0 : s.call(this, false, true, e); t && t !== this._$AB; ) {
      const n = t.nextSibling;
      t.remove(), t = n;
    }
  }
  setConnected(t) {
    var e;
    this._$AM === void 0 && (this._$Cv = t, (e = this._$AP) == null || e.call(this, t));
  }
};
var $i = class {
  get tagName() {
    return this.element.tagName;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  constructor(t, e, s, n, o) {
    this.type = 1, this._$AH = j, this._$AN = void 0, this.element = t, this.name = e, this._$AM = n, this.options = o, s.length > 2 || s[0] !== "" || s[1] !== "" ? (this._$AH = Array(s.length - 1).fill(new String()), this.strings = s) : this._$AH = j;
  }
  _$AI(t, e = this, s, n) {
    const o = this.strings;
    let r = false;
    if (o === void 0)
      t = Qt(this, t, e, 0), r = !ke(t) || t !== this._$AH && t !== Jt, r && (this._$AH = t);
    else {
      const a = t;
      let l, u;
      for (t = o[0], l = 0; l < o.length - 1; l++)
        u = Qt(this, a[s + l], e, l), u === Jt && (u = this._$AH[l]), r || (r = !ke(u) || u !== this._$AH[l]), u === j ? t = j : t !== j && (t += (u ?? "") + o[l + 1]), this._$AH[l] = u;
    }
    r && !n && this.j(t);
  }
  j(t) {
    t === j ? this.element.removeAttribute(this.name) : this.element.setAttribute(this.name, t ?? "");
  }
};
var du = class extends $i {
  constructor() {
    super(...arguments), this.type = 3;
  }
  j(t) {
    this.element[this.name] = t === j ? void 0 : t;
  }
};
var pu = class extends $i {
  constructor() {
    super(...arguments), this.type = 4;
  }
  j(t) {
    this.element.toggleAttribute(this.name, !!t && t !== j);
  }
};
var fu = class extends $i {
  constructor(t, e, s, n, o) {
    super(t, e, s, n, o), this.type = 5;
  }
  _$AI(t, e = this) {
    if ((t = Qt(this, t, e, 0) ?? j) === Jt)
      return;
    const s = this._$AH, n = t === j && s !== j || t.capture !== s.capture || t.once !== s.once || t.passive !== s.passive, o = t !== j && (s === j || n);
    n && this.element.removeEventListener(this.name, this, s), o && this.element.addEventListener(this.name, this, t), this._$AH = t;
  }
  handleEvent(t) {
    var e;
    typeof this._$AH == "function" ? this._$AH.call(((e = this.options) == null ? void 0 : e.host) ?? this.element, t) : this._$AH.handleEvent(t);
  }
};
var mu = class {
  constructor(t, e, s) {
    this.element = t, this.type = 6, this._$AN = void 0, this._$AM = e, this.options = s;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  _$AI(t) {
    Qt(this, t);
  }
};
var Ni = ye.litHtmlPolyfillSupport;
Ni == null || Ni(Oe, Ve), (ye.litHtmlVersions ?? (ye.litHtmlVersions = [])).push("3.1.3");
var bu = (i, t, e) => {
  const s = (e == null ? void 0 : e.renderBefore) ?? t;
  let n = s._$litPart$;
  if (n === void 0) {
    const o = (e == null ? void 0 : e.renderBefore) ?? null;
    s._$litPart$ = n = new Ve(t.insertBefore(Se(), o), o, void 0, e ?? {});
  }
  return n._$AI(i), n;
};
var Bt = class extends Ht {
  constructor() {
    super(...arguments), this.renderOptions = { host: this }, this._$Do = void 0;
  }
  createRenderRoot() {
    var e;
    const t = super.createRenderRoot();
    return (e = this.renderOptions).renderBefore ?? (e.renderBefore = t.firstChild), t;
  }
  update(t) {
    const e = this.render();
    this.hasUpdated || (this.renderOptions.isConnected = this.isConnected), super.update(t), this._$Do = bu(e, this.renderRoot, this.renderOptions);
  }
  connectedCallback() {
    var t;
    super.connectedCallback(), (t = this._$Do) == null || t.setConnected(true);
  }
  disconnectedCallback() {
    var t;
    super.disconnectedCallback(), (t = this._$Do) == null || t.setConnected(false);
  }
  render() {
    return Jt;
  }
};
var vs;
Bt._$litElement$ = true, Bt.finalized = true, (vs = globalThis.litElementHydrateSupport) == null || vs.call(globalThis, { LitElement: Bt });
var Mi = globalThis.litElementPolyfillSupport;
Mi == null || Mi({ LitElement: Bt });
(globalThis.litElementVersions ?? (globalThis.litElementVersions = [])).push("4.0.5");
var gu = { attribute: true, type: String, converter: ci, reflect: false, hasChanged: bn };
var vu = (i = gu, t, e) => {
  const { kind: s, metadata: n } = e;
  let o = globalThis.litPropertyMetadata.get(n);
  if (o === void 0 && globalThis.litPropertyMetadata.set(n, o = /* @__PURE__ */ new Map()), o.set(e.name, i), s === "accessor") {
    const { name: r } = e;
    return { set(a) {
      const l = t.get.call(this);
      t.set.call(this, a), this.requestUpdate(r, l, i);
    }, init(a) {
      return a !== void 0 && this.P(r, void 0, i), a;
    } };
  }
  if (s === "setter") {
    const { name: r } = e;
    return function(a) {
      const l = this[r];
      t.call(this, a), this.requestUpdate(r, l, i);
    };
  }
  throw Error("Unsupported decorator location: " + s);
};
function et(i) {
  return (t, e) => typeof e == "object" ? vu(i, t, e) : ((s, n, o) => {
    const r = n.hasOwnProperty(o);
    return n.constructor.createProperty(o, r ? { ...s, wrapped: true } : s), r ? Object.getOwnPropertyDescriptor(n, o) : void 0;
  })(i, t, e);
}
function yu(i) {
  return et({ ...i, state: true, attribute: false });
}
var _u = class extends Object3D {
  constructor(t = document.createElement("div")) {
    super(), this.isCSS2DObject = true, this.element = t, this.element.style.position = "absolute", this.element.style.userSelect = "none", this.element.setAttribute("draggable", false), this.center = new Vector2(0.5, 0.5), this.addEventListener("removed", function() {
      this.traverse(function(e) {
        e.element instanceof Element && e.element.parentNode !== null && e.element.parentNode.removeChild(e.element);
      });
    });
  }
  copy(t, e) {
    return super.copy(t, e), this.element = t.element.cloneNode(true), this.center = t.center, this;
  }
};
new Vector3();
new Matrix4();
new Matrix4();
new Vector3();
new Vector3();
var xu = class {
  constructor(t, e) {
    this._group = new Group(), this._frustum = new Frustum(), this._frustumMat = new Matrix4(), this._regenerateDelay = 200, this._regenerateCounter = 0, this.material = new LineBasicMaterial({ color: "#2e3338" }), this.numbers = new Group(), this.maxRegenerateRetrys = 4, this.gridsFactor = 5, this._scaleX = 1, this._scaleY = 1, this._camera = t, this._container = e;
    const s = this.newGrid(-1), n = this.newGrid(-2);
    this.grids = { main: s, secondary: n }, this._group.add(n, s, this.numbers);
  }
  set scaleX(t) {
    this._scaleX = t, this.regenerate();
  }
  get scaleX() {
    return this._scaleX;
  }
  set scaleY(t) {
    this._scaleY = t, this.regenerate();
  }
  get scaleY() {
    return this._scaleY;
  }
  get() {
    return this._group;
  }
  dispose() {
    const { main: t, secondary: e } = this.grids;
    t.removeFromParent(), e.removeFromParent(), t.geometry.dispose(), t.material.dispose(), e.geometry.dispose(), e.material.dispose();
  }
  regenerate() {
    if (!this.isGridReady()) {
      if (this._regenerateCounter++, this._regenerateCounter > this.maxRegenerateRetrys)
        throw new Error("Grid could not be regenerated");
      setTimeout(() => this.regenerate, this._regenerateDelay);
      return;
    }
    this._regenerateCounter = 0, this._camera.updateMatrix(), this._camera.updateMatrixWorld();
    const e = this._frustumMat.multiplyMatrices(
      this._camera.projectionMatrix,
      this._camera.matrixWorldInverse
    );
    this._frustum.setFromProjectionMatrix(e);
    const { planes: s } = this._frustum, n = s[0].constant * -s[0].normal.x, o = s[1].constant * -s[1].normal.x, r = s[2].constant * -s[2].normal.y, a = s[3].constant * -s[3].normal.y, l = Math.abs(n - o), u = Math.abs(a - r), { clientWidth: h, clientHeight: d } = this._container, c = Math.max(h, d), g = Math.max(l, u) / c, w = Math.ceil(Math.log10(l / this.scaleX)), _ = Math.ceil(Math.log10(u / this.scaleY)), x = 10 ** (w - 2) * this.scaleX, m = 10 ** (_ - 2) * this.scaleY, b = x * this.gridsFactor, v = m * this.gridsFactor, $ = Math.ceil(u / v), C = Math.ceil(l / b), E = Math.ceil(u / m), A = Math.ceil(l / x), B = x * Math.ceil(o / x), I = m * Math.ceil(r / m), W = b * Math.ceil(o / b), G = v * Math.ceil(r / v), ht = [...this.numbers.children];
    for (const H of ht)
      H.removeFromParent();
    this.numbers.children = [];
    const q = [], Y = 9 * g, z = 1e4, st = Math.round(Math.abs(W / this.scaleX) * z) / z, ce = (C - 1) * b, nr = Math.round(Math.abs((W + ce) / this.scaleX) * z) / z, sr = Math.max(st, nr).toString().length * Y;
    let Ci2 = Math.ceil(sr / b) * b;
    for (let H = 0; H < C; H++) {
      let D = W + H * b;
      q.push(D, a, 0, D, r, 0);
      const ue = D / this.scaleX;
      D = Math.round(D * z) / z, Ci2 = Math.round(Ci2 * z) / z;
      const We2 = D % Ci2;
      if (!(b < 1 || v < 1) && Math.abs(We2) > 0.01)
        continue;
      const cr = this.newNumber(ue), ur = 12 * g;
      cr.position.set(D, r + ur, 0);
    }
    for (let H = 0; H < $; H++) {
      const D = G + H * v;
      q.push(o, D, 0, n, D, 0);
      const ue = this.newNumber(D / this.scaleY);
      let We2 = 12;
      ue.element.textContent && (We2 += 4 * ue.element.textContent.length);
      const _n2 = We2 * g;
      ue.position.set(o + _n2, D, 0);
    }
    const Ei = [];
    for (let H = 0; H < A; H++) {
      const D = B + H * x;
      Ei.push(D, a, 0, D, r, 0);
    }
    for (let H = 0; H < E; H++) {
      const D = I + H * m;
      Ei.push(o, D, 0, n, D, 0);
    }
    const or = new BufferAttribute(new Float32Array(q), 3), rr = new BufferAttribute(new Float32Array(Ei), 3), { main: ar, secondary: lr } = this.grids;
    ar.geometry.setAttribute("position", or), lr.geometry.setAttribute("position", rr);
  }
  newNumber(t) {
    const e = document.createElement("bim-label");
    e.textContent = String(Math.round(t * 100) / 100);
    const s = new _u(e);
    return this.numbers.add(s), s;
  }
  newGrid(t) {
    const e = new BufferGeometry(), s = new LineSegments(e, this.material);
    return s.frustumCulled = false, s.renderOrder = t, s;
  }
  isGridReady() {
    const t = this._camera.projectionMatrix.elements;
    for (let e = 0; e < t.length; e++) {
      const s = t[e];
      if (Number.isNaN(s))
        return false;
    }
    return true;
  }
};
var wu = Object.defineProperty;
var $u = Object.getOwnPropertyDescriptor;
var gn = (i, t, e, s) => {
  for (var n = $u(t, e), o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = r(t, e, n) || n);
  return n && wu(t, e, n), n;
};
var vn = class vn2 extends Bt {
  constructor() {
    super(...arguments), this._grid = null, this._world = null, this.resize = () => {
      this._world && this._grid && this._grid.regenerate();
    };
  }
  set gridColor(t) {
    if (this._gridColor = t, !(t && this._grid))
      return;
    const e = Number(t.replace("#", "0x"));
    Number.isNaN(e) || this._grid.material.color.setHex(e);
  }
  get gridColor() {
    return this._gridColor;
  }
  set gridScaleX(t) {
    this._gridScaleX = t, t && this._grid && (this._grid.scaleX = t);
  }
  get gridScaleX() {
    return this._gridScaleX;
  }
  set gridScaleY(t) {
    this._gridScaleY = t, t && this._grid && (this._grid.scaleY = t);
  }
  get gridScaleY() {
    return this._gridScaleY;
  }
  set components(t) {
    this.dispose();
    const s = t.get(Ci).create();
    this._world = s, s.scene = new ia(t), s.scene.setup(), s.renderer = new Bf(t, this);
    const n = new oa(t);
    s.camera = n;
    const o = new xu(n.threeOrtho, this);
    this._grid = o, s.scene.three.add(o.get()), n.controls.addEventListener(
      "update",
      () => o.regenerate()
    ), setTimeout(async () => {
      s.camera.updateAspect(), n.set("Plan"), await n.controls.setLookAt(0, 0, 100, 0, 0, 0), await n.projection.set("Orthographic"), n.controls.dollySpeed = 3, n.controls.draggingSmoothTime = 0.085, n.controls.maxZoom = 1e3, n.controls.zoom(4);
    });
  }
  get world() {
    return this._world;
  }
  dispose() {
    var t;
    (t = this.world) == null || t.dispose(), this._world = null, this._grid = null;
  }
  connectedCallback() {
    super.connectedCallback(), new ResizeObserver(this.resize).observe(this);
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this.dispose();
  }
  render() {
    return er`<slot></slot>`;
  }
};
vn.styles = Jo`
    :host {
      position: relative;
      display: flex;
      min-width: 0px;
      height: 100%;
      background-color: var(--bim-ui_bg-base);
    }
  `;
var Zt = vn;
gn([
  et({ type: String, attribute: "grid-color", reflect: true })
], Zt.prototype, "gridColor");
gn([
  et({ type: Number, attribute: "grid-scale-x", reflect: true })
], Zt.prototype, "gridScaleX");
gn([
  et({ type: Number, attribute: "grid-scale-y", reflect: true })
], Zt.prototype, "gridScaleY");
var Cu = Object.defineProperty;
var Et = (i, t, e, s) => {
  for (var n = void 0, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = r(t, e, n) || n);
  return n && Cu(t, e, n), n;
};
var yn = class yn2 extends Bt {
  constructor() {
    super(...arguments), this._defaults = {
      size: 60
    }, this._cssMatrix3D = "", this._matrix = new Matrix4(), this._onRightClick = new Event("rightclick"), this._onLeftClick = new Event("leftclick"), this._onTopClick = new Event("topclick"), this._onBottomClick = new Event("bottomclick"), this._onFrontClick = new Event("frontclick"), this._onBackClick = new Event("backclick"), this._camera = null, this._epsilon = (t) => Math.abs(t) < 1e-10 ? 0 : t;
  }
  set camera(t) {
    this._camera = t, this.updateOrientation();
  }
  get camera() {
    return this._camera;
  }
  updateOrientation() {
    if (!this.camera)
      return;
    this._matrix.extractRotation(this.camera.matrixWorldInverse);
    const { elements: t } = this._matrix;
    this._cssMatrix3D = `matrix3d(
      ${this._epsilon(t[0])},
      ${this._epsilon(-t[1])},
      ${this._epsilon(t[2])},
      ${this._epsilon(t[3])},
      ${this._epsilon(t[4])},
      ${this._epsilon(-t[5])},
      ${this._epsilon(t[6])},
      ${this._epsilon(t[7])},
      ${this._epsilon(t[8])},
      ${this._epsilon(-t[9])},
      ${this._epsilon(t[10])},
      ${this._epsilon(t[11])},
      ${this._epsilon(t[12])},
      ${this._epsilon(-t[13])},
      ${this._epsilon(t[14])},
      ${this._epsilon(t[15])})
    `;
  }
  render() {
    const t = this.size ?? this._defaults.size;
    return er`
      <style>
        .face,
        .cube {
          width: ${t}px;
          height: ${t}px;
          transform: translateZ(-300px) ${this._cssMatrix3D};
        }

        .face-right {
          translate: ${t / 2}px 0 0;
        }

        .face-left {
          translate: ${-t / 2}px 0 0;
        }

        .face-top {
          translate: 0 ${t / 2}px 0;
        }

        .face-bottom {
          translate: 0 ${-t / 2}px 0;
        }

        .face-front {
          translate: 0 0 ${t / 2}px;
        }

        .face-back {
          translate: 0 0 ${-t / 2}px;
        }
      </style>
      <div class="parent">
        <div class="cube">
          <div
            class="face x-direction face-right"
            @click=${() => this.dispatchEvent(this._onRightClick)}
          >
            ${this.rightText}
          </div>
          <div
            class="face x-direction face-left"
            @click=${() => this.dispatchEvent(this._onLeftClick)}
          >
            ${this.leftText}
          </div>
          <div
            class="face y-direction face-top"
            @click=${() => this.dispatchEvent(this._onTopClick)}
          >
            ${this.topText}
          </div>
          <div
            class="face y-direction face-bottom"
            @click=${() => this.dispatchEvent(this._onBottomClick)}
          >
            ${this.bottomText}
          </div>
          <div
            class="face z-direction face-front"
            @click=${() => this.dispatchEvent(this._onFrontClick)}
          >
            ${this.frontText}
          </div>
          <div
            class="face z-direction face-back"
            @click=${() => this.dispatchEvent(this._onBackClick)}
          >
            ${this.backText}
          </div>
        </div>
      </div>
    `;
  }
};
yn.styles = Jo`
    :host {
      position: absolute;
      z-index: 999;
      bottom: 1rem;
      right: 1rem;
    }

    .parent {
      perspective: 400px;
    }

    .cube {
      position: relative;
      transform-style: preserve-3d;
    }

    .face {
      position: absolute;
      display: flex;
      justify-content: center;
      user-select: none;
      align-items: center;
      cursor: pointer;
      text-align: center;
      transition: all 0.2s;
      color: var(--bim-view-cube--c, white);
      font-size: var(--bim-view-cube--fz, --bim-ui_size-2xl);
    }

    .x-direction {
      // background-color: var(--bim-view-cube_x--bgc, #c93830DD);
      background-color: var(--bim-view-cube_x--bgc, #01a6bcde);
    }

    .x-direction:hover {
      background-color: var(--bim-ui_accent-base, white);
    }

    .y-direction {
      // background-color: var(--bim-view-cube_y--bgc, #54ff19DD);
      background-color: var(--bim-view-cube_y--bgc, #8d0ec8de);
    }

    .y-direction:hover {
      background-color: var(--bim-ui_accent-base, white);
    }

    .z-direction {
      // background-color: var(--bim-view-cube_z--bgc, #3041c9DD);
      background-color: var(--bim-view-cube_z--bgc, #2718afde);
    }

    .z-direction:hover {
      background-color: var(--bim-ui_accent-base, white);
    }

    .face-front {
      transform: rotateX(180deg);
    }

    .face-back {
      transform: rotateZ(180deg);
    }

    .face-top {
      transform: rotateX(90deg);
    }

    .face-bottom {
      transform: rotateX(270deg);
    }

    .face-right {
      transform: rotateY(-270deg) rotateX(180deg);
    }

    .face-left {
      transform: rotateY(-90deg) rotateX(180deg);
    }
  `;
var K = yn;
Et([
  et({ type: Number, reflect: true })
], K.prototype, "size");
Et([
  et({ type: String, attribute: "right-text", reflect: true })
], K.prototype, "rightText");
Et([
  et({ type: String, attribute: "left-text", reflect: true })
], K.prototype, "leftText");
Et([
  et({ type: String, attribute: "top-text", reflect: true })
], K.prototype, "topText");
Et([
  et({ type: String, attribute: "bottom-text", reflect: true })
], K.prototype, "bottomText");
Et([
  et({ type: String, attribute: "front-text", reflect: true })
], K.prototype, "frontText");
Et([
  et({ type: String, attribute: "back-text", reflect: true })
], K.prototype, "backText");
Et([
  yu()
], K.prototype, "_cssMatrix3D");
var sh = class {
  static init() {
    Ji.defineCustomElement("bim-view-cube", K), Ji.defineCustomElement("bim-world-2d", Zt);
  }
};
export {
  sh as Manager,
  K as ViewCube,
  Zt as World2D,
  eh as buttons,
  ih as tables
};
/*! Bundled license information:

@thatopen/ui-obc/dist/index.js:
  (**
   * @license
   * Copyright 2019 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)
  (**
   * @license
   * Copyright 2020 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)
  (**
  * (c) Iconify
  *
  * For the full copyright and license information, please view the license.txt
  * files at https://github.com/iconify/iconify
  *
  * Licensed under MIT.
  *
  * @license MIT
  * @version 2.0.0
  *)
  (**
   * @license
   * Copyright 2018 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)
*/
//# sourceMappingURL=@thatopen_ui-obc.js.map
